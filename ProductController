package com.croods.vyaparerp.controller.product;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.FileChannel;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.Part;
import javax.validation.Valid;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.util.IOUtils;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.jpa.datatables.mapping.DataTablesInput;
import org.springframework.data.jpa.datatables.mapping.DataTablesOutput;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.croods.vyaparerp.config.ApiResponse;
import com.croods.vyaparerp.config.FileDeletion;
import com.croods.vyaparerp.config.ImageResize;
import com.croods.vyaparerp.config.MenuPermission;
import com.croods.vyaparerp.config.SecurityValidation;
import com.croods.vyaparerp.constant.Constant;
import com.croods.vyaparerp.dto.b2b.DataTableProductB2BSettingResponceDTO;
import com.croods.vyaparerp.dto.b2b.ProductB2BOrderSettingDTO;
import com.croods.vyaparerp.dto.barcode.DataTableBarcodeDTO;
import com.croods.vyaparerp.dto.barcode.DataTableBarcodeResponseDTO;
import com.croods.vyaparerp.dto.brand.MainBrandDTO;
import com.croods.vyaparerp.dto.category.MainCategoryDTO;
import com.croods.vyaparerp.dto.file.FileValidationResponse;
import com.croods.vyaparerp.dto.product.CustomProductSelectDTO;
import com.croods.vyaparerp.dto.product.DataTableOpeningStockDTO;
import com.croods.vyaparerp.dto.product.DataTableProductOpeningStockResponseDTO;
import com.croods.vyaparerp.dto.product.DataTablesStockTransactionsOutput;
import com.croods.vyaparerp.dto.product.MinQtyConfigDto;
import com.croods.vyaparerp.dto.product.ProductB2BDTO;
import com.croods.vyaparerp.dto.product.ProductCUSTOMAttributeDTO;
import com.croods.vyaparerp.dto.product.ProductCUSTOMDTO;
import com.croods.vyaparerp.dto.product.ProductCUSTOMSelectItemDTO;
import com.croods.vyaparerp.dto.product.ProductDTO;
import com.croods.vyaparerp.dto.product.ProductDTOForGarment;
import com.croods.vyaparerp.dto.product.ProductExportDto;
import com.croods.vyaparerp.dto.product.ProductImageDTO;
import com.croods.vyaparerp.dto.product.ProductItemDTO;
import com.croods.vyaparerp.dto.product.ProductMultiBarcodeDTO;
import com.croods.vyaparerp.dto.product.ProductOpeningStockDTO;
import com.croods.vyaparerp.dto.product.ProductOpeningUploadStockDTO;
import com.croods.vyaparerp.dto.product.ProductQuickAttributeDTO;
import com.croods.vyaparerp.dto.product.ProductQuickDTO;
import com.croods.vyaparerp.dto.product.ProductQuickVarientDTO;
import com.croods.vyaparerp.dto.product.ProductSelectItemDTO;
import com.croods.vyaparerp.dto.product.ProductSheetUploadFinalDTO;
import com.croods.vyaparerp.dto.product.ProductStockVerificationDTO;
import com.croods.vyaparerp.dto.product.ProductVarientDTO;
import com.croods.vyaparerp.dto.product.ProductVarientNamedDTO;
import com.croods.vyaparerp.dto.product.ProductVarientPriceDTO;
import com.croods.vyaparerp.dto.product.ProductVarientSheetDTO;
import com.croods.vyaparerp.dto.product.ProductVarientsCUSTOMDTO;
import com.croods.vyaparerp.dto.product.ProductWrongSheetDTO;
import com.croods.vyaparerp.dto.product.SimpleProductDTO;
import com.croods.vyaparerp.dto.product.StockTransferProductMultiBarcodeDTO;
import com.croods.vyaparerp.dto.product.productMultiBarcodeDTOForDepartment;
import com.croods.vyaparerp.dto.purchase.PurchaseBarcodeDTO;
import com.croods.vyaparerp.dto.purchase.PurchaseItemBarcodeDTO;
import com.croods.vyaparerp.dto.purchase.PurchaseUnpaidDTO;
import com.croods.vyaparerp.dto.recipe.ProductFinalPlanningDTO;
import com.croods.vyaparerp.dto.recipe.ProductRawPlanningDTO;
import com.croods.vyaparerp.dto.sales.SalesUnpaidDTO;
import com.croods.vyaparerp.dto.shopify.ShopifyProduct;
import com.croods.vyaparerp.dto.shopify.ShopifyProductImage;
import com.croods.vyaparerp.dto.shopify.ShopifyResponse;
import com.croods.vyaparerp.dto.stock.StockMasterPriceDTO;
import com.croods.vyaparerp.dto.tax.TaxCustomDTO;
import com.croods.vyaparerp.dto.user.BranchDTO;
import com.croods.vyaparerp.dto.vyapar.product.CustomStockMasterDTO;
import com.croods.vyaparerp.dto.vyapar.product.ProductVarientsDTO;
import com.croods.vyaparerp.dto.vyapar.product.StockMasterDTO;
import com.croods.vyaparerp.dto.vyapar.product.StockMasterDTOForDebitNote;
import com.croods.vyaparerp.dto.vyapar.select2DTO.BarcodeDataDTO;
import com.croods.vyaparerp.global.CurrentDateTime;
import com.croods.vyaparerp.repository.barcodemaster.BarcodeMasterRepository;
import com.croods.vyaparerp.repository.barcodemaster.BarcodeMasterSettingRepository;
import com.croods.vyaparerp.repository.contact.ContactProductRepository;
import com.croods.vyaparerp.repository.conversation.ConversationMasterSettingRepository;
import com.croods.vyaparerp.repository.department.DepartmentRepository;
import com.croods.vyaparerp.repository.division.DivisionRepository;
import com.croods.vyaparerp.repository.errorlog.ErrorLogRepository;
import com.croods.vyaparerp.repository.fit.FitRepository;
import com.croods.vyaparerp.repository.jpm.product.JPMProductMRPRepository;
import com.croods.vyaparerp.repository.jpm.product.JPMProductRepository;
import com.croods.vyaparerp.repository.log.ProductChangeLogRepository;
import com.croods.vyaparerp.repository.log.StockMasterChangeLogRepository;
import com.croods.vyaparerp.repository.notification.NotificationRepository;
import com.croods.vyaparerp.repository.product.MinimumQtyConfigRepository;
import com.croods.vyaparerp.repository.product.ProductAttributeRepository;
import com.croods.vyaparerp.repository.product.ProductImageRepository;
import com.croods.vyaparerp.repository.product.ProductMappingRepository;
import com.croods.vyaparerp.repository.product.ProductMultiBarcodeRepository;
import com.croods.vyaparerp.repository.product.ProductPriceMappingRepository;
import com.croods.vyaparerp.repository.product.ProductRepository;
import com.croods.vyaparerp.repository.product.ProductSizeRepository;
import com.croods.vyaparerp.repository.product.ProductTypeRepository;
import com.croods.vyaparerp.repository.product.ProductVariantRepository;
import com.croods.vyaparerp.repository.purchase.PurchaseItemRepository;
import com.croods.vyaparerp.repository.rack.RackRepository;
import com.croods.vyaparerp.repository.sales.SalesItemRepository;
import com.croods.vyaparerp.repository.sales.SalesRepository;
import com.croods.vyaparerp.repository.stock.StockMasterInnerHouseRepository;
import com.croods.vyaparerp.repository.stock.StockMasterRepository;
import com.croods.vyaparerp.repository.stock.StockTransactionInnerHouseRepository;
import com.croods.vyaparerp.repository.stock.StockTransactionRepository;
import com.croods.vyaparerp.repository.unitofmeasurement.UnitQuantityCodeRepository;
import com.croods.vyaparerp.repository.user.UserRepository;
import com.croods.vyaparerp.service.account.AccountCustomService;
import com.croods.vyaparerp.service.azure.AzureBlobService;
import com.croods.vyaparerp.service.brand.BrandService;
import com.croods.vyaparerp.service.category.CategoryService;
import com.croods.vyaparerp.service.contact.ContactService;
import com.croods.vyaparerp.service.customercategory.CustomerCategoryService;
import com.croods.vyaparerp.service.department.DepartmentService;
import com.croods.vyaparerp.service.division.DivisionService;
import com.croods.vyaparerp.service.employee.EmployeeService;
import com.croods.vyaparerp.service.fitpacking.FitPackingService;
import com.croods.vyaparerp.service.importsheet.ProductSheetService;
import com.croods.vyaparerp.service.jpm.JPMService;
import com.croods.vyaparerp.service.prefix.PrefixService;
import com.croods.vyaparerp.service.product.HsnTaxMasterService;
import com.croods.vyaparerp.service.product.POQunatityMasterService;
import com.croods.vyaparerp.service.product.ProductService;
import com.croods.vyaparerp.service.profile.ProfileService;
import com.croods.vyaparerp.service.purchase.PurchaseService;
import com.croods.vyaparerp.service.rack.RackService;
import com.croods.vyaparerp.service.recipe.RecipeService;
import com.croods.vyaparerp.service.sales.SalesService;
import com.croods.vyaparerp.service.setting.CompanySettingService;
import com.croods.vyaparerp.service.shopify.ShopifyService;
import com.croods.vyaparerp.service.stock.BarcodeService;
import com.croods.vyaparerp.service.stock.StockMasterService;
import com.croods.vyaparerp.service.stock.StockTransactionService;
import com.croods.vyaparerp.service.stocklocation.StockLocationService;
import com.croods.vyaparerp.service.stocktransfer.StockTransferService;
import com.croods.vyaparerp.service.stocktransferrequest.StockTransferRequestService;
import com.croods.vyaparerp.service.tax.TaxService;
import com.croods.vyaparerp.service.typesense.TypesenseService;
import com.croods.vyaparerp.service.unitofmeasurement.UnitOfMeasurementService;
import com.croods.vyaparerp.service.warehouse.WarehouseService;
import com.croods.vyaparerp.service.woocommerce.WooCommerceService;
import com.croods.vyaparerp.service.woocommerce.WooService;
import com.croods.vyaparerp.service.woocommercesetup.WoocommerceSetupService;
import com.croods.vyaparerp.util.JasperExporter;
import com.croods.vyaparerp.util.RegexTest;
import com.croods.vyaparerp.vo.account.AccountCustomVo;
import com.croods.vyaparerp.vo.account.AccountGroupVo;
import com.croods.vyaparerp.vo.barcodemaster.BarcodeMasterDTO;
import com.croods.vyaparerp.vo.barcodemaster.BarcodeMasterVo;
import com.croods.vyaparerp.vo.brand.BrandVo;
import com.croods.vyaparerp.vo.category.CategoryVo;
import com.croods.vyaparerp.vo.contact.ContactProductVo;
import com.croods.vyaparerp.vo.contact.ContactVo;
import com.croods.vyaparerp.vo.datatable.DataTableMetaDTO;
import com.croods.vyaparerp.vo.datatable.DataTableProductMappingDTO;
import com.croods.vyaparerp.vo.datatable.DataTableProductMappingResponceDTO;
import com.croods.vyaparerp.vo.datatable.DataTableProductResponceDTONew;
import com.croods.vyaparerp.vo.datatable.DataTableProductStockDTO;
import com.croods.vyaparerp.vo.datatable.DataTableProductStockResponceDTO;
import com.croods.vyaparerp.vo.datatable.DataTableStockLocationDto;
import com.croods.vyaparerp.vo.datatable.DataTableStockTransactionsResponseDTO;
import com.croods.vyaparerp.vo.datatable.salesregister.DataTableMinQtyConfigResponceDTO;
import com.croods.vyaparerp.vo.datatable.salesregister.DataTableProductDTONew;
import com.croods.vyaparerp.vo.department.DepartmentVo;
import com.croods.vyaparerp.vo.employee.EmployeeVo;
import com.croods.vyaparerp.vo.error.ErrorLogVo;
import com.croods.vyaparerp.vo.fit.FitVo;
import com.croods.vyaparerp.vo.log.ProductChangeVo;
import com.croods.vyaparerp.vo.log.StockMasterChangeVo;
import com.croods.vyaparerp.vo.minimumqtyconfig.MinimumQtyConfigVo;
import com.croods.vyaparerp.vo.notification.Greeting;
import com.croods.vyaparerp.vo.notification.NotificationVo;
import com.croods.vyaparerp.vo.packing.PackingVo;
import com.croods.vyaparerp.vo.product.DTOProductFOROpeningStockJSON;
import com.croods.vyaparerp.vo.product.DTOProductVarientsVo;
import com.croods.vyaparerp.vo.product.DTOProductVoFORPOSJSON;
import com.croods.vyaparerp.vo.product.HsnTaxMasterVo;
import com.croods.vyaparerp.vo.product.OfflineDTOProductProjection;
import com.croods.vyaparerp.vo.product.OfflineDTOProductVo;
import com.croods.vyaparerp.vo.product.POQuntityMasterVo;
import com.croods.vyaparerp.vo.product.ProductAttributeVo;
import com.croods.vyaparerp.vo.product.ProductImageVo;
import com.croods.vyaparerp.vo.product.ProductMappingVo;
import com.croods.vyaparerp.vo.product.ProductMultiBarcodeVo;
import com.croods.vyaparerp.vo.product.ProductNutritionVo;
import com.croods.vyaparerp.vo.product.ProductPriceMappingVo;
import com.croods.vyaparerp.vo.product.ProductVarientsForEditPageDTO;
import com.croods.vyaparerp.vo.product.ProductVarientsVo;
import com.croods.vyaparerp.vo.product.ProductVo;
import com.croods.vyaparerp.vo.purchase.PurchaseItemVo;
import com.croods.vyaparerp.vo.purchase.PurchaseVo;
import com.croods.vyaparerp.vo.purchaseconversation.ConversationMasterSettingVo;
import com.croods.vyaparerp.vo.rack.RackVo;
import com.croods.vyaparerp.vo.sales.SalesItemVo;
import com.croods.vyaparerp.vo.sales.SalesVo;
import com.croods.vyaparerp.vo.setting.CompanySettingVo;
import com.croods.vyaparerp.vo.shopifysetup.ShopifySetupVo;
import com.croods.vyaparerp.vo.stock.BarcodeVo;
import com.croods.vyaparerp.vo.stock.StockMasterVo;
import com.croods.vyaparerp.vo.stock.StockTransactionInnerHouseVo;
import com.croods.vyaparerp.vo.stock.StockTransactionVo;
import com.croods.vyaparerp.vo.stocktransfer.StockTransferVo;
import com.croods.vyaparerp.vo.stocktransferrequest.StockTransferRequestVo;
import com.croods.vyaparerp.vo.tax.TaxVo;
import com.croods.vyaparerp.vo.unitofmeasurement.UnitOfMeasurementVo;
import com.croods.vyaparerp.vo.userfront.UserFrontVo;
import com.croods.vyaparerp.vo.userrole.UserRoleVo;
import com.croods.vyaparerp.vo.warehouse.WarehouseVo;
import com.croods.vyaparerp.vo.woocommercesetup.WoocommerceSetupVo;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;

import lombok.extern.java.Log;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;

@Controller
@Log
@RequestMapping("/product")
public class ProductController {

    @Autowired
    JasperExporter jasperExporter;
    @Autowired
    StockMasterService stockMasterService;

    @Autowired
    FileDeletion fileDeletion;

    @Autowired
    RackRepository rackRepository;

    @Autowired
    StockMasterInnerHouseRepository stockMasterInnerHouseRepository;

    @Autowired
    ProductChangeLogRepository productChangeLogRepository;

    @Autowired
    StockMasterChangeLogRepository stockMasterChangeLogRepository;

    @Autowired
    SecurityValidation securityValidation;

    @Autowired
    RecipeService recipeService;

    @Autowired
    DivisionService divisionService;

    @Autowired
    StockLocationService stockLocationService;

    @Autowired
    FitPackingService fitPackingService;

    @Autowired
    StockTransactionInnerHouseRepository stockTransactionInnerHouseRepository;

    @Autowired
    WooCommerceService wooCommerceService;

    @Autowired
    WooService wooService;

    @Autowired
    ProductMultiBarcodeRepository productMultiBarcodeRepository;

    @Autowired
    ProductMappingRepository productMappingRepository;

    @Autowired
    ProductImageRepository productImageRepository;

    @Autowired
    PurchaseItemRepository purchaseItemRepository;

    @Autowired
    SalesItemRepository saleItemRepository;

    @Autowired
    ErrorLogRepository errorLogRepository;

    @Autowired
    CompanySettingService companySettingService;

    @Autowired
    UnitQuantityCodeRepository unitQuantityCodeRepository;

    @Autowired
    CustomerCategoryService customerCategoryService;

    @Autowired
    ProductTypeRepository productTypeRepository;

    @Autowired
    ConversationMasterSettingRepository conversationSettingRepository;

    @Autowired
    ProductService productService;

    @Autowired
    ProductAttributeRepository productAttributeRepository;

    @Autowired
    PurchaseService purchaseService;

    @Autowired
    ProductSheetService productSheetService;
    @Autowired
    CategoryService categoryService;
    @Autowired
    StockMasterRepository stockMasterRepository;

    @Autowired
    ContactService contactService;
    @Autowired
    BrandService brandService;
    @Autowired
    TaxService taxService;
    @Autowired
    UnitOfMeasurementService unitOfMeasurementService;
    @Autowired
    BarcodeService barcodeService;
    @Autowired
    SalesService salesService;

    @Autowired
    StockTransactionService stockTransactionService;
    @Autowired
    ProductVariantRepository productVariantRepository;

    @Autowired
    ShopifyService shopifyService;

    @Autowired
    ProductPriceMappingRepository productPriceMappingRepository;

//    @Autowired
//    private SimpMessagingTemplate messagingTemplate;

    @Autowired
    DepartmentService departmentService;
    @Autowired
    ProfileService profileService;

    @Autowired
    AccountCustomService accountCustomService;

    @Autowired
    BarcodeMasterSettingRepository barcodeMasterSettingRepository;

    @Autowired
    BarcodeMasterRepository barcodeMasterRepository;

    @Autowired
    UserRepository userRepository;

    @Autowired
    ContactProductRepository contactProductRepository;

    @Autowired
    EmployeeService employeeService;

    @Autowired
    NotificationRepository notificationRepository;

    @Autowired
    SalesRepository salesRepository;

    @Autowired
    POQunatityMasterService poQunatityMasterService;

    @Autowired
    WoocommerceSetupService woocommerceSetupService;

    @Autowired
    StockTransferService stockTransferService;

    @Autowired
    JPMProductRepository jpmProductRepository;

    @Autowired
    JPMProductMRPRepository jpmProductMRPRepository;

    @Autowired
    AzureBlobService azureBlobService;

    @Autowired
    HsnTaxMasterService hsnTaxMasterService;

    @Autowired
    ProductRepository productRepository;

    @Autowired
    JPMService jpmService;

    @Autowired
    TypesenseService typesenseService;

    @Autowired
    StockTransactionRepository stockTransactionRepository;

    @Autowired
    WarehouseService warehouseService;

    @Autowired
    RackService rackService;

    @Autowired
    MinimumQtyConfigRepository minimumQtyConfig;

    @Autowired
    StockTransferRequestService stockTransferRequestService;

    @Autowired
    PrefixService prefixService;

    @Autowired
    FitRepository fitRepository;

    @Autowired
    ProductSizeRepository productSizeRepository;

    @Autowired
    DivisionRepository divisionRepository;

    @Autowired
    DepartmentRepository departmentRepository;


    JSONObject variants, options;
    JSONArray jsonArray2;
    JSONObject jsonObject;
    String rowNumber = "";
    long totalRow = 0;
    JasperReport jasperReport;
    JasperPrint jasperPrint;
    OutputStream outputStream;
    HashMap jasperParameter;

    @Value("${autoGrowCollectionLimit}")
    private int autoGrowCollectionLimit;

    @Value("${ACCESS_KEY}")
    private String ACCESS_KEY;

    @Value("${SECRET_KEY}")
    private String SECRET_KEY;

    @Value("${END_POINT_URL}")
    private String END_POINT_URL;

    @Value("${BUCKET}")
    private String BUCKET;

    @Value("${IMAGE_LOCATION}")
    private String IMAGE_LOCATION;

    @Value("${FILE_UPLOAD_SERVER}")
    private String FILE_UPLOAD_SERVER;

    @Value("${CONTAINER_NAME}")
    private String CONTAINER_NAME;

    @Value("${proxy_enabled}")
    private String proxy_enabled;

    @Value("${proxy_server}")
    private String proxy_server;

    @Value("${shopify_proxy_base}")
    private String shopify_proxy_base;

    @Value("${JASPER_REPORT_PATH}")
    private String JASPER_REPORT_PATH;

    @Value("${MAX_IMAGE_SIZE}")
    private Long MAX_IMAGE_SIZE;

    /*
     * String ACCESS_KEY = "AKIAJBGIWSM3SCP2RV4Q"; String SECRET_KEY=
     * "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"; String END_POINT_URL =
     * "http://s3.amazonaws.com";// e.g http://s3.amazonaws.com String BUCKET =
     * "image-ds"; String IMAGE_LOCATION = "product-image";
     */

    String S3_CACHE = "60";
    AmazonS3 s3;

    public static String getFileExtension(File file) {
        String fileName = file.getName();
        if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
            return fileName.substring(fileName.lastIndexOf(".") + 1);
        else
            return "";
    }

    private static Calendar getCalendarForNow() {
        Calendar calendar = GregorianCalendar.getInstance();
        calendar.setTime(new Date());
        return calendar;
    }

    public static double round(double value, int places) {
        if (places < 0)
            throw new IllegalArgumentException();

        long factor = (long) Math.pow(10, places);
        value = value * factor;
        long tmp = Math.round(value);
        return (double) tmp / factor;
    }

    private String BaseUrl(ShopifySetupVo shopifySetupVo) {
        //// log.warning("proxy_enabled------>"+proxy_enabled);
        if (Boolean.valueOf(proxy_enabled)) {
            log.info("Proxy called>>>>>>>");
            String finalUrl = proxy_server + shopify_proxy_base + shopifySetupVo.getDomain();
            // log.warning("finalUrl------>"+finalUrl);

            return finalUrl;
        } else {
            // log.warning("Proxy enabled false########");
            return "https://" + shopifySetupVo.getDomain() + ".myshopify.com";
        }

    }

    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.setAutoGrowCollectionLimit(autoGrowCollectionLimit);
    }

    @RequestMapping(value = {"", "/"})
    public ModelAndView view(HttpSession session) throws Exception {
        ModelAndView view = new ModelAndView("product/product");
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {

            long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
            String clusterId = session.getAttribute("clusterId").toString();
            int taxVal = 1;
            if (session.getAttribute("governmentTaxType").toString().equals(Constant.VAT)) {
                taxVal = 0;
            }
            log.info("merchantTypeId=========" + merchantTypeId + "========clusterId" + clusterId);
//			view.addObject("bayfaySetup", bayfayService
//					.findByBranchIdAndStatus(Long.parseLong(session.getAttribute("branchId").toString()), 0));
            view.addObject("category", categoryService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            view.addObject("brand", brandService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            view.addObject("TaxList", taxService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId, taxVal));
            view.addObject("HsnList",
                    productService.findDistinctHsnCode(Long.parseLong(session.getAttribute("branchId").toString())));
            view.addObject("department", departmentService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            view.addObject("sheetcount", productSheetService
                    .findByCompanyId((Long.parseLong(session.getAttribute("companyId").toString()))));
            view.addObject(Constant.MEMBERSHIP, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP));
            List<WoocommerceSetupVo> list = woocommerceSetupService.findByCompanyIdAndAllowWooCommerce(
                    Long.parseLong(session.getAttribute("companyId").toString()), 1);
            Integer countProduct = productService.countTotalProduct(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
            view.addObject("countProduct", countProduct);
            view.addObject("FILE_UPLOAD_SERVER", FILE_UPLOAD_SERVER);
            view.addObject(Constant.NOTALLOWPRODUCTDELETEOFSTOCKAVAILABLE,
                    companySettingService.findByCompanyIdAndType(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Constant.NOTALLOWPRODUCTDELETEOFSTOCKAVAILABLE));
            view.addObject(Constant.ALLOWB2B, companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWB2B));
            view.addObject(Constant.PRODUCTTYPE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE));
            view.addObject("productType", productTypeRepository.findAll());
            view.addObject(Constant.PRODUCTION,
                    MenuPermission.havePermission(session, Constant.PRODUCTION, Constant.INSERT));
            view.addObject("isInsert", MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT));
            view.addObject("isEdit", MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT));
            view.addObject("isDelete", MenuPermission.havePermission(session, Constant.PRODUCT, Constant.DELETE));
            view.addObject("warehouseList", warehouseService.getAllWarehouseByIsDeleted(0));
            int allowNegativeStock = 0;
            allowNegativeStock = companySettingService
                    .findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()),
                            Constant.ALLOWNEGATIVESTOCK)
                    .getValue();
            view.addObject("allowNegativeStock", allowNegativeStock);
            DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
            Date date = new Date();
            view.addObject("serverdate", dateFormat2.format(date));
            try {
                CompanySettingVo shopify = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.SHOPIFY);
                if (shopify.getValue() == 1) {
                    view.addObject(Constant.SHOPIFY, 1);
                } else {
                    view.addObject(Constant.SHOPIFY, 0);
                }
            } catch (Exception e) {
                // TODO: handle exception
            }
            if (list.size() > 0) {
                view.addObject("allowwoocommerce", 1);
            } else {
                view.addObject("allowwoocommerce", 0);
            }

        } else {
            view.setViewName("accessdenied/accessdenied");
        }
        return view;
    }

    @RequestMapping("/stock")
    public ModelAndView stock(HttpSession session) throws Exception {
        ModelAndView view = new ModelAndView("product/product-stock");
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {
            long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
            String clusterId = session.getAttribute("clusterId").toString();
            int taxVal = 1;
            if (session.getAttribute("governmentTaxType").toString().equals(Constant.VAT)) {
                taxVal = 0;
            }
            List<BranchDTO> branchDTOs = new ArrayList<>();
            if (session.getAttribute("userType").toString().equals("2")) {
                branchDTOs = profileService
                        .getCustomListOfBranch(Long.parseLong(session.getAttribute("companyId").toString()));
            } else {
                branchDTOs = profileService
                        .getCustomBranchDetails(Long.parseLong(session.getAttribute("branchId").toString()));
            }
            view.addObject("branchList", branchDTOs);
            view.addObject("warehouseList", warehouseService.findAllAndCompanyWarehouse(Long.parseLong(session.getAttribute("companyId").toString()), 0));

            view.addObject("productSizeList", productSizeRepository.findAllByIsDeleted(0));
            view.addObject("fitList", fitRepository.findAllByIsDeleted(0));
            view.addObject("TaxList", taxService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId, taxVal));
            view.addObject("HsnList",
                    productService.findDistinctHsnCode(Long.parseLong(session.getAttribute("branchId").toString())));
            view.addObject("department", departmentService.findByCompanyId(
                    Long.parseLong(session.getAttribute("branchId").toString()), merchantTypeId, clusterId));
            view.addObject("division", divisionService.findByCompanyIdAndIsDeletedOrderByDivisionIdDesc(Long.parseLong(session.getAttribute("branchId").toString()), 0, merchantTypeId, clusterId));
            view.addObject(Constant.MANAGEPOQUANTITYINPRODUCT, companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT));
            view.addObject(Constant.PRODUCTTYPE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE));
            view.addObject("productType", productTypeRepository.findAll());
        } else {
            view.setViewName("accessdenied/accessdenied");
        }
        return view;
    }

    // @RequestMapping("/list/datatable")
//    @ResponseBody
//    public DataTablesOutput<ProductVo> ListProduct(HttpSession session, @Valid DataTablesInput input,
//                                                   @RequestParam Map<String, String> allRequestParams) throws NumberFormatException, JsonProcessingException {
//        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
//
//        // input.getColumns().forEach( q -> log.info(q.getData()));
//        // DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
//
//        Specification<ProductVo> specification = new Specification<ProductVo>() {
//
//            @Override
//            public Predicate toPredicate(Root<ProductVo> root, CriteriaQuery<?> query,
//                                         CriteriaBuilder criteriaBuilder) {
//                List<Predicate> predicates = new ArrayList<Predicate>();
//
//                predicates.add(criteriaBuilder.equal(root.get("isDeleted"), 0));
//                predicates.add(criteriaBuilder.equal(root.get("companyId"), companyId));
//                query.orderBy(criteriaBuilder.desc(root.get("productId")));
//
//                if (!allRequestParams.get("category").equals("")) {
//                    predicates.add(criteriaBuilder.or(
//                            criteriaBuilder.equal(root.get("categoryVo").get("categoryId"),
//                                    Long.parseLong(allRequestParams.get("category").toString())),
//                            criteriaBuilder.equal(root.get("categoryVo").get("categoryVo").get("categoryId"),
//                                    Long.parseLong(allRequestParams.get("category").toString()))));
//                }
//                if (!allRequestParams.get("brand").equals("")) {
//                    predicates.add(criteriaBuilder.or(
//                            criteriaBuilder.equal(root.get("brandVo").get("brandId"),
//                                    Long.parseLong(allRequestParams.get("brand").toString())),
//                            criteriaBuilder.equal(root.get("brandVo").get("brandVo").get("brandId"),
//                                    Long.parseLong(allRequestParams.get("brand").toString()))));
//                }
//                if (!allRequestParams.get("purchaseTaxId").equals("")) {
//                    predicates.add(criteriaBuilder.equal(root.get("purchaseTaxVo").get("taxId"),
//                            Long.parseLong(allRequestParams.get("purchaseTaxId").toString())));
//                }
//                if (!allRequestParams.get("salesTaxId").equals("")) {
//                    predicates.add(criteriaBuilder.equal(root.get("taxVo").get("taxId"),
//                            Long.parseLong(allRequestParams.get("salesTaxId").toString())));
//                }
//                if (!allRequestParams.get("hsn").equals("")) {
//                    predicates.add(criteriaBuilder.equal(root.get("hsnCode"), allRequestParams.get("hsn").toString()));
//                }
//
//                return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
//            }
//        };
//
//        Specification<ProductVo> additionalSpecification = new Specification<ProductVo>() {
//
//            @Override
//            public Predicate toPredicate(Root<ProductVo> root, CriteriaQuery<?> query,
//                                         CriteriaBuilder criteriaBuilder) {
//                List<Predicate> predicates = new ArrayList<Predicate>();
//
//                if (!allRequestParams.get("search.value").toString().equals("")) {
//                    //System.err.println(
//                            "search value in datatable ----- " + allRequestParams.get("search.value").toString());
//                    //System.err.println("company id in datatable ----- " + companyId);
//                    List<Long> productVarientsVo = productService
//                            .findByitemCodeIgnoreCaseeOrProductVoNameContainingIgnoreCaseAndCompanyIdAndIsDeleted(
//                                    allRequestParams.get("search.value").toString(), companyId, 0);
//
//                    if (productVarientsVo.isEmpty()) {
//
//                    } else {
//                        predicates.add(root.get("productId").in(productVarientsVo));
//                        // predicates.add(criteriaBuilder.equal(root.get("productId"),productVarientsVo));
//                    }
//                }
//
////				if (!allRequestParams.get("search.value").toString().equals("")) {
////					//System.err.println(
////							"search value in datatable ----- " + allRequestParams.get("search.value").toString());
////					//System.err.println("company id in datatable ----- " + companyId);
////					ProductVarientsVo productVarientsVo = productService
////							.findByitemCodeIgnoreCaseeOrProductVoNameContainingIgnoreCaseAndCompanyIdAndIsDeleted(
////									allRequestParams.get("search.value").toString(), companyId, 0);
////
////					if (productVarientsVo != null) {
////
////						predicates.add(criteriaBuilder.equal(root.get("productId"),
////								productVarientsVo.getProductVo().getProductId()));
////					}
////				}
//
//                return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
//            }
//        };
//
//        DataTablesOutput<ProductVo> a = productService.findAll(input, additionalSpecification, specification);
//        a.getData().forEach(y -> {
//            y.setCreatedbyname(profileService.getName(y.getCreatedBy()));
//        });
//
////        a.getData().forEach(y -> {
////
////            String sm = stockMasterRepository.findByProductVarientsVoProductVoProductId(y.getProductId(),
////                    Long.parseLong(session.getAttribute("branchId").toString()),
////                    session.getAttribute("financialYear").toString());
////            if (sm == null) {
////                y.setQtyOfProduct(0);
////            } else {
////                y.setQtyOfProduct(Double.parseDouble(sm));
////            }
////
////            boolean isExistInTransaction = false;
////            /*
////             * stockTransactionService.existByProductIdAndCompanyId(y.getProductId(),
////             * companyId);
////             */
////            y.setExistInTransaction(isExistInTransaction);
////        });
//
////        a.getData().forEach(y -> {
////
////            List<ProductImageVo> imageVos = productImageRepository
////                    .findByProductVoProductIdAndIsDeletedOrderByPosition(y.getProductId(), 0);
////
////            if (imageVos.size() > 0) {
////                try {
////                    y.setImage(Constant.REALPATH + imageVos.get(0).getSrc());
////                } catch (Exception e) {
////                    y.setImage("/No-image-found.jpg");
////                }
////
////            } else {
////                y.setImage("/No-image-found.jpg");
////            }
////
////        });
//
//        a.getData().forEach(x -> {
//            x.getProductVarientsVos().forEach(y -> y.setProductVo(null));
//
//            if (x.getCategoryVo().getCategoryVo() == null) {
//                x.getCategoryVo().setCategoryVo(null);
//            } else {
//                x.getCategoryVo().getCategoryVo().setCategoryVo(null);
//            }
//            if (x.getBrandVo().getBrandVo() == null) {
//                x.getBrandVo().setBrandVo(null);
//            } else {
//                x.getBrandVo().getBrandVo().setBrandVo(null);
//            }
//
//        });
//        log.info("-=-=-=--=-=-===================----->>>>>>>>>>>>>>>>" + a.getData().size());
//
//        return a;
//
//    }
    @PostMapping("/list/datatable")
    @ResponseBody
    public DataTableProductResponceDTONew ListProduct(HttpSession session,
                                                      @RequestParam Map<String, String> allRequestParams) throws NumberFormatException, JsonProcessingException {
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        String searchValue = "";
        String financialYear = session.getAttribute("financialYear").toString();
        Integer totallength = 0;
        List<Long> productlist = new ArrayList<>();
        List<DataTableProductDTONew> list = new ArrayList<DataTableProductDTONew>();
        if (allRequestParams.get("search.value") != null && !allRequestParams.get("search.value").equals("")) {
            searchValue = allRequestParams.get("search.value").toString();
            searchValue = searchValue.replace(" ", "%");
        }
        totallength = productService.countByProductDatatable(companyId, searchValue, merchantTypeId, clusterId);
        int start = 0;
        if (allRequestParams.get("start") == null) {
            start = 0;
        } else {
            start = Integer.parseInt(allRequestParams.get("start"));
        }

        String pageLength = "";
        if (StringUtils.isNotBlank(allRequestParams.get("length"))) {
            pageLength = allRequestParams.get("length");
        } else {
            pageLength = "10";
        }

        int length = 0, page = 0, offset = 0, draw = 1;
        try {
            if (allRequestParams.get("draw") != null && !allRequestParams.get("draw").equals("")) {
                draw = 1;
            } else {
                draw = Integer.parseInt(allRequestParams.get("draw").toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (!pageLength.equals("-1")) {
            if (allRequestParams.get("length") == null || allRequestParams.get("length").equals("")) {
                length = 10;
            } else {
                length = Integer.parseInt(allRequestParams.get("length"));
            }
            page = start / length; // Calculate page number
            offset = page * length;
            log.info("length::::>>>>>" + length);
        } else {
            length = totallength;
            offset = 0;
        }
        list = productService.findByProductDatatable(companyId, branchId, searchValue, length, offset, financialYear,
                merchantTypeId, clusterId);
        double totalRecords = totallength;
        DataTableProductResponceDTONew dto = new DataTableProductResponceDTONew();
        dto.setData(list);
        dto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
        dto.setError(null);
        dto.setRecordsFiltered((int) totalRecords);
        dto.setRecordsTotal((int) totalRecords);
        dto.setDataTableMetaDTO(
                new DataTableMetaDTO(page, (int) Math.ceil((totalRecords) / length), (int) length, (int) totalRecords));
        return dto;
    }

    @PostMapping("/stock/list/datatable")
    @ResponseBody
    public DataTableProductStockResponceDTO stockListProduct(HttpSession session,
                                                             @RequestParam(value = "warehouseId", required = false) Long warehouseId,
                                                             @RequestParam Map<String, String> allRequestParams) throws NumberFormatException, JsonProcessingException {
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        long purchaseTaxId = 0L, salesTax = 0L, department = 0L, division = 0L, fit = 0L, productSize = 0l;
        String hsn = "", searchValue = "";
        String financialYear = session.getAttribute("financialYear").toString();
        Integer totallength = 0;
        List<Long> productlist = new ArrayList<>();
        List<DataTableProductStockDTO> list = new ArrayList<DataTableProductStockDTO>();
        if (allRequestParams.get("fit") != null && !allRequestParams.get("fit").equals("")) {
            fit = Long.parseLong(allRequestParams.get("fit").toString());
        }

        if (allRequestParams.get("productSize") != null && !allRequestParams.get("productSize").equals("")) {
            productSize = Long.parseLong(allRequestParams.get("productSize").toString());
        }

        if (allRequestParams.get("division") != null && !allRequestParams.get("division").equals("")) {
            division = Long.parseLong(allRequestParams.get("division").toString());
        }
        if (allRequestParams.get("purchaseTaxId") != null && !allRequestParams.get("purchaseTaxId").equals("")) {
            purchaseTaxId = Long.parseLong(allRequestParams.get("purchaseTaxId").toString());
        }
        if (allRequestParams.get("salesTaxId") != null && !allRequestParams.get("salesTaxId").equals("")) {
            salesTax = Long.parseLong(allRequestParams.get("salesTaxId").toString());
        }
        if (allRequestParams.get("department") != null && !allRequestParams.get("department").equals("")) {
            department = Long.parseLong(allRequestParams.get("department").toString());
        }
        if (allRequestParams.get("hsn") != null && !allRequestParams.get("hsn").equals("")) {
            hsn = allRequestParams.get("hsn").toString();
        }

        if (allRequestParams.get("search[value]") != null && !allRequestParams.get("search[value]").equals("")) {
            searchValue = allRequestParams.get("search[value]").toString();
        }

        List<Long> warehouses = new ArrayList();
        if (allRequestParams.get("warehouses") != null && !allRequestParams.get("warehouses").equals("")) {
            String warehousesIds = allRequestParams.get("warehouses").toString();
            System.out.println("warehousesIds ---->>>> " + warehousesIds);
            List<String> warehouseList = Arrays.asList(warehousesIds.split(","));

            for (String string : warehouseList) {
                warehouses.add(Long.valueOf(string));
            }
            if (warehouses.isEmpty()) {
                warehouses.add(0L);
            }

        }
        if (warehouses.isEmpty()) {
            warehouses.add(0L);
        }

        log.info(warehouses.size() + "===============================");

        if (warehouses != null) {
            totallength = productService.countByStockProductDatatable(companyId, 0, purchaseTaxId, salesTax, hsn, department, warehouses, division, fit, productSize, financialYear, searchValue);
        }
        log.info("totallength" + totallength);
        int start = Integer.parseInt(allRequestParams.get("start"));
        String pageLength = allRequestParams.get("length");
        int length = 0, page = 0, offset = 0, draw = 1;
        try {
            if (allRequestParams.get("draw") != null && !allRequestParams.get("draw").equals("")) {
                draw = 1;
            } else {
                draw = Integer.parseInt(allRequestParams.get("draw").toString());
            }
        } catch (Exception e) {
        }

        if (!pageLength.equals("-1")) {
            length = Integer.parseInt(allRequestParams.get("length"));
            page = start / length; // Calculate page number
            offset = page * length;
            log.info("length::::>>>>>" + length);
        } else {
            length = totallength;
            offset = 0;
        }
        if (warehouses != null) {
            list = productService.findByStockDatatable(companyId, 0, purchaseTaxId, salesTax, hsn, department, length, offset, warehouses, division, fit, productSize, financialYear, searchValue);
        }
        log.info("list" + list.toString());
        double totalRecords = totallength;

        DataTableProductStockResponceDTO dto = new DataTableProductStockResponceDTO();
        dto.setData(list);
        dto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
        dto.setError(null);
        dto.setRecordsFiltered((int) totalRecords);
        dto.setRecordsTotal((int) totalRecords);
        dto.setDataTableMetaDTO(new DataTableMetaDTO(page, (int) Math.ceil((totalRecords) / length), (int) length, (int) totalRecords));
        return dto;
    }

    @RequestMapping("new")
    public ModelAndView newProduct(HttpSession session) {
        ModelAndView mv = new ModelAndView();
        mv.addObject(Constant.EXPIRY, companySettingService
                .findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()), Constant.EXPIRY));
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
            String clusterId = session.getAttribute("clusterId").toString();
            int taxVal = 1;
            if (session.getAttribute("governmentTaxType").toString().equals(Constant.VAT)) {
                taxVal = 0;
            }
            String key = "product_" + Calendar.getInstance().getTimeInMillis();
            mv.addObject("productKey", key);
            mv.addObject("categoryBrandPermissions",
                    MenuPermission.havePermission(session, Constant.CATEGORY_BRANDS, Constant.EDIT));
            mv.addObject("divisionList", divisionService.findByCompanyIdAndIsDeletedOrderByDivisionIdDesc(Long.parseLong(session.getAttribute("branchId").toString()), 0, merchantTypeId, clusterId));
            mv.addObject("fitList", productService.getFitData());
            mv.addObject("packingList", productService.getPackingData());
            mv.addObject("UomList", unitOfMeasurementService.findByCompanyIdAndIsDeleted(
                    Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId));
            mv.addObject("CategoryList", categoryService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            mv.addObject("warehouseList", warehouseService.getAllWarehouseByIsDeleted(0));
            mv.addObject("BrandList", brandService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            mv.addObject("TaxList", taxService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId, taxVal));
            mv.addObject("ProductOption",
                    productService.getProductOption(Long.parseLong(session.getAttribute("companyId").toString()), 0));
            mv.addObject("department", departmentService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            mv.addObject(Constant.MULTIBARCODE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIBARCODE));
            mv.addObject(Constant.STOPUMOWISEDECIMAL, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.STOPUMOWISEDECIMAL));
            mv.addObject(Constant.MULTIDUPLICATEBARCODE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIDUPLICATEBARCODE));
            mv.addObject(Constant.ALLOWB2B, companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWB2B));
            mv.addObject(Constant.FATOORAHQRCODE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.FATOORAHQRCODE));
            mv.addObject("category", categoryService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            mv.addObject("brand", brandService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            mv.addObject(Constant.ALLPRICESHOW, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW));
            mv.addObject(Constant.MANAGEPOQUANTITYINPRODUCT, companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT));
            CompanySettingVo setting = companySettingService
                    .findByBranchIdAndType(Long.parseLong(session.getAttribute("branchId").toString()), "taxIncluded");
            mv.addObject("taxIncluded", setting.getValue());
            CompanySettingVo setting1 = companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), "purchaseTaxIncluded");
            mv.addObject("purchaseTaxIncluded", setting1.getValue());
            mv.addObject(Constant.PURCHASECONVERSATION, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PURCHASECONVERSATION));
            List<ConversationMasterSettingVo> purchaseConversationVos = conversationSettingRepository
                    .findByCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
            mv.addObject("purchaseConversationVos", purchaseConversationVos);
            mv.addObject(Constant.MEMBERSHIP, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP));
            mv.addObject(Constant.PRODUCTTYPE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE));
            mv.addObject("productType", productTypeRepository.findAll());
            /*
             * ShopifySetupVo shopifySetupVo = shopifyService
             * .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()
             * ), "shopify");
             */
            mv.addObject(Constant.REATILERMARGIN, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.REATILERMARGIN));
            mv.addObject(Constant.WHOLESALERMARGIN, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.WHOLESALERMARGIN));
            mv.addObject(Constant.SELLINGMARGIN, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.SELLINGMARGIN));
            CompanySettingVo allowshopify = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.SHOPIFY);
            mv.addObject(Constant.BARCODESERIES, 0);
            mv.addObject("createTaxPermission", MenuPermission.havePermission(session, Constant.TAX, Constant.INSERT));
//            if (Long.parseLong(session.getAttribute("companyId").toString()) == 202) {
//                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//                log.info("barcodeseriesssssss" + barcodeSeries.getValue());
//                mv.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
//            }
//            if (Long.parseLong(session.getAttribute("companyId").toString()) == 415) {
//                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//                log.info("barcodeseriesssssss" + barcodeSeries.getValue());
//                mv.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
//            }
//
//            if (Long.parseLong(session.getAttribute("companyId").toString()) == 436) {
//                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//                log.info("barcodeseriesssssss" + barcodeSeries.getValue());
//                mv.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
//            }

            CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEGENRATESERIESWISE);
            if (barcodegenrateserieswise != null) {
                if (barcodegenrateserieswise.getValue() == 1) {
                    CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                            Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEMANAGE);
                    if (barcodemanage != null && barcodemanage.getValue() == 2) {
                        try {
                            CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    Constant.BARCODESERIES);
                            CompanySettingVo barcodeprefix = companySettingService.findByCompanyIdAndType(
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    Constant.BARCODEPREFIX);
                            CompanySettingVo barcodelength = companySettingService.findByCompanyIdAndType(
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    Constant.BARCODELENGTH);
                            mv.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
                            mv.addObject(Constant.BARCODEPREFIX, barcodeprefix.getAddValue());
                            mv.addObject(Constant.BARCODEGENRATESERIESWISE, 1);
                            mv.addObject(Constant.BARCODELENGTH, barcodelength.getValue());
                        } catch (Exception e) {
                            // TODO: handle exception
                        }

                    } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                        try {
                            CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    Constant.BARCODESERIES);
                            CompanySettingVo barcodeprefix = companySettingService.findByBranchIdAndType(
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    Constant.BARCODEPREFIX);
                            CompanySettingVo barcodelength = companySettingService.findByBranchIdAndType(
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    Constant.BARCODELENGTH);
                            mv.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
                            mv.addObject(Constant.BARCODEPREFIX, barcodeprefix.getAddValue());
                            mv.addObject(Constant.BARCODEGENRATESERIESWISE, 1);
                            mv.addObject(Constant.BARCODELENGTH, barcodelength.getValue());
                        } catch (Exception e) {
                            // TODO: handle exception
                        }
                    }
                }
            }
            if (allowshopify != null) {
                if (allowshopify.getValue() == 1) {
                    mv.addObject("shopifySetup", 1);
                } else {
                    mv.addObject("shopifySetup", 0);
                }
                /*
                 * ShopifyResponse responce=shopifyService.checkCredentials(shopifySetupVo);
                 * if(responce.isStatus()) { mv.addObject("shopifySetup",1); }
                 */
            }
            WoocommerceSetupVo woocommerceVo = woocommerceSetupService
                    .getWoocommerceDetail(Long.parseLong(session.getAttribute("companyId").toString()));
            mv.addObject("woocommerce", 0);
            if (woocommerceVo != null && woocommerceVo.getAllowWooCommerce() != 0) {
                mv.addObject("woocommerce", 1);
            }
            UserFrontVo frontVo = userRepository
                    .findByUserFrontId(Long.parseLong(session.getAttribute("userId").toString()));
            UserRoleVo role = frontVo.getRoles().iterator().next();
            // log.info("role iddd" + role.getUserRoleId());
            if (role.getUserRoleId() > Constant.URID_USER) {

                EmployeeVo employeeVo = employeeService.findByUserFronIdAndBranchId(
                        Long.parseLong(session.getAttribute("userId").toString()),
                        Long.parseLong(session.getAttribute("branchId").toString()));
                mv.addObject("prefix", employeeVo.getOfflinePrefix());
            }
            mv.addObject("UnitCode", unitQuantityCodeRepository.getUnitname());
            mv.setViewName("product/product-new");
        } else {
            mv.setViewName("accessdenied/accessdenied");
        }
        return mv;
    }

    /*
     * public ModelAndView insertProduct(HttpSession session, @RequestParam
     * Map<String, String> allRequestParams,
     *
     * @ModelAttribute("product") ProductVo product, BindingResult bindingResult,
     * Model model) { ////log.info("update product getShopifySync-------------" +
     * product.getShopifySync()); ModelAndView view = new ModelAndView(); for
     * (ProductVarientsVo long1 : product.getProductVarientsVos()) { try {
     * System.out.println("=============" + long1.getExpdate()); } catch (Exception
     * ex) { System.out.println("============="); } }
     *
     * if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT)
     * == 1 || MenuPermission.havePermission(session, Constant.PRODUCT,
     * Constant.INSERT) == 1) { long productId = product.getProductId(); long
     * productId1 = product.getProductId(); List<ProductVarientPriceDTO>
     * productVarientPriceList = new ArrayList<>(); if (productId != 0) {
     * productVarientPriceList =
     * productService.findProductVarientPriceDetails(productId, 0); }
     * product.setBranchId(Long.parseLong(session.getAttribute("branchId").toString(
     * ))); product.setCompanyId(Long.parseLong(session.getAttribute("companyId").
     * toString()));
     * product.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()))
     * ;
     * product.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()
     * )); product.setModifiedOn(CurrentDateTime.getCurrentDate());
     * product.setCreatedOn(CurrentDateTime.getCurrentDate()); String itemcodeSeries
     * = "";
     *
     * try { if (product.getProductVarientsVos() != null &&
     * product.getProductVarientsVos().size() > 0) {
     * product.getProductVarientsVos().removeIf(y -> y.getItemCode() == null); } }
     * catch (Exception e) { e.printStackTrace(); }
     *
     * try { if (product.getProductAttributeVos() != null &&
     * product.getProductAttributeVos().size() > 0) {
     * product.getProductAttributeVos().removeIf(y ->
     * StringUtils.isBlank(y.getOptionName())); } } catch (Exception e) { // TODO:
     * handle exception e.printStackTrace(); }
     *
     *
     * try { if (product.getHaveVariation() == 1 && product.getProductAttributeVos()
     * != null) { product.getProductAttributeVos().forEach(a -> {
     * a.setProductVo(product); }); } } catch (Exception e) { e.printStackTrace(); }
     *
     * List<Long> productVarientWithBatchList = new ArrayList<>(); boolean
     * newProductVariant = false; for (int i = 0; i <
     * product.getProductVarientsVos().size(); i++) { ProductVarientsVo
     * productVarientsVo = product.getProductVarientsVos().get(i);
     * log.warning("getAttributeName1----->" +
     * productVarientsVo.getAttributeName1());
     * //log.warning("productVarientId----->"+productVarientsVo.getProductVarientId(
     * )); if (productVarientsVo.getProductVarientId() != 0) {
     * productVarientWithBatchList.add(productVarientsVo.getProductVarientId()); }
     * else { System.out.println("ExpDate=========================" +
     * productVarientsVo.getExpdate()); newProductVariant = true; }
     * productVarientsVo.setBranchId(Long.parseLong(session.getAttribute("branchId")
     * .toString()));
     * productVarientsVo.setCompanyId(Long.parseLong(session.getAttribute(
     * "companyId").toString())); productVarientsVo.setProductVo(product);
     * itemcodeSeries = product.getProductVarientsVos().get(i).getItemCode(); }
     *
     * if (product.getProductNutritionVos() != null &&
     * product.getProductNutritionVos().size() > 0) {
     * product.getProductNutritionVos().removeIf(y -> y.getName() == null);
     * product.getProductNutritionVos().forEach(x -> { x.setProductVo(product); });
     * } if (productId == 0) { try { if
     * (StringUtils.isNotBlank(product.getProductKey())) { String productid =
     * productService.getProductIdByProductKeyAndCompanyId(product.getProductKey(),
     * Long.parseLong(session.getAttribute("companyId").toString())); if
     * (StringUtils.isNotBlank(productid)) {
     * product.setProductId(Long.parseLong(productid)); List<Long> varientList =
     * productService.getProductVarientsByProductId(Long.parseLong(productid));
     * productService.deleteProductMultiBarcodeByProductVarientId(varientList);
     * productService.deleteNutritiontitemsByProductId(Long.parseLong(productid));
     * productService.deleteVariantsByproductId(Long.parseLong(productid));
     * productService.deleteAttributesByProductId(Long.parseLong(productid));
     * productId1 = Long.parseLong(productid); } } } catch (Exception e) {
     * e.printStackTrace(); } CompanySettingVo barcodegenrateserieswise =
     * companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODEGENRATESERIESWISE); if (barcodegenrateserieswise != null) {
     * if (barcodegenrateserieswise.getValue() == 1) { CompanySettingVo
     * barcodemanage = companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODEMANAGE); if (barcodemanage != null &&
     * barcodemanage.getValue() == 2) { try { CompanySettingVo barcodeSeries =
     * companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODESERIES); CompanySettingVo barcodeprefix =
     * companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODEPREFIX); if (StringUtils.contains(itemcodeSeries,
     * barcodeprefix.getAddValue())) { itemcodeSeries =
     * itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
     * barcodeSeries.setAddValue(itemcodeSeries);
     * companySettingService.saveCompanySetting(barcodeSeries); } } catch (Exception
     * e) { // TODO: handle exception }
     *
     * } else if (barcodemanage != null && barcodemanage.getValue() == 3) { try {
     * CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
     * Long.parseLong(session.getAttribute("branchId").toString()),
     * Constant.BARCODESERIES); CompanySettingVo barcodeprefix =
     * companySettingService.findByBranchIdAndType(
     * Long.parseLong(session.getAttribute("branchId").toString()),
     * Constant.BARCODEPREFIX);
     *
     * if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
     * itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
     * barcodeSeries.setAddValue(itemcodeSeries);
     * companySettingService.saveCompanySetting(barcodeSeries); } } catch (Exception
     * e) { // TODO: handle exception }
     *
     * } } }
     *
     * } if (allRequestParams.get("deletevarientitemIds") != null &&
     * !allRequestParams.get("deletevarientitemIds").equals("")) { String address =
     * allRequestParams.get("deletevarientitemIds").substring(0,
     * allRequestParams.get("deletevarientitemIds").length() - 1);
     * //System.err.println("HERE dELETE id is ----->"+address); List<Long> l =
     * Arrays.asList(address.split(",")).stream().map(Long::parseLong)
     * .collect(Collectors.toList());
     * productService.deleteVarientItem(product.getBranchId(), l);
     *
     * wooService.deleteProductVariation(product.getWooCommerceCreatedProductId(),
     * product.getCompanyId(), l);
     *
     * }
     *
     * if (allRequestParams.get("deletevaluetitemIds") != null &&
     * !allRequestParams.get("deletevaluetitemIds").equals("")) { String address =
     * allRequestParams.get("deletevaluetitemIds").substring(0,
     * allRequestParams.get("deletevaluetitemIds").length() - 1); List<Long> l =
     * Arrays.asList(address.split(",")).stream().map(Long::parseLong)
     * .collect(Collectors.toList());
     * productService.deleteValueItem(product.getBranchId(), l); }
     *
     * if (allRequestParams.get("deletenutritiontitemIds") != null &&
     * !allRequestParams.get("deletenutritiontitemIds").equals("")) { String address
     * = allRequestParams.get("deletenutritiontitemIds").substring(0,
     * allRequestParams.get("deletenutritiontitemIds").length() - 1); List<Long> l =
     * Arrays.asList(address.split(",")).stream().map(Long::parseLong)
     * .collect(Collectors.toList());
     * productService.deletenutritiontitemIds(product.getBranchId(), l); }
     * product.setItemCode(product.getProductVarientsVos().get(0).getItemCode());
     * product.setSellingPrice(product.getProductVarientsVos().get(0).
     * getSellingPrice());
     * product.setMrp(product.getProductVarientsVos().get(0).getMrp());
     * System.out.println(product.getIsExpirySee() +
     * "========================Done=============="); ProductVo productVo =
     * productService.insertProduct(product);
     *
     *
     * if (productId != 0) { try { productPriceActivityLog(productVarientPriceList,
     * productVo, session); } catch (IllegalArgumentException e) {
     * e.printStackTrace(); } catch (IllegalAccessException e) { // TODO
     * Auto-generated catch block e.printStackTrace(); }
     *
     * try { if (newProductVariant) { List<Long> productIdList = new ArrayList<>();
     * productIdList.add(productVo.getProductId()); saveAttributes(productIdList,
     * session); } } catch (Exception e) { e.printStackTrace(); }
     *
     * } try { for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
     * String itemCode = productVo.getProductVarientsVos().get(i).getItemCode();
     * long productVarientId =
     * productVo.getProductVarientsVos().get(i).getProductVarientId(); long
     * companyId = Long.parseLong(session.getAttribute("companyId").toString());
     * List<ProductMultiBarcodeVo> productMultiBarcodeVos =
     * productMultiBarcodeRepository.
     * findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(productVarientId,
     * companyId, 0, 1); if (!productMultiBarcodeVos.isEmpty()) {
     * ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
     * productMultiBarcodeVo.setItemCode(itemCode); ProductMultiBarcodeVo
     * productMultiBarcodeVo2 =
     * productMultiBarcodeRepository.saveAndFlush(productMultiBarcodeVo); } else {
     * ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
     * productMultiBarcodeVo.setBranchId(Long.parseLong(session.getAttribute(
     * "branchId").toString()));
     * productMultiBarcodeVo.setCompanyId(Long.parseLong(session.getAttribute(
     * "companyId").toString()));
     * productMultiBarcodeVo.setAlterBy(Long.parseLong(session.getAttribute("userId"
     * ).toString()));
     * productMultiBarcodeVo.setCreatedBy(Long.parseLong(session.getAttribute(
     * "userId").toString()));
     * productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
     * productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
     * productMultiBarcodeVo.setProductVarientId(productVarientId);
     * productMultiBarcodeVo.setItemCode(itemCode);
     * productMultiBarcodeVo.setIsDefault(1); ProductMultiBarcodeVo
     * productMultiBarcodeVo2 =
     * productMultiBarcodeRepository.saveAndFlush(productMultiBarcodeVo); } } }
     * catch (Exception e) { e.printStackTrace(); }
     *
     * CompanySettingVo setting =
     * companySettingService.findByBranchIdAndType(Long.parseLong(session.
     * getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT); if
     * (setting != null && setting.getValue() == 1) { POQuntityMasterVo master =
     * poQunatityMasterService.findByProductIdAndBranchId(product.getProductId(),
     * Long.parseLong(session.getAttribute("branchId").toString())); if (master ==
     * null) { master = new POQuntityMasterVo();
     * master.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()
     * )); master.setPoQuantity(product.getPoQuantity());
     * master.setStockLimit(product.getStockLimit());
     * master.setProductVo(productVo);
     * master.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString())
     * );
     * master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString())
     * ); } else { master.setPoQuantity(product.getPoQuantity());
     * master.setStockLimit(product.getStockLimit());
     * master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString())
     * ); } master = poQunatityMasterService.save(master); } try { if (productId1 ==
     * 0) { for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
     * log.warning("productVarientId" +
     * productVo.getProductVarientsVos().get(i).getProductVarientId());
     * log.warning("openingQty" +
     * productVo.getProductVarientsVos().get(i).getOpeningQty()); double openingQty
     * = 0; try { openingQty =
     * Double.parseDouble(productVo.getProductVarientsVos().get(i).getOpeningQty());
     * } catch (Exception e) { e.printStackTrace(); }
     *
     * boolean ownBranch = false;
     *
     * if (openingQty != 0) { log.warning("-=-=-=-==-==>>>>>>>call save stock");
     * List<StockTransactionVo> stockTransactionVos = new
     * ArrayList<StockTransactionVo>(1);
     *
     * StockTransactionVo stockTransactionVo = new StockTransactionVo();
     * stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId"
     * ).toString()));
     * stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute(
     * "companyId").toString()));
     * stockTransactionVo.setDescription("Opening Stock");
     * stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId")
     * .toString())); stockTransactionVo.setInQuantity(openingQty);
     * stockTransactionVo.setProductPrice(productVo.getProductVarientsVos().get(i).
     * getPurchasePrice()); stockTransactionVo.setBatchNo("B" +
     * productVo.getProductVarientsVos().get(i).getProductVarientId() + new
     * DecimalFormat("#.###").format(productVo.getProductVarientsVos().get(i).
     * getLandingCost()) + new
     * DecimalFormat("#.###").format(productVo.getProductVarientsVos().get(i).getMrp
     * ()));
     * stockTransactionVo.setMrp(productVo.getProductVarientsVos().get(i).getMrp());
     * stockTransactionVo.setLandingCost(productVo.getProductVarientsVos().get(i).
     * getLandingCost());
     * stockTransactionVo.setSellingPrice(productVo.getProductVarientsVos().get(i).
     * getSellingPrice());
     * stockTransactionVo.setProductVarientsVo(productVo.getProductVarientsVos().get
     * (i)); stockTransactionVo.setWarehouseId(allRequestParams.get("warehouse_id")
     * != "" ? Long.parseLong(allRequestParams.get("warehouse_id")) : 0L);
     * stockTransactionVo.setRackId(allRequestParams.get("rack_id") != "" ?
     * Long.parseLong(allRequestParams.get("rack_id")) : 0L); DateFormat dateFormat3
     * = new SimpleDateFormat("dd/MM/yyyy"); try {
     * stockTransactionVo.setStockTransactionDate(
     * dateFormat3.parse(session.getAttribute("firstDateFinancialYear").toString()))
     * ; } catch (ParseException e) { e.printStackTrace(); }
     * stockTransactionVo.setType("new");
     * stockTransactionVo.setTypeId(productVo.getProductVarientsVos().get(i).
     * getProductVarientId());
     * stockTransactionVo.setYearInterval(session.getAttribute("financialYear").
     * toString());
     *
     * SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy"); String
     * dateString = "";
     *
     * if (productVo.getIsExpiryManage() == 1) { if (productVo.getHaveVariation() ==
     * 1) { dateString = productVo.getProductVarientsVos().get(i).getExpdate(); }
     * else { dateString = productVo.getExpdate();
     *
     * } Calendar c = Calendar.getInstance(); Date date = format.parse(dateString);
     * c.setTime(date); SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
     * String strDate = ""; if (productVo.getExpDateType().equalsIgnoreCase("MFG"))
     * { stockTransactionVo.setManufactureDate(c.getTime()); c.add(Calendar.DATE,
     * Integer.parseInt(productVo.getExpirationdays())); // Adding days
     * stockTransactionVo.setExpirationDate(c.getTime()); strDate =
     * formatter.format(c.getTime()); } else {
     * stockTransactionVo.setExpirationDate(c.getTime()); strDate =
     * formatter.format(c.getTime()); c.add(Calendar.DATE,
     * Integer.parseInt(productVo.getExpirationdays()) * -1); // Adding days
     * stockTransactionVo.setManufactureDate(c.getTime()); }
     * stockTransactionVo.setExpirationManage(1);
     *
     * log.warning("strDate >> : " + strDate);
     *
     * log.warning("Batch Before  >> : " + stockTransactionVo.getBatchNo());
     * stockTransactionVo.setBatchNo(stockTransactionVo.getBatchNo() + strDate);
     * log.warning("Batch After  >> : " + stockTransactionVo.getBatchNo());
     *
     * } if (stockTransactionVo.getInQuantity() != 0 ||
     * stockTransactionVo.getOutQuantity() != 0) {
     * stockTransactionVos.add(stockTransactionVo); }
     * stockTransactionService.saveOpeningStock(stockTransactionVos);
     *
     * try { wooService.updateProductStockInWooCommerce(stockTransactionVos);
     * shopifyService.updateStockInShopify(stockTransactionVos, session); } catch
     * (Exception e) { e.printStackTrace(); } ownBranch = true; }else{ try {
     * List<StockMasterVo> masterVos = new ArrayList<StockMasterVo>(); StockMasterVo
     * stockMasterVo = new StockMasterVo(); stockMasterVo.setBatchNo("B" +
     * productVo.getProductVarientsVos().get(i).getProductVarientId() + new
     * DecimalFormat("#.###").format(productVo.getProductVarientsVos().get(i).
     * getLandingCost()) + new
     * DecimalFormat("#.###").format(productVo.getProductVarientsVos().get(i).getMrp
     * ()));
     * stockMasterVo.setBranchId(Long.parseLong(session.getAttribute("branchId").
     * toString()));
     * stockMasterVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").
     * toString())); stockMasterVo.setCreatedOn(new Date());
     * stockMasterVo.setExpirationDays(0); stockMasterVo.setIsDisable(0);
     * stockMasterVo.setLandingCost(productVo.getProductVarientsVos().get(i).
     * getLandingCost()); stockMasterVo.setModified_on(new Date());
     * stockMasterVo.setQuantity(openingQty);
     * stockMasterVo.setMrp(productVo.getProductVarientsVos().get(i).getMrp());
     * stockMasterVo.setProductVarientsVo(productVo.getProductVarientsVos().get(i));
     * stockMasterVo.setPurchasePrice(productVo.getProductVarientsVos().get(i).
     * getPurchasePrice());
     * stockMasterVo.setSellingPrice(productVo.getProductVarientsVos().get(i).
     * getSellingPrice());
     * stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString(
     * )); stockMasterVo.setWarehouseId(allRequestParams.get("warehouse_id") != "" ?
     * Long.parseLong(allRequestParams.get("warehouse_id")) : 0L);
     * stockMasterVo.setRackId(allRequestParams.get("rack_id") != "" ?
     * Long.parseLong(allRequestParams.get("rack_id")) : 0L);
     *
     * SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy"); String
     * dateString = "";
     *
     * if (productVo.getIsExpiryManage() == 1) { if (productVo.getHaveVariation() ==
     * 1) { dateString = productVo.getProductVarientsVos().get(i).getExpdate(); }
     * else { dateString = productVo.getExpdate(); } Calendar c =
     * Calendar.getInstance(); Date date = format.parse(dateString);
     * c.setTime(date); SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
     * String strDate = ""; if (productVo.getExpDateType().equalsIgnoreCase("MFG"))
     * { stockMasterVo.setManufactureDate(c.getTime()); c.add(Calendar.DATE,
     * Integer.parseInt(productVo.getExpirationdays())); // Adding days
     * stockMasterVo.setExpirationDate(c.getTime()); strDate =
     * formatter.format(c.getTime()); } else {
     * stockMasterVo.setExpirationDate(c.getTime()); strDate =
     * formatter.format(c.getTime()); c.add(Calendar.DATE,
     * Integer.parseInt(productVo.getExpirationdays()) * -1); // Adding days
     * stockMasterVo.setManufactureDate(c.getTime()); } log.warning("strDate >> : "
     * + strDate);
     *
     * log.warning("Batch Before  >> : " + stockMasterVo.getBatchNo());
     * stockMasterVo.setBatchNo(stockMasterVo.getBatchNo() + strDate);
     * log.warning("Batch After  >> : " + stockMasterVo.getBatchNo());
     *
     * } masterVos.add(stockMasterVo); stockMasterService.saveAll(masterVos); }
     * catch (Exception e) { e.printStackTrace(); } } } } else {
     *
     * List<StockMasterVo> masterVos = new ArrayList<StockMasterVo>(); List<Long>
     * branchIdList =
     * userRepository.getbranchList(Long.parseLong(session.getAttribute("companyId")
     * .toString()));
     *
     * List<ProductVarientsVo> varientsList = new ArrayList<>();
     * List<ProductVarientsVo> list = productVo.getProductVarientsVos();
     * ArrayList<ProductVarientsVo> myList = new ArrayList<ProductVarientsVo>();
     * myList.addAll(list); varientsList = (ArrayList) myList.clone(); for (int i =
     * 0; i < list.size(); i++) { if
     * (StringUtils.isNotEmpty(product.getProductVarientsVos().get(i).getExpdate()))
     * { varientsList.get(i).setExpdate(product.getProductVarientsVos().get(i).
     * getExpdate()); } }
     *
     * //log.warning("BEFORE-----__>"+varientsList.size()); varientsList.removeIf(p
     * -> productVarientWithBatchList.contains(p.getProductVarientId()));
     * //log.warning("AFTER-----__>"+varientsList.size()); if
     * (!varientsList.isEmpty()) { for (int i = 0; i < branchIdList.size(); i++) {
     * for (int j = 0; j < varientsList.size(); j++) { if
     * (productVarientWithBatchList.contains(varientsList.get(j).getProductVarientId
     * ())) { //log.warning("varientId Conatains ---->"+varientsList.get(j).
     * getProductVarientId()); } else {
     * //log.warning("varientId Not Conatains ---->"+varientsList.get(j).
     * getProductVarientId()); StockMasterVo stockMasterVo = new StockMasterVo();
     * stockMasterVo.setBatchNo("B" + varientsList.get(j).getProductVarientId() +
     * new DecimalFormat("#.###").format(varientsList.get(j).getLandingCost()) + new
     * DecimalFormat("#.###").format(varientsList.get(j).getMrp()));
     * stockMasterVo.setBranchId(Long.parseLong("" + branchIdList.get(i)));
     * stockMasterVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").
     * toString())); stockMasterVo.setCreatedOn(new Date());
     * stockMasterVo.setExpirationDays(0); stockMasterVo.setIsDisable(0);
     * stockMasterVo.setLandingCost(varientsList.get(j).getLandingCost());
     * stockMasterVo.setModified_on(new Date());
     * stockMasterVo.setMrp(varientsList.get(j).getMrp());
     * stockMasterVo.setProductVarientsVo(varientsList.get(j));
     * stockMasterVo.setPurchasePrice(varientsList.get(j).getPurchasePrice());
     * stockMasterVo.setQuantity(0);
     * stockMasterVo.setSellingPrice(varientsList.get(j).getSellingPrice());
     * stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString(
     * )); if (productVo.getIsExpiryManage() == 1) { Calendar c =
     * Calendar.getInstance(); SimpleDateFormat format = new
     * SimpleDateFormat("dd-MM-yyyy"); String dateString =
     * varientsList.get(j).getExpdate(); Date date = format.parse(dateString);
     * c.setTime(date); SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
     * String strDate = ""; if (product.getExpDateType().equalsIgnoreCase("MFG")) {
     * stockMasterVo.setManufactureDate(c.getTime()); c.add(Calendar.DATE,
     * Integer.parseInt(product.getExpirationdays())); // Adding days
     * stockMasterVo.setExpirationDate(c.getTime()); strDate =
     * formatter.format(c.getTime()); } else {
     * stockMasterVo.setExpirationDate(c.getTime()); strDate =
     * formatter.format(c.getTime()); c.add(Calendar.DATE,
     * Integer.parseInt(product.getExpirationdays()) * -1); // Adding days
     * stockMasterVo.setManufactureDate(c.getTime()); } log.warning("strDate >> : "
     * + strDate);
     *
     * log.warning("Batch Before  >> : " + stockMasterVo.getBatchNo());
     * stockMasterVo.setBatchNo(stockMasterVo.getBatchNo() + strDate);
     * log.warning("Batch After  >> : " + stockMasterVo.getBatchNo()); }
     *
     * masterVos.add(stockMasterVo); }
     *
     * } } stockMasterService.saveAll(masterVos); }
     *
     * } } catch (Exception e) { e.printStackTrace(); } try {
     * wooService.syncOneProductInWooCommerce(productVo.getProductId(), session);
     * //wooCommerceService.saveProductInWooCommerce(session, productVo);
     *
     * } catch (Exception e) { e.printStackTrace(); // TODO: handle exception }
     * ////log.info("update product getShopifySync-------------" +
     * product.getShopifySync()); // if (product.getShopifySync() == 1) {
     * ShopifySetupVo shopifySetupVo =
     * shopifyService.getShopifyDetail(Long.parseLong(session.getAttribute(
     * "companyId").toString()), "shopify");
     * ////log.info("update product getShopifySync1111-------------" +
     * product.getShopifySync()); if (shopifySetupVo != null) {
     * ////log.info("update product controller-------------"); ShopifyResponse
     * responce = shopifyService.checkCredentials(shopifySetupVo); if
     * (responce.isStatus()) {
     *//* shopifyService.updateProduct(product, shopifySetupVo); *//*
     * shopifyService.saveProductInShopify(productVo,
     * shopifySetupVo,
     * session.getAttribute("financialYear").toString(),
     * productId);
     *
     * } else { ////log.
     * info("update product controller save------------"
     * ); // Greeting greeting = new Greeting(); //
     * greeting.setContent("Somthing Went To Wrong"); //
     * try { // //
     * messagingTemplate.convertAndSendToUser("" +
     * product.getCreatedBy(), "/queue/reply",
     * greeting); // } catch (Exception x) { //
     * x.printStackTrace(); // } }
     *
     * }
     *
     * try { if (Long.parseLong(session.getAttribute(
     * "merchantTypeId").toString()) == 0 ||
     * Long.parseLong(session.getAttribute(
     * "merchantTypeId").toString()) == 1) {
     * typesenseService.createSingleProductInTypesense(
     * productVo.getProductId(),
     * Long.parseLong(session.getAttribute("companyId").
     * toString())); } } catch (Exception e) { // TODO:
     * handle exception e.printStackTrace(); }
     *
     * // } if (allRequestParams.get("saveandnew") !=
     * null && Integer.parseInt(allRequestParams.get(
     * "saveandnew").toString()) == 1) {
     * view.setViewName("redirect:/product/new"); } else
     * { view.setViewName("redirect:/product/" +
     * product.getProductId()); } } else {
     * view.setViewName("accessdenied/accessdenied"); }
     * return view; }
     */
    @PostMapping("/create")
    public ModelAndView insertProduct(HttpSession session, @RequestParam Map<String, String> allRequestParams,
                                      @ModelAttribute("product") ProductVo product, BindingResult bindingResult, Model model) {
        ModelAndView view = new ModelAndView();
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT) == 1
                || MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            long productId = product.getProductId();
            System.err.println("product id :" + productId);
            ProductVo productVo = new ProductVo();
            if (productId != 0) {
                Optional<ProductVo> productVoOptional = productRepository.findById(productId);
                System.err.println("productVoOptional :" + productVoOptional.get().toString());
                if (productVoOptional.isPresent()) {
                    ProductVo productEntity = productVoOptional.get();
                    productEntity.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                    productEntity.setModifiedOn(CurrentDateTime.getCurrentDate());
                    productEntity.setDisplayName(product.getDisplayName());
                    productEntity.setName(product.getName());
                    productEntity.setHsnCode(product.getHsnCode());
                    productEntity.setTaxIncluded(product.getTaxIncluded());
                    productEntity.setTaxVo(product.getTaxVo());
                    productEntity.setUnitOfMeasurementVo(product.getUnitOfMeasurementVo());
                    productEntity.setPurchaseTaxVo(product.getPurchaseTaxVo());
                    productEntity.setProductType("Finished");
                    productEntity.setShortDescription(product.getShortDescription());
                    productEntity.setDescription(product.getDescription());
                    productEntity.setProductKey(product.getProductKey());
                    productEntity.setPurchaseTaxIncluded(product.getPurchaseTaxIncluded());
                    productEntity.setMerchantTypeId(Long.parseLong(session.getAttribute("merchantTypeId").toString()));
//                    productEntity.setClusterId(session.getAttribute("clusterId").toString());
                    CategoryVo categoryVo = categoryService.findByCategoryId(1);
                    productEntity.setCategoryVo(categoryVo);
                    BrandVo brandVo = brandService.getByBrandId(1);
                    productEntity.setBrandVo(brandVo);
                    System.err.println("Before saving product id " + productEntity.getProductId());
                    productVo = productService.insertProduct(productEntity);
                    System.err.println("After saving product id " + productVo.getProductId());
                }
            } else {
                String itemCode = null;
                Map<Long, Map<String, String>> mapItem = purchaseService.generateRandomItemCode(null, "product", session);
                for (Map.Entry<Long, Map<String, String>> entry : mapItem.entrySet()) {
                    Map<String, String> innerMap = entry.getValue();
                    for (Map.Entry<String, String> innerEntry : innerMap.entrySet()) {
                        System.out.println("Item Code: " + innerEntry.getKey());
                        itemCode = innerEntry.getValue();
                    }
                }
                ProductVo productEntity = new ProductVo();
                productEntity.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                productEntity.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                productEntity.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                productEntity.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                productEntity.setModifiedOn(CurrentDateTime.getCurrentDate());
                productEntity.setCreatedOn(CurrentDateTime.getCurrentDate());
                productEntity.setDisplayName(product.getDisplayName());
                productEntity.setName(product.getName());
                productEntity.setHsnCode(product.getHsnCode());
                productEntity.setTaxIncluded(product.getTaxIncluded());
                productEntity.setTaxVo(product.getTaxVo());
                productEntity.setUnitOfMeasurementVo(product.getUnitOfMeasurementVo());
                productEntity.setPurchaseTaxVo(product.getPurchaseTaxVo());
                productEntity.setProductType(product.getProductType());
                productEntity.setShortDescription(product.getShortDescription());
                productEntity.setDescription(product.getDescription());
                productEntity.setProductKey(product.getProductKey());
                productEntity.setMerchantTypeId(Long.parseLong(session.getAttribute("merchantTypeId").toString()));
//                productEntity.setClusterId(session.getAttribute("clusterId").toString());
                CategoryVo categoryVo = categoryService.findByCategoryId(1);
                productEntity.setCategoryVo(categoryVo);
                BrandVo brandVo = brandService.getByBrandId(1);
                productEntity.setBrandVo(brandVo);
                productEntity.setItemCode(itemCode);
                System.out.println(product.getIsExpirySee() + "========================Done==============");
                productVo = productService.insertProduct(productEntity);

                System.err.println("Product id in creation :" + productVo.getProductId());
                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                productVarientsVo = productService.insertProductIntoProductVarient(productVo, session);
            }
            CompanySettingVo setting = companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
            if (setting != null && setting.getValue() == 1) {
                System.err.println("Setting value :" + setting.getValue());
                POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(product.getProductId(),
                        Long.parseLong(session.getAttribute("branchId").toString()));
                if (master == null) {
                    master = new POQuntityMasterVo();
                    master.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                    master.setPoQuantity(product.getPoQuantity());
                    master.setStockLimit(product.getStockLimit());
                    master.setProductVo(productVo);
                    master.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                    master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString()));
                    System.err.println("Master Created :" + master.toString());
                } else {
                    master.setPoQuantity(product.getPoQuantity());
                    master.setStockLimit(product.getStockLimit());
                    master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString()));
                    System.err.println("Master edited :" + master.toString());
                }
                master = poQunatityMasterService.save(master);
            }
            if (allRequestParams.get("saveandnew") != null
                    && Integer.parseInt(allRequestParams.get("saveandnew").toString()) == 1) {
                view.setViewName("redirect:/product/new");
            } else {
                System.err.println("Product id at redirect:" + productVo.getProductId());
                view.setViewName("redirect:/product/" + productVo.getProductId());
            }
        } else {
            view.setViewName("accessdenied/accessdenied");
        }
        return view;
    }

    @GetMapping("/rack/{warehouseId}")
    @ResponseBody
    public List<RackVo> getRackCodeByWarehouseId(@PathVariable Long warehouseId, HttpSession session) {
        return rackService.getRackCodeByWarehouseId(warehouseId);
    }

    // ===================product minimum quantity config=========================//
    @RequestMapping("/minimumqtyconfig")
    public ModelAndView minimumQtyConfig(HttpSession session) {
        ModelAndView mv = new ModelAndView("product/minimumqtyconfig");
        mv.addObject(Constant.MINQTYCONFIG, companySettingService
                .findByBranchIdAndType(Long.parseLong(session.getAttribute("branchId").toString()), Constant.MINQTYCONFIG));
        mv.addObject("customerCategoryList",
                customerCategoryService.findByCompanyId(Long.parseLong(session.getAttribute("companyId").toString())));
        mv.addObject("branchList", profileService.getListOfBranch(Long.parseLong(session.getAttribute("companyId").toString())));

        return mv;
    }

    @PostMapping("/getproductsminqtyconfig")
    @ResponseBody
    public DataTableMinQtyConfigResponceDTO getAllProductsMinQtyConfig(@RequestParam Map<String, String> allRequestParams, HttpSession session) {
        Integer totallength = 0;
        String serachValue = "";

        if (allRequestParams.get("search[value]") != null && !allRequestParams.get("search[value]").equals("")) {
            serachValue = allRequestParams.get("search[value]").toString();
            System.out.println("serachValue------------------->" + serachValue);
        }

        totallength = productService.countAllProductVarientsIdsForMinQtyConfig(Long.parseLong(session.getAttribute("companyId").toString()), Long.parseLong(allRequestParams.get("branchId")), serachValue, 0);
        int start = Integer.parseInt(allRequestParams.get("start"));
        String pageLength = allRequestParams.get("length");
        int length = 0, page = 0, offset = 0, draw = 1;

        try {
            if (allRequestParams.get("draw") != null && !allRequestParams.get("draw").equals("")) {
                draw = 1;
            } else {
                draw = Integer.parseInt(allRequestParams.get("draw").toString());
            }
        } catch (Exception e) {
        }

        if (!pageLength.equals("-1")) {
            length = Integer.parseInt(allRequestParams.get("length"));
            page = start / length;
            offset = page * length;
        } else {
            length = totallength;
            offset = 0;
        }
        List<MinQtyConfigDto> list = new ArrayList<MinQtyConfigDto>();
        list = productService.findAllProductsForMinQtyConfig(Long.parseLong(session.getAttribute("companyId").toString()), Long.parseLong(allRequestParams.get("branchId")), length, offset, serachValue, 0);
        double totalRecords = totallength;
        DataTableMinQtyConfigResponceDTO dto = new DataTableMinQtyConfigResponceDTO();
        dto.setData(list);
        dto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
        dto.setError(null);
        dto.setRecordsFiltered((int) totalRecords);
        dto.setRecordsTotal((int) totalRecords);
        dto.setDataTableMetaDTO(new DataTableMetaDTO(page, (int) Math.ceil((totalRecords) / length), (int) length, (int) totalRecords));
        return dto;
    }

    // ===================product price mapping B2B=========================//
    @RequestMapping("/productb2bmapping")
    public ModelAndView productB2BMapping(HttpSession session) {
        ModelAndView mv = new ModelAndView("product/product-b2b-mapping");
        mv.addObject(Constant.ALLOWB2B, companySettingService
                .findByBranchIdAndType(Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWB2B));
        mv.addObject("customerCategoryList",
                customerCategoryService.findByCompanyId(Long.parseLong(session.getAttribute("companyId").toString())));
        return mv;
    }

    @PostMapping("/getallproducts")
    @ResponseBody
    public JSONObject getAllProductsB2BMapping(@RequestParam Map<String, String> allRequestParams,
                                               HttpSession session) {
        //// log.warning("page-------->"+allRequestParams.get("page"));
        //// log.warning("size-------->"+allRequestParams.get("size"));
        int page = Integer.parseInt(allRequestParams.get("page"));
        int length = Integer.parseInt(allRequestParams.get("size"));
        int offset = page * length;
        String productname = (StringUtils.isNotBlank(allRequestParams.get("search").toString())
                ? allRequestParams.get("search").toString()
                : "");
        //// log.warning("offset-------->"+offset);
        JSONObject response = new JSONObject();
        int count = productService.countAllProductVarientsIdsForB2B(
                Long.parseLong(session.getAttribute("companyId").toString()), productname);
        List<ProductB2BDTO> dataList = productService.findAllProductVarientsIdsForB2B(
                Long.parseLong(session.getAttribute("companyId").toString()), length, offset, productname);
        response.put("dataList", dataList);
        response.put("count", count);
        return response;
    }

    @ResponseBody
    @RequestMapping(value = "/createproductminqtyconfig", method = RequestMethod.POST)
    public ResponseEntity<ApiResponse> insertMinQtyConfig(HttpServletRequest request, HttpSession session,
                                                          @RequestParam Map<String, String> allRequestParams) {

        long productVarientId = Long.parseLong(allRequestParams.get("productVariantId"));
        long minQtyConfigId = Long.parseLong(allRequestParams.get("minimumQtyId"));

//		Long branchId = minimumQtyConfig.getBranchIdByProductVarientId(Long.parseLong(allRequestParams.get("productVariantId")), 0);

        ApiResponse apiResponse = null;
        if (productVarientId != 0) {
            MinimumQtyConfigVo minQtyVo = minimumQtyConfig.findByMinimumQtyIdAndDivisionIdAndDepartmentIdAndProductSizeIdAndFitId(minQtyConfigId, Long.parseLong(allRequestParams.get("divisionId")), Long.parseLong(allRequestParams.get("departmentId")), Long.parseLong(allRequestParams.get("sizeId")), Long.parseLong(allRequestParams.get("fitId")));
            if (minQtyVo == null) {
                minQtyVo = minimumQtyConfig.findByBranchIdAndDivisionIdAndDepartmentIdAndProductSizeIdAndFitIdAndProductVarientId(
                        Long.parseLong(allRequestParams.get("branchId")),
                        Long.parseLong(allRequestParams.get("divisionId")),
                        Long.parseLong(allRequestParams.get("departmentId")),
                        Long.parseLong(allRequestParams.get("sizeId")),
                        Long.parseLong(allRequestParams.get("fitId")),
                        Long.parseLong(allRequestParams.get("productVariantId")));


                if (minQtyVo == null) {
                    minQtyVo = new MinimumQtyConfigVo();
                    minQtyVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                }
            } else {
                minQtyVo = minimumQtyConfig.findByBranchIdAndDivisionIdAndDepartmentIdAndProductSizeIdAndFitIdAndProductVarientId(
                        Long.parseLong(allRequestParams.get("branchId")),
                        Long.parseLong(allRequestParams.get("divisionId")),
                        Long.parseLong(allRequestParams.get("departmentId")),
                        Long.parseLong(allRequestParams.get("sizeId")),
                        Long.parseLong(allRequestParams.get("fitId")),
                        Long.parseLong(allRequestParams.get("productVariantId")));

                if (minQtyVo == null) {
                    minQtyVo = new MinimumQtyConfigVo();
                    minQtyVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                }
            }


            minQtyVo.setProductVarientId(Long.parseLong(allRequestParams.get("productVariantId")));
            minQtyVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
            minQtyVo.setBranchId(Long.parseLong(allRequestParams.get("branchId")));
            minQtyVo.setCompanyId(Long.parseLong(session.getAttribute("userId").toString()));
            minQtyVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
            minQtyVo.setCreatedByName(profileService.getName(Long.parseLong(session.getAttribute("userId").toString())));
            minQtyVo.setModifiedOn(CurrentDateTime.getCurrentDate());
            minQtyVo.setDepartmentId(Long.parseLong(allRequestParams.get("departmentId")));
            minQtyVo.setDivisionId(Long.parseLong(allRequestParams.get("divisionId")));
            minQtyVo.setFitId(Long.parseLong(allRequestParams.get("fitId")));
            minQtyVo.setProductSizeId(Long.parseLong(allRequestParams.get("sizeId")));
            if (allRequestParams.get("strQty").equals("strQty")) {
                minQtyVo.setStrQty(Double.parseDouble(allRequestParams.get("qty")));
            }

            if (allRequestParams.get("minQty").equals("minQty")) {
                minQtyVo.setMinimumQty(Double.parseDouble(allRequestParams.get("qty")));
            }


            minimumQtyConfig.save(minQtyVo);
            apiResponse = new ApiResponse(true, "Product Quantity Updated", null);
        } else {
            apiResponse = new ApiResponse(false, "Product Varient Required", null);
        }
        return ResponseEntity.ok(apiResponse);
    }

    @ResponseBody
    @RequestMapping(value = "/createproductpricemapping", method = RequestMethod.POST)
    public ResponseEntity<ApiResponse> insertProductPriceMapping(HttpServletRequest request, HttpSession session,
                                                                 @RequestParam(name = "price", defaultValue = "0", required = false) double price,
                                                                 @RequestParam(name = "customerCategoryId", defaultValue = "0", required = false) long customerCategoryId,
                                                                 @RequestParam(name = "productVarientId", defaultValue = "0", required = false) long productVarientId,
                                                                 @RequestParam(name = "productPriceMappingId", defaultValue = "0", required = false) long productPriceMappingId) {
        ApiResponse apiResponse = null;
        if (productVarientId != 0) {
            if (customerCategoryId != 0) {

                ProductPriceMappingVo mappingVo = null;
                if (productPriceMappingId != 0) {
                    mappingVo = productPriceMappingRepository.findByProductPriceMappingId(productPriceMappingId);
                    if (mappingVo == null) {
                        mappingVo = new ProductPriceMappingVo();
                        mappingVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                    }
                } else {
                    mappingVo = new ProductPriceMappingVo();
                    mappingVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                }

                mappingVo.setPrice(price);
                mappingVo.setProductPriceMappingId(productPriceMappingId);
                mappingVo.setProductVarientId(productVarientId);
                mappingVo.setCustomerCategoryId(customerCategoryId);
                mappingVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                mappingVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                mappingVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                mappingVo.setCreatedByName(
                        profileService.getName(Long.parseLong(session.getAttribute("userId").toString())));
                mappingVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                mappingVo.setModifiedOn(CurrentDateTime.getCurrentDate());

                mappingVo = productPriceMappingRepository.saveAndFlush(mappingVo);

                apiResponse = new ApiResponse(true, "Price Updated", mappingVo);
            } else {
                apiResponse = new ApiResponse(false, "Customer Category Required", null);
            }
        } else {
            apiResponse = new ApiResponse(false, "Product Varient Required", null);
        }
        return ResponseEntity.ok(apiResponse);
    }

    @RequestMapping("/b2bproduct/setting")
    public ModelAndView b2bProductsPage(HttpSession session) {
        ModelAndView view = new ModelAndView();

        if (MenuPermission.havePermission(session, Constant.B2BPRODUCTSETTING, Constant.VIEW) == 1) {
            view.setViewName("b2b/b2b-product");

        } else {
            view.setViewName("accessdenied/accessdenied");
        }
        return view;
    }

    @PostMapping("/{type}/customdatatable")
    @ResponseBody
    public DataTableProductB2BSettingResponceDTO ListProduct(HttpSession session, @PathVariable("type") String type,
                                                             @RequestParam Map<String, String> allRequestParams) throws NumberFormatException, JsonProcessingException {
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        String serachValue = "";
        Integer totallength = 0;
        List<ProductB2BOrderSettingDTO> list = new ArrayList<ProductB2BOrderSettingDTO>();
        int isBtoBShow = 0;
        if (StringUtils.equalsIgnoreCase(type, "show")) {
            isBtoBShow = 1;
        }
        //// log.warning("isBtoBShow------------>"+isBtoBShow);
        if (allRequestParams.get("search.value") != null && !allRequestParams.get("search.value").equals("")) {
            serachValue = allRequestParams.get("search.value").toString();
        }
        totallength = productService.countDatatableB2BSettingDTO(companyId, isBtoBShow, serachValue);
        int start = 0;
        if (allRequestParams.get("start") == null) {
            start = 0;
        } else {
            start = Integer.parseInt(allRequestParams.get("start"));
        }

        String pageLength = "";
        if (StringUtils.isNotBlank(allRequestParams.get("length"))) {
            pageLength = allRequestParams.get("length");
        } else {
            pageLength = "10";
        }

        int length = 0, page = 0, offset = 0, draw = 1;
        try {
            if (allRequestParams.get("draw") != null && !allRequestParams.get("draw").equals("")) {
                draw = 1;
            } else {
                draw = Integer.parseInt(allRequestParams.get("draw").toString());
            }
        } catch (Exception e) {
            // TODO: handle exception
        }

        if (!pageLength.equals("-1")) {
            if (allRequestParams.get("length") == null || allRequestParams.get("length").equals("")) {
                length = 10;
            } else {
                length = Integer.parseInt(allRequestParams.get("length"));
            }

            page = start / length; // Calculate page number
            offset = page * length;
            log.info("length::::>>>>>" + length);
        } else {
            length = totallength;
            offset = 0;
        }
        list = productService.findDatatableB2BSettingDTO(companyId, isBtoBShow, serachValue, length, offset);

        double totalRecords = totallength;
        DataTableProductB2BSettingResponceDTO dto = new DataTableProductB2BSettingResponceDTO();
        dto.setData(list);
        dto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
        dto.setError(null);
        dto.setRecordsFiltered((int) totalRecords);
        dto.setRecordsTotal((int) totalRecords);
        dto.setDataTableMetaDTO(
                new DataTableMetaDTO(page, (int) Math.ceil((totalRecords) / length), (int) length, (int) totalRecords));

        return dto;

    }

    // ===================product price mapping B2B=========================//

    @ResponseBody
    @RequestMapping(value = "/createproductforpos", method = RequestMethod.POST)
    public ApiResponse insertProductForPos(HttpServletRequest request, HttpSession session,
                                           @RequestParam("itemCode") String itemCode,
                                           @RequestParam(defaultValue = "", name = "expirationdays") String expDays,
                                           @RequestParam("posName") String posName, @RequestParam("taxId") String taxId,
                                           @RequestParam("posMrp") String posMrp, @RequestParam("posQty") String posQty,
                                           @RequestParam("uom") String uom, @RequestParam("categoryId") String categoryId,
                                           @RequestParam(name = "subCategoryId", defaultValue = "0", required = false) long subCategoryId,
                                           @RequestParam(name = "subBrandId", defaultValue = "0", required = false) long subBrandId,
                                           @RequestParam("posPurchasePrice") String posPurchasePrice, @RequestParam("posHsnCode") String posHsnCode,
                                           @RequestParam("brandId") String brandId,
                                           @RequestParam("posPurchaseTaxInclude") String pospurchaseTaxIncluded,
                                           @RequestParam("posSalesTaxInclude") String posTaxIncluded,
                                           @RequestParam("posLandingCost") String posLandingCost,
                                           @RequestParam("posSellingPrice") String posSellingPrice, @RequestParam("posDiscount") String posDiscount,
                                           @RequestParam("posDiscounType") String posDiscountType,
                                           @RequestParam(value = "posproducttypet", defaultValue = "Finished") String posproducttypet,
                                           @RequestParam(value = "isExpiryManage", defaultValue = "0") String isExpiryManage,
                                           @RequestParam(value = "isBatchManage", defaultValue = "0") String isBatchManage,
                                           @RequestParam(value = "expiryType", defaultValue = "0") String expiryType,
                                           @RequestParam(value = "isSeeExpiry", defaultValue = "0") String isSeeExpiry,
                                           @RequestParam(value = "expDate", defaultValue = "0") String expDate) {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            String itemcodeSeries = "";
            ProductVo product = new ProductVo();
            List<ProductVarientsVo> productVarientVoList = new ArrayList<>();
            product.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
            product.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
            product.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
            product.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
            product.setModifiedOn(CurrentDateTime.getCurrentDate());
            product.setCreatedOn(CurrentDateTime.getCurrentDate());
            product.setName(posName);
            product.setDisplayName(posName);
            product.setProductType(posproducttypet);
            product.setTaxIncluded(Integer.parseInt(posTaxIncluded));
            product.setPurchaseTaxIncluded(Integer.parseInt(pospurchaseTaxIncluded));
            product.setIsBatchManage(Integer.parseInt(isBatchManage));
            product.setIsExpiryManage(Integer.parseInt(isExpiryManage));
            product.setExpDateType(expiryType.trim());
            System.out.println(expiryType.trim() + "=============");
            product.setIsExpirySee(Integer.parseInt(isSeeExpiry));
            if (StringUtils.isNotBlank(expDays)) {
                product.setExpirationdays(expDays);
            }
            // this changes is told by @janam Soni on 13/01/2021 p-tax including no purchase
            // price and hsn code and code by yash patel

            // product.setDiscountType(posDiscountType);
            // product.setDiscount(Double.parseDouble(posDiscount));
            product.setHaveVariation(0);
            try {
                product.setHsnCode(posHsnCode);
            } catch (Exception e) {
                e.printStackTrace();
            }

            CategoryVo categoryVo = new CategoryVo();
            categoryVo.setCategoryId(Long.parseLong(categoryId));
            product.setCategoryVo(categoryVo);

            BrandVo brandVo = new BrandVo();
            brandVo.setBrandId(Long.parseLong(brandId));
            product.setBrandVo(brandVo);
            if (subCategoryId != 0) {
                CategoryVo subCategoryVo = new CategoryVo();
                subCategoryVo.setCategoryId(subCategoryId);
                product.setSubCategoryVo(subCategoryVo);
            }
            if (subBrandId != 0) {
                BrandVo subBrandVo = new BrandVo();
                subBrandVo.setBrandId(subBrandId);
                product.setSubBrandVo(subBrandVo);
            }
            TaxVo tax = new TaxVo();
            tax.setTaxId(Long.parseLong(taxId));
            product.setTaxVo(tax);
            product.setPurchaseTaxVo(tax);

            UnitOfMeasurementVo unitOfMeasurementVo = new UnitOfMeasurementVo();
            unitOfMeasurementVo.setMeasurementId(Long.parseLong(uom));
            product.setUnitOfMeasurementVo(unitOfMeasurementVo);
            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            productVarientsVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
            productVarientsVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
            productVarientsVo.setMrp(Double.parseDouble(posMrp));
            product.setMrp(Double.parseDouble(posMrp));
            product.setSellingPrice(Double.parseDouble(posSellingPrice));
            if (StringUtils.isNotBlank(posSellingPrice)) {
            } else {
                posSellingPrice = "0";
            }
            productVarientsVo.setSellingPrice(Double.parseDouble(posSellingPrice));
            productVarientsVo.setLandingCost(Double.parseDouble(posLandingCost));
            productVarientsVo.setShopifyPrice(Double.parseDouble(posSellingPrice));
            productVarientsVo.setPurchasePrice(Double.parseDouble(posPurchasePrice));
            CompanySettingVo sellingmarginVo = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.REATILERMARGIN);
            try {
                if (sellingmarginVo != null && sellingmarginVo.getAddValue() != "0") {
                    productVarientsVo.setRetailerPrice(Double.parseDouble(new DecimalFormat("#.##").format(Double
                            .parseDouble(posPurchasePrice)
                            + (Double.parseDouble(posPurchasePrice) * Double.parseDouble(sellingmarginVo.getAddValue()))
                            / 100)));

                } else {
                    productVarientsVo.setRetailerPrice(Double.parseDouble(posSellingPrice));
                }
                // log.info("::::::::::::::::::::::::::::::::::::retailer"+productVarientsVo.getRetailerPrice());
            } catch (Exception e) {
                e.printStackTrace();
                productVarientsVo.setRetailerPrice(Double.parseDouble(posSellingPrice));
            }
            CompanySettingVo wholesalermarginvo = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.WHOLESALERMARGIN);
            try {
                if (wholesalermarginvo != null && wholesalermarginvo.getAddValue() != "0") {
                    productVarientsVo.setWholesalerPrice(Double.parseDouble(new DecimalFormat("#.##")
                            .format(Double.parseDouble(posPurchasePrice) + (Double.parseDouble(posPurchasePrice)
                                    * Double.parseDouble(wholesalermarginvo.getAddValue())) / 100)));
                } else {
                    productVarientsVo.setWholesalerPrice(Double.parseDouble(posSellingPrice));
                }
                // log.info("::::::::::::::::::::::::::::::::::::wholseller"+productVarientsVo.getWholesalerPrice());
            } catch (Exception e) {
                e.printStackTrace();
                productVarientsVo.setWholesalerPrice(Double.parseDouble(posSellingPrice));
            }

            // productVarientsVo.setRetailerPrice(Double.parseDouble(posSellingPrice));
            productVarientsVo.setItemCode(itemCode);
            product.setItemCode(itemCode);
            productVarientsVo.setWeight(0);
            productVarientsVo.setCompareAtPrice(0);
            productVarientsVo.setOtherPrice(0);

            productVarientsVo.setOtherMargin(0);
            productVarientsVo.setShopifyMargin(0);
            productVarientsVo.setWholesalerMargin(0);
            productVarientsVo.setSequenceNo(0);
            productVarientsVo.setShopifyVariantSourceId(0);
            productVarientsVo.setDiscountType(posDiscountType);
            productVarientsVo.setDiscount(Double.parseDouble(posDiscount));
            productVarientsVo.setProductVo(product);
            productVarientsVo.setRetailerMarginType("amount");
            productVarientsVo.setRetailerMargin(
                    round(productVarientsVo.getSellingPrice() - productVarientsVo.getLandingCost(), 2));
            productVarientVoList.add(productVarientsVo);

            product.setProductVarientsVos(productVarientVoList);

            try {
                product.setItemCode(product.getProductVarientsVos().get(0).getItemCode());
                itemcodeSeries = product.getProductVarientsVos().get(0).getItemCode();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                product.setSellingPrice(product.getProductVarientsVos().get(0).getSellingPrice());
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                product.setMrp(product.getProductVarientsVos().get(0).getMrp());
            } catch (Exception e) {
                e.printStackTrace();
            }

            ProductVo productVo = productService.insertProduct(product);

            try {
                for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
                    String item_code = productVo.getProductVarientsVos().get(i).getItemCode();
                    long productVarientId = productVo.getProductVarientsVos().get(i).getProductVarientId();
                    long companyId = Long.parseLong(session.getAttribute("companyId").toString());
                    List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                            .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(productVarientId, companyId, 0,
                                    1);
                    //// log.warning("productMultiBarcodeVos
                    //// size=====>"+productMultiBarcodeVos.size());
                    if (!productMultiBarcodeVos.isEmpty()) {
                        //// log.warning("======productMultiBarcodeVos is available=====");
                        ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
                        productMultiBarcodeVo.setItemCode(item_code);
                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                .saveAndFlush(productMultiBarcodeVo);
                    } else {
                        //// log.warning("======productMultiBarcodeVos is not available=====");
                        ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                        productMultiBarcodeVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        productMultiBarcodeVo
                                .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        productMultiBarcodeVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        productMultiBarcodeVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                        productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                        productMultiBarcodeVo.setProductVarientId(productVarientId);
                        productMultiBarcodeVo.setItemCode(item_code);
                        productMultiBarcodeVo.setIsDefault(1);
                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                .saveAndFlush(productMultiBarcodeVo);
                        //// log.warning("======productMultiBarcodeVo New Created=====");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            if (StringUtils.isNotEmpty(posQty) && !posQty.equals("0") && !posQty.equals("")) {

                try {
                    log.info("adding stock of opening stock");
                    List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();
                    StockTransactionVo stockTransactionVo = new StockTransactionVo();

                    stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                    stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                    stockTransactionVo.setDescription("Opening Stock");
                    stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                    stockTransactionVo.setInQuantity(Double.parseDouble(posQty));

                    stockTransactionVo.setProductPrice(productVo.getProductVarientsVos().get(0).getPurchasePrice());

                    double landingcost = productVo.getProductVarientsVos().get(0).getLandingCost();
                    double sellingPrice = productVo.getProductVarientsVos().get(0).getSellingPrice();
//                if(productVo !=null){
//                    //System.err.println("product available");
//                    if(productVo.getPurchaseTaxIncluded()==1){
//                        landingcost=productVo.getProductVarientsVos().get(0).getPurchasePrice();
//                        ////System.err.println("landing cost tax includeing"+landingcost);
//                    }else{
//                        TaxVo taxVo = taxService.findByTaxId(productVo.getPurchaseTaxVo().getTaxId());
//                        landingcost= productVo.getProductVarientsVos().get(0).getPurchasePrice()+(productVo.getProductVarientsVos().get(0).getPurchasePrice()*taxVo.getTaxRate()/100);
//                        ////System.err.println("landing cost tax exclusive"+landingcost);
//                    }
//                }
//                if(productVo!=null){
//                    if(productVo.getProductVarientsVos().get(0).getDiscountType().equals("percentage")){
//                        sellingPrice= product.getProductVarientsVos().get(0).getMrp()-(product.getProductVarientsVos().get(0).getMrp()*productVo.getProductVarientsVos().get(0).getDiscount()/100);
//                        ////System.err.println("selling price discount in persantage"+sellingPrice);
//                    }else{
//                        sellingPrice=product.getProductVarientsVos().get(0).getMrp()- productVo.getProductVarientsVos().get(0).getDiscount();
//                        ////System.err.println("selling price discount in amount"+sellingPrice);
//                    }
//                }

                    stockTransactionVo.setBatchNo("B" + productVo.getProductVarientsVos().get(0).getProductVarientId()
                            + new DecimalFormat("#.###").format(landingcost)
                            + new DecimalFormat("#.###").format(productVo.getProductVarientsVos().get(0).getMrp()));
                    stockTransactionVo.setMrp(productVo.getProductVarientsVos().get(0).getMrp());
                    stockTransactionVo.setLandingCost(landingcost);
                    stockTransactionVo.setSellingPrice(sellingPrice);

                    if (product.getIsExpiryManage() == 1) {
                        stockTransactionVo.setExpirationManage(1);
                        Calendar c = Calendar.getInstance();
                        stockTransactionVo.setManufactureDate(c.getTime());
                        c.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays())); // Adding days
                        stockTransactionVo.setExpirationDate(c.getTime());

                        Date dob = new SimpleDateFormat("dd-MM-yyyy").parse(expDate);

                        c.setTime(dob);

                        String cellValue = expDate;
                        SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                        String strDate = "";
                        stockTransactionVo.setExpirationManage(1);
                        if (product.getExpDateType().equalsIgnoreCase("MFG")) {
                            stockTransactionVo.setManufactureDate(c.getTime());
                            c.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays()));
                            stockTransactionVo.setExpirationDate(c.getTime());
                            strDate = formatter.format(c.getTime());
                        } else {
                            stockTransactionVo.setExpirationDate(c.getTime());
                            strDate = formatter.format(c.getTime());
                            c.add(Calendar.DATE, -Integer.parseInt(productVo.getExpirationdays()));
                            stockTransactionVo.setManufactureDate(c.getTime());
                        }
                        log.warning("strDate >> : " + strDate);

                        log.warning("Batch Before  >> : " + stockTransactionVo.getBatchNo());
                        stockTransactionVo.setBatchNo(stockTransactionVo.getBatchNo() + strDate);
                        log.warning("Batch After  >> : " + stockTransactionVo.getBatchNo());

                    }

                    stockTransactionVo.setProductVarientsVo(productVo.getProductVarientsVos().get(0));

                    DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");

                    try {
                        stockTransactionVo.setStockTransactionDate(
                                dateFormat3.parse(session.getAttribute("firstDateFinancialYear").toString()));
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }

                    stockTransactionVo.setType("new");
                    stockTransactionVo.setTypeId(productVo.getProductVarientsVos().get(0).getProductVarientId());
                    stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());

                    if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                        stockTransactionVos.add(stockTransactionVo);
                    }

                    stockTransactionService.saveOpeningStock(stockTransactionVos);

                    try {
                        wooService.updateProductStockInWooCommerce(stockTransactionVos);
                        shopifyService.updateStockInShopify(stockTransactionVos, session);

                    } catch (Exception e) {
                        e.printStackTrace();
                        // TODO: handle exception
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    // System.err.println("error at saving opening stock");
                    // TODO: handle exception
                }
            } else {
                try {
                    List<StockMasterVo> masterVos = new ArrayList<StockMasterVo>();
//
//  				   stockTransactionService.saveOpeningStock(stockTransactionVos);
                    List<Long> branchIdList = userRepository
                            .getbranchList(Long.parseLong(session.getAttribute("companyId").toString()));
                    for (int i = 0; i < branchIdList.size(); i++) {
                        StockMasterVo stockMasterVo = new StockMasterVo();
                        stockMasterVo.setBatchNo("B" + productVarientsVo.getProductVarientId()
                                + new DecimalFormat("#.###").format(productVarientsVo.getLandingCost()));
                        stockMasterVo.setBranchId(Long.parseLong("" + branchIdList.get(i)));
                        stockMasterVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        stockMasterVo.setCreatedOn(new Date());
                        stockMasterVo.setExpirationDays(0);
                        stockMasterVo.setIsDisable(0);
                        stockMasterVo.setLandingCost(productVarientsVo.getLandingCost());
                        stockMasterVo.setModified_on(new Date());
                        stockMasterVo.setMrp(productVarientsVo.getMrp());
                        stockMasterVo.setProductVarientsVo(productVarientsVo);
                        stockMasterVo.setPurchasePrice(productVarientsVo.getPurchasePrice());
                        stockMasterVo.setQuantity(0);
                        stockMasterVo.setSellingPrice(productVarientsVo.getSellingPrice());
                        stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString());
                        if (productVo.getIsExpiryManage() == 1) {
                            Calendar c = Calendar.getInstance();

                            Date dob = new SimpleDateFormat("dd-MM-yyyy").parse(expDate);

                            c.setTime(dob);

                            String cellValue = expDate;
                            SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                            String strDate = "";
                            if (cellValue.equalsIgnoreCase("MFG")) {
                                stockMasterVo.setManufactureDate(c.getTime());
                                c.add(Calendar.DATE, Integer.parseInt(product.getExpirationdays()));
                                stockMasterVo.setExpirationDate(c.getTime());
                                strDate = formatter.format(c.getTime());
                            } else {
                                stockMasterVo.setExpirationDate(c.getTime());
                                strDate = formatter.format(c.getTime());
                                c.add(Calendar.DATE, -Integer.parseInt(product.getExpirationdays()));
                                stockMasterVo.setManufactureDate(c.getTime());
                            }
                            log.warning("strDate >> : " + strDate);

                            log.warning("Batch Before  >> : " + stockMasterVo.getBatchNo());
                            stockMasterVo.setBatchNo(stockMasterVo.getBatchNo() + strDate);
                            log.warning("Batch After  >> : " + stockMasterVo.getBatchNo());
                        }
                        masterVos.add(stockMasterVo);
                    }
                    stockMasterService.saveAll(masterVos);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            try {
                Greeting greeting = new Greeting();
                try {

                    // log.info("Path is:" + request.getServletContext().getRealPath("/"));
                    File directory = new File(request.getServletContext().getRealPath("/") + "json");
                    if (!directory.exists()) {
                        directory.mkdir();
                        // If you require it to make the entire directory path including parents,
                        // use directory.mkdirs(); here instead.
                    }
                    String filepath = request.getServletContext().getRealPath("/") + "json"
                            + System.getProperty("file.separator") + "product"
                            + Long.parseLong(session.getAttribute("companyId").toString()) + ".json";
                    try {
                        File file = new File(filepath);
                        FileChannel fileChannel = new FileOutputStream(file, true).getChannel();
                        fileChannel.truncate(fileChannel.size() - 1); // Removes last character
                        fileChannel.close();
                    } catch (Exception e) {
                        // TODO: handle exception
                    }
                    try (FileWriter file = new FileWriter(filepath, true)) {
                        // File Writer creates a file in write mode at the given location

                        ObjectMapper Obj = new ObjectMapper();
                        file.toString();
                        file.write("," + Obj.writeValueAsString(new DTOProductVoFORPOSJSON(
                                productVo.getProductVarientsVos().get(0).getProductVarientId(), productVo.getName()))
                                + "]");

                        // write function is use to write in file,
                        // here we write the Json object in the file
                        file.flush();

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
// 	    	   messagingTemplate.convertAndSendToUser(session.getAttribute("branchId").toString(),"/queue/productnewadd", greeting);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } catch (Exception e) {
                // TODO: handle exception
            }
            try {
//        	 if (Long.parseLong(session.getAttribute("companyId").toString()) == 202) {
//             	if(StringUtils.contains(itemcodeSeries, "A")) {
// 	            	itemcodeSeries = StringUtils.remove(itemcodeSeries, 'A');
// 	                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
// 	                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
// 	                barcodeSeries.setAddValue(itemcodeSeries);
// 	                companySettingService.saveCompanySetting(barcodeSeries);
//             	}
//             }
//             if (Long.parseLong(session.getAttribute("companyId").toString()) == 415) {
//             	if(StringUtils.contains(itemcodeSeries, "A")) {
// 	            	itemcodeSeries = StringUtils.remove(itemcodeSeries, 'A');
// 	                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
// 	                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
// 	                barcodeSeries.setAddValue(itemcodeSeries);
// 	                companySettingService.saveCompanySetting(barcodeSeries);
//             	}
//             }
//
//             if (Long.parseLong(session.getAttribute("companyId").toString()) == 436) {
//             	if(StringUtils.contains(itemcodeSeries, "Z")) {
// 	            	itemcodeSeries = itemcodeSeries.replace("Z", "");
// 	                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
// 	                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
// 	                barcodeSeries.setAddValue(itemcodeSeries);
// 	                companySettingService.saveCompanySetting(barcodeSeries);
// 	                log.info("HEEEEEEEEEEEEEEEEEEERRRUVVVVVVVVVVVVVVVVVVVV");
//             	}
//             }
                CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Constant.BARCODEGENRATESERIESWISE);
                if (barcodegenrateserieswise != null) {
                    if (barcodegenrateserieswise.getValue() == 1) {
                        CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEMANAGE);
                        if (barcodemanage != null && barcodemanage.getValue() == 2) {
                            try {
                                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODESERIES);
                                CompanySettingVo barcodeprefix = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODEPREFIX);
                                if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
                                    itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
                                    barcodeSeries.setAddValue(itemcodeSeries);
                                    companySettingService.saveCompanySetting(barcodeSeries);
                                }
                            } catch (Exception e) {
                                // TODO: handle exception
                            }

                        } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                            try {
                                CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODESERIES);
                                CompanySettingVo barcodeprefix = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODEPREFIX);

                                if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
                                    itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
                                    barcodeSeries.setAddValue(itemcodeSeries);
                                    companySettingService.saveCompanySetting(barcodeSeries);
                                }
                            } catch (Exception e) {
                                // TODO: handle exception
                            }

                        }
                    }
                }
            } catch (Exception e) {
                // TODO: handle exception
            }
            try {
                if (Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 0
                        || Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 1) {
                    typesenseService.createSingleProductInTypesense(productVo.getProductId(), productVo.getCompanyId());
                }
            } catch (Exception e) {
                // TODO: handle exception
                e.printStackTrace();
            }
            return new ApiResponse(true, "success", productVo.getProductVarientsVos().get(0).getProductVarientId());
            // //System.err.println("product varient id is:" +
            // productVo.getProductVarientsVos().get(0).getProductVarientId());
        } else {
            return new ApiResponse(false, "You have No Rights To Add Product", null);
        }

    }

    @ResponseBody
    @RequestMapping(value = "/createproductforopeningstock", method = RequestMethod.POST)
    public long insertProductForopeningstock(HttpSession session, @RequestParam("itemCode") String itemCode,
                                             @RequestParam("posName") String posName, @RequestParam("taxId") String taxId,
                                             @RequestParam("posMrp") String posMrp, @RequestParam("posQty") String posQty,
                                             @RequestParam("uom") String uom, @RequestParam("pospurchaseprice") String pospurchaseprice) {
//        //System.err.println("itemCode is:" + itemCode);
//        //System.err.println("posName is:" + posName);
//        //System.err.println("taxId is:" + taxId);
//        //System.err.println("posMrp is:" + posMrp);
//        //System.err.println("posQty is:" + posQty);

        ProductVo product = new ProductVo();
        List<ProductVarientsVo> productVarientVoList = new ArrayList<>();

        product.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
        product.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
        product.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
        product.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
        product.setModifiedOn(CurrentDateTime.getCurrentDate());
        product.setCreatedOn(CurrentDateTime.getCurrentDate());
        product.setName(posName);
        product.setDisplayName(posName);
        product.setTaxIncluded(1);
        product.setPurchaseTaxIncluded(0);
        // product.setDiscountType("amount");
        // product.setDiscount(0);
        product.setHaveVariation(0);

        TaxVo tax = new TaxVo();
        tax.setTaxId(Long.parseLong(taxId));
        product.setTaxVo(tax);
        product.setPurchaseTaxVo(tax);

        UnitOfMeasurementVo unitOfMeasurementVo = new UnitOfMeasurementVo();
        unitOfMeasurementVo.setMeasurementId(Long.parseLong(uom));
        product.setUnitOfMeasurementVo(unitOfMeasurementVo);

//	List<UnitOfMeasurementVo> unitOfMeasurementVoslist = unitOfMeasurementService
//			.findByCompanyIdAndIsDefaultAndIsDeleted(Long.parseLong(session.getAttribute("companyId").toString()),
//					1, 0);
//	if (unitOfMeasurementVoslist.isEmpty()) {
//		UnitOfMeasurementVo uom = unitOfMeasurementService.FindByMeasurementCodeAndCompnayId("pcs",
//				Long.parseLong(session.getAttribute("companyId").toString()));
//		if (uom != null) {
//			product.setUnitOfMeasurementVo(uom);
//		} else {
//			UnitOfMeasurementVo unitOfMeasurementVo = new UnitOfMeasurementVo();
//			unitOfMeasurementVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
//			unitOfMeasurementVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
//			unitOfMeasurementVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
//			unitOfMeasurementVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
//			unitOfMeasurementVo.setMeasurementName("pcs");
//			unitOfMeasurementVo.setMeasurementCode("pcs");
//			unitOfMeasurementVo.setNoOfDecimalPlaces(0);
//
//			unitOfMeasurementService.save(unitOfMeasurementVo);
//			product.setUnitOfMeasurementVo(unitOfMeasurementVo);
//		}
//
//	} else {
//		product.setUnitOfMeasurementVo(unitOfMeasurementVoslist.get(0));
//	}

        List<CategoryVo> categoryVolist = categoryService.findByCompanyIdAndIsDefaultAndIsDeleted(
                Long.parseLong(session.getAttribute("companyId").toString()), 1, 0);
        if (categoryVolist.isEmpty()) {
            CategoryVo cvo = categoryService.findByCategoryNameAndCompanyId("other",
                    Long.parseLong(session.getAttribute("companyId").toString()));
            if (cvo != null) {
                product.setCategoryVo(cvo);
            } else {
                CategoryVo categoryVo = new CategoryVo();
                categoryVo.setCategoryName("other");
                categoryVo.setCategoryDescription("");
                categoryVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                categoryVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                categoryVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                categoryVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                DepartmentVo departmentVo = new DepartmentVo();
                DepartmentVo dvo = departmentService.findbyDepartmentNameAndCompanyId("other",
                        Long.parseLong(session.getAttribute("companyId").toString()));
                if (dvo != null) {
                    categoryVo.setDepartmentVo(departmentVo);
                } else {
                    departmentVo = new DepartmentVo();
                    departmentVo.setDepartmentName("other");
                    departmentVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                    departmentVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                    departmentVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                    departmentVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                    departmentVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                    departmentVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                    departmentService.save(departmentVo);
                    categoryVo.setDepartmentVo(departmentVo);
                }
                categoryService.save(categoryVo);
                product.setCategoryVo(categoryVo);
            }

        } else {
            product.setCategoryVo(categoryVolist.get(0));
        }

        List<BrandVo> brandVolist = brandService.findByCompanyIdAndIsDefaultAndIsDeleted(
                Long.parseLong(session.getAttribute("companyId").toString()), 1, 0);
        if (brandVolist.isEmpty()) {
            BrandVo bvo = brandService.findByBrandnameAndCompanyId("other",
                    Long.parseLong(session.getAttribute("companyId").toString()));
            if (bvo != null) {
                product.setBrandVo(bvo);
            } else {

                BrandVo brandVo = new BrandVo();
                brandVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                brandVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                brandVo.setBrandName("other");
                brandVo.setBrandDescription("");
                brandVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                brandVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                brandService.save(brandVo);
                product.setBrandVo(brandVo);
            }
        } else {
            product.setBrandVo(brandVolist.get(0));
        }

        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
        productVarientsVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
        productVarientsVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
        productVarientsVo.setMrp(Double.parseDouble(posMrp));
        product.setMrp(Double.parseDouble(posMrp));
        product.setSellingPrice(Double.parseDouble(posMrp));
        productVarientsVo.setSellingPrice(Double.parseDouble(posMrp));
        productVarientsVo.setRetailerPrice(Double.parseDouble(posMrp));
        productVarientsVo.setItemCode(itemCode);
        product.setItemCode(itemCode);
        productVarientsVo.setWeight(0);
        productVarientsVo.setCompareAtPrice(0);
        productVarientsVo.setOtherPrice(0);
        productVarientsVo.setPurchasePrice(Double.parseDouble(pospurchaseprice));
        productVarientsVo.setShopifyPrice(0);
        productVarientsVo.setWholesalerPrice(0);
        productVarientsVo.setOtherMargin(0);
        productVarientsVo.setRetailerMargin(0);
        productVarientsVo.setShopifyMargin(0);
        productVarientsVo.setWholesalerMargin(0);
        productVarientsVo.setSequenceNo(0);
        productVarientsVo.setShopifyVariantSourceId(0);
        productVarientsVo.setProductVo(product);
        productVarientsVo.setDiscountType("amount");
        productVarientsVo.setDiscount(0);
        productVarientVoList.add(productVarientsVo);

        product.setProductVarientsVos(productVarientVoList);
        try {
            product.setItemCode(product.getProductVarientsVos().get(0).getItemCode());
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            product.setSellingPrice(product.getProductVarientsVos().get(0).getSellingPrice());
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            product.setMrp(product.getProductVarientsVos().get(0).getMrp());
        } catch (Exception e) {
            e.printStackTrace();
        }
        ProductVo productVo = productService.insertProduct(product);
        try {
            for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
                String item_code = productVo.getProductVarientsVos().get(i).getItemCode();
                long productVarientId = productVo.getProductVarientsVos().get(i).getProductVarientId();
                long companyId = Long.parseLong(session.getAttribute("companyId").toString());
                List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                        .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(productVarientId, companyId, 0, 1);
                //// log.warning("productMultiBarcodeVos
                //// size=====>"+productMultiBarcodeVos.size());
                if (!productMultiBarcodeVos.isEmpty()) {
                    //// log.warning("======productMultiBarcodeVos is available=====");
                    ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
                    productMultiBarcodeVo.setItemCode(item_code);
                    ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                            .saveAndFlush(productMultiBarcodeVo);
                } else {
                    //// log.warning("======productMultiBarcodeVos is not available=====");
                    ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                    productMultiBarcodeVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                    productMultiBarcodeVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                    productMultiBarcodeVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                    productMultiBarcodeVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                    productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                    productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                    productMultiBarcodeVo.setProductVarientId(productVarientId);
                    productMultiBarcodeVo.setItemCode(item_code);
                    productMultiBarcodeVo.setIsDefault(1);
                    ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                            .saveAndFlush(productMultiBarcodeVo);
                    //// log.warning("======productMultiBarcodeVo New Created=====");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (StringUtils.isNotEmpty(posQty) && !posQty.equals("0")) {

            try {
                log.info("adding stock of opening stock");
                List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();
                StockTransactionVo stockTransactionVo = new StockTransactionVo();

                stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                stockTransactionVo.setDescription("Opening Stock");
                stockTransactionVo.setInQuantity(Double.parseDouble(posQty));

                stockTransactionVo.setProductPrice(productVo.getProductVarientsVos().get(0).getPurchasePrice());

                double landingcost = 0.0;
                double sellingPrice = 0.0;
                if (productVo != null) {
                    // System.err.println("product available");
                    if (productVo.getPurchaseTaxIncluded() == 1) {
                        landingcost = productVo.getProductVarientsVos().get(0).getPurchasePrice();
                        //// System.err.println("landing cost tax includeing"+landingcost);
                    } else {
                        TaxVo taxVo = taxService.findByTaxId(productVo.getPurchaseTaxVo().getTaxId());
                        landingcost = productVo.getProductVarientsVos().get(0).getPurchasePrice()
                                + (productVo.getProductVarientsVos().get(0).getPurchasePrice() * taxVo.getTaxRate()
                                / 100);
                        //// System.err.println("landing cost tax exclusive"+landingcost);
                    }
                }
                if (productVo != null) {
                    if (productVo.getProductVarientsVos().get(0).getDiscountType().equals("percentage")) {
                        sellingPrice = product.getProductVarientsVos().get(0).getMrp()
                                - (product.getProductVarientsVos().get(0).getMrp()
                                * productVo.getProductVarientsVos().get(0).getDiscount() / 100);
                        // //System.err.println("selling price discount in persantage"+sellingPrice);
                    } else {
                        sellingPrice = product.getProductVarientsVos().get(0).getMrp()
                                - productVo.getProductVarientsVos().get(0).getDiscount();
                        // //System.err.println("selling price discount in amount"+sellingPrice);
                    }
                }

                stockTransactionVo.setBatchNo("B" + productVo.getProductVarientsVos().get(0).getProductVarientId()
                        + new DecimalFormat("#.###").format(landingcost)
                        + new DecimalFormat("#.###").format(productVo.getProductVarientsVos().get(0).getMrp()));
                stockTransactionVo.setMrp(productVo.getProductVarientsVos().get(0).getMrp());
                stockTransactionVo.setLandingCost(landingcost);
                stockTransactionVo.setSellingPrice(sellingPrice);

                stockTransactionVo.setProductVarientsVo(productVo.getProductVarientsVos().get(0));

                DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");

                try {
                    stockTransactionVo.setStockTransactionDate(
                            dateFormat3.parse(session.getAttribute("firstDateFinancialYear").toString()));
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                stockTransactionVo.setType("new");
                stockTransactionVo.setTypeId(productVo.getProductVarientsVos().get(0).getProductVarientId());
                stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());

                if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                    stockTransactionVos.add(stockTransactionVo);
                }

                stockTransactionService.saveOpeningStock(stockTransactionVos);
                try {
                    wooService.updateProductStockInWooCommerce(stockTransactionVos);
                    shopifyService.updateStockInShopify(stockTransactionVos, session);
                } catch (Exception e) {
                    e.printStackTrace();
                    // TODO: handle exception
                }
            } catch (Exception e) {
                e.printStackTrace();
                // System.err.println("error at saving opening stock");
                // TODO: handle exception
            }
        }
        //// System.err.println("product varient id is:" +
        //// productVo.getProductVarientsVos().get(0).getProductVarientId());

        try {
            if (Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 0
                    || Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 1) {
                typesenseService.createSingleProductInTypesense(productVo.getProductId(), productVo.getCompanyId());
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }

        return productVo.getProductVarientsVos().get(0).getProductVarientId();
    }

    @ResponseBody
    @RequestMapping(value = "/create/json", method = RequestMethod.POST)
    public List<Long> insertProductJSON(HttpSession session, @RequestBody ProductVo product)
            throws JsonParseException, JsonMappingException, IOException {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT) == 1
                || MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            product.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
            product.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
            product.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
            product.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
            product.setModifiedOn(CurrentDateTime.getCurrentDate());
            product.setCreatedOn(CurrentDateTime.getCurrentDate());

            TaxVo taxVo = new TaxVo();
            taxVo.setTaxId(product.getTaxId());
            product.setTaxVo(taxVo);

            TaxVo purchaseTaxVo = new TaxVo();
            purchaseTaxVo.setTaxId(product.getPurchaseTaxId());
            product.setPurchaseTaxVo(purchaseTaxVo);

            CategoryVo categoryVo = new CategoryVo();
            categoryVo.setCategoryId(product.getCategoryId());
            product.setCategoryVo(categoryVo);

            BrandVo brandVo = new BrandVo();
            brandVo.setBrandId(product.getBrandId());
            product.setBrandVo(brandVo);

            UnitOfMeasurementVo measurementVo = new UnitOfMeasurementVo();
            measurementVo.setMeasurementId(product.getMeasurementId());
            product.setUnitOfMeasurementVo(measurementVo);
            for (int i = 0; i < product.getProductVarientsVos().size(); i++) {
                ProductVarientsVo productVarientsVo2 = product.getProductVarientsVos().get(i);
                productVarientsVo2.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                productVarientsVo2.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                productVarientsVo2.setProductVo(product);
            }
            try {
                product.setMrp(product.getProductVarientsVos().get(0).getMrp());
                product.setSellingPrice(product.getProductVarientsVos().get(0).getSellingPrice());
                product.setItemCode(product.getProductVarientsVos().get(0).getItemCode());
            } catch (Exception e) {
                // TODO: handle exception
            }
            if (product.getHaveVariation() == 1) {
                for (int i = 0; i < product.getProductAttributeVos().size(); i++) {
                    ProductAttributeVo productAttributeVo = product.getProductAttributeVos().get(i);
                    productAttributeVo.setProductVo(product);
                }
            }
            String itemcodeSeries = "";
            for (int i = 0; i < product.getProductVarientsVos().size(); i++) {
                ProductVarientsVo productVarientsVo = product.getProductVarientsVos().get(i);
                productVarientsVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                productVarientsVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                productVarientsVo.setProductVo(product);
                itemcodeSeries = product.getProductVarientsVos().get(i).getItemCode();
            }
            ProductVo productVo = productService.insertProduct(product);
            try {
                for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
                    String item_code = productVo.getProductVarientsVos().get(i).getItemCode();
                    long productVarientId = productVo.getProductVarientsVos().get(i).getProductVarientId();
                    long companyId = Long.parseLong(session.getAttribute("companyId").toString());
                    List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                            .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(productVarientId, companyId, 0,
                                    1);
                    //// log.warning("productMultiBarcodeVos
                    //// size=====>"+productMultiBarcodeVos.size());
                    if (!productMultiBarcodeVos.isEmpty()) {
                        //// log.warning("======productMultiBarcodeVos is available=====");
                        ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
                        productMultiBarcodeVo.setItemCode(item_code);
                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                .saveAndFlush(productMultiBarcodeVo);
                    } else {
                        //// log.warning("======productMultiBarcodeVos is not available=====");
                        ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                        productMultiBarcodeVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        productMultiBarcodeVo
                                .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        productMultiBarcodeVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        productMultiBarcodeVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                        productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                        productMultiBarcodeVo.setProductVarientId(productVarientId);
                        productMultiBarcodeVo.setItemCode(item_code);
                        productMultiBarcodeVo.setIsDefault(1);
                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                .saveAndFlush(productMultiBarcodeVo);
                        //// log.warning("======productMultiBarcodeVo New Created=====");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEGENRATESERIESWISE);
            if (barcodegenrateserieswise != null) {
                if (barcodegenrateserieswise.getValue() == 1) {
                    CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                            Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEMANAGE);
                    if (barcodemanage != null && barcodemanage.getValue() == 2) {
                        try {
                            CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    Constant.BARCODESERIES);
                            CompanySettingVo barcodeprefix = companySettingService.findByCompanyIdAndType(
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    Constant.BARCODEPREFIX);
                            if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
                                itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
                                barcodeSeries.setAddValue(itemcodeSeries);
                                companySettingService.saveCompanySetting(barcodeSeries);
                            }
                        } catch (Exception e) {
                            // TODO: handle exception
                        }

                    } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                        try {
                            CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    Constant.BARCODESERIES);
                            CompanySettingVo barcodeprefix = companySettingService.findByBranchIdAndType(
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    Constant.BARCODEPREFIX);

                            if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
                                itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
                                barcodeSeries.setAddValue(itemcodeSeries);
                                companySettingService.saveCompanySetting(barcodeSeries);
                            }
                        } catch (Exception e) {
                            // TODO: handle exception
                        }

                    }
                }
            }
        }

        List<Long> productVarientIds = new ArrayList<Long>();
        for (ProductVarientsVo pv : product.getProductVarientsVos()) {
            productVarientIds.add(pv.getProductVarientId());
        }
        return productVarientIds;
    }

    @ResponseBody
    @RequestMapping(value = "/create/variant/json", method = RequestMethod.POST)
    public ApiResponse insertProductWithVariantJSON(HttpSession session,
                                                    @ModelAttribute ProductQuickDTO productQuickDTO)
            throws JsonParseException, JsonMappingException, IOException {
        List<Long> productVarientIds = new ArrayList<Long>();
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT) == 1
                || MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {

            List<ProductVarientsVo> productVarientVoList = new ArrayList<>();

            String itemCode = productQuickDTO.getItemCode();
            String expDays = productQuickDTO.getExpirationdays();
            String posName = productQuickDTO.getPosName();
            String taxId = productQuickDTO.getTaxId();
            String posMrp = productQuickDTO.getPosMrp();
            String posQty = productQuickDTO.getPosQty();
            String uom = productQuickDTO.getUom();
            String categoryId = productQuickDTO.getCategoryId();
            String subCategoryId = productQuickDTO.getSubCategoryId();
            String subBrandId = productQuickDTO.getSubBrandId();
            String posPurchasePrice = productQuickDTO.getPosPurchasePrice();
            String posHsnCode = productQuickDTO.getPosHsnCode();
            String brandId = productQuickDTO.getBrandId();
            String haveVariation = (StringUtils.isNotBlank(productQuickDTO.getHaveVariation()))
                    ? productQuickDTO.getHaveVariation()
                    : "0";
            String pospurchaseTaxIncluded = (StringUtils.isNotBlank(productQuickDTO.getPospurchaseTaxIncluded()))
                    ? productQuickDTO.getPospurchaseTaxIncluded()
                    : "0";
            String posTaxIncluded = (StringUtils.isNotBlank(productQuickDTO.getPosTaxIncluded()))
                    ? productQuickDTO.getPosTaxIncluded()
                    : "0";
            String posLandingCost = productQuickDTO.getPosLandingCost();
            String posSellingPrice = productQuickDTO.getPosSellingPrice();
            String posDiscount = productQuickDTO.getPosDiscount();
            String posDiscountType = productQuickDTO.getPosDiscountType();
            String posproducttypet = productQuickDTO.getProductType();
            String isExpiryManage = (StringUtils.isNotBlank(productQuickDTO.getIsExpiryManage()))
                    ? productQuickDTO.getIsExpiryManage()
                    : "0";
            String isBatchManage = (StringUtils.isNotBlank(productQuickDTO.getIsBatchManage()))
                    ? productQuickDTO.getIsBatchManage()
                    : "0";
            ;
            String expType = (StringUtils.isNotBlank(productQuickDTO.getExpDateType()))
                    ? productQuickDTO.getExpDateType()
                    : "";
            String isExpirySee = (StringUtils.isNotBlank(productQuickDTO.getIsExpirySee()))
                    ? productQuickDTO.getIsExpirySee()
                    : "";
            String date = (StringUtils.isNotBlank(productQuickDTO.getExpdate())) ? productQuickDTO.getExpdate() : "";
            if (Integer.parseInt(haveVariation) == 1) {
                // log.warning("variants
                // size--->"+productQuickDTO.getProductVarientsVos().size());
                // log.warning("option
                // size--->"+productQuickDTO.getProductAttributeVos().size());
                String itemcodeSeries = "";
                ProductVo productVo = new ProductVo();
                productVo.setHaveVariation(Integer.parseInt(haveVariation));
                productVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                productVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                productVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                productVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                productVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                productVo.setCreatedOn(CurrentDateTime.getCurrentDate());

                productVo.setName(posName);
                productVo.setDisplayName(posName);
                productVo.setProductType(posproducttypet);
                productVo.setTaxIncluded(Integer.parseInt(posTaxIncluded));
                productVo.setPurchaseTaxIncluded(Integer.parseInt(pospurchaseTaxIncluded));

                productVo.setIsExpiryManage(Integer.parseInt(isExpiryManage));
                productVo.setIsBatchManage(Integer.parseInt(isBatchManage));

                if (productVo.getIsExpiryManage() == 1) {
                    if (StringUtils.isNotBlank(expDays)) {
                        productVo.setExpirationdays(expDays);
                        if (StringUtils.isNotBlank(isExpirySee)) {
                            productVo.setIsExpirySee(Integer.parseInt(isExpirySee));
                        } else {
                            productVo.setIsExpirySee(0);
                        }
                        productVo.setExpDateType(expType);
                    } else {
                        productVo.setExpirationdays("1");
                    }
                }

                try {
                    productVo.setHsnCode(posHsnCode);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                TaxVo taxVo = new TaxVo();
                taxVo.setTaxId(Long.parseLong(taxId));
                productVo.setTaxVo(taxVo);
                productVo.setPurchaseTaxVo(taxVo);

                CategoryVo categoryVo = new CategoryVo();
                categoryVo.setCategoryId(Long.parseLong(categoryId));
                productVo.setCategoryVo(categoryVo);

                BrandVo brandVo = new BrandVo();
                brandVo.setBrandId(Long.parseLong(brandId));
                productVo.setBrandVo(brandVo);

                if (StringUtils.isNotEmpty(subCategoryId) && !subCategoryId.equals("0") && !subCategoryId.equals("")) {
                    CategoryVo subCategoryVo = new CategoryVo();
                    subCategoryVo.setCategoryId(Long.parseLong(subCategoryId));
                    productVo.setSubCategoryVo(subCategoryVo);
                }
                if (StringUtils.isNotEmpty(subBrandId) && !subBrandId.equals("0") && !subBrandId.equals("")) {
                    BrandVo subBrandVo = new BrandVo();
                    subBrandVo.setBrandId(Long.parseLong(subBrandId));
                    productVo.setSubBrandVo(subBrandVo);
                }

                UnitOfMeasurementVo unitOfMeasurementVo = new UnitOfMeasurementVo();
                unitOfMeasurementVo.setMeasurementId(Long.parseLong(uom));
                productVo.setUnitOfMeasurementVo(unitOfMeasurementVo);

                List<Long> productVarientWithBatchList = new ArrayList<>();

                if (productQuickDTO.getProductVarientsVos() != null) {
                    productQuickDTO.getProductVarientsVos().removeIf(rm -> StringUtils.isBlank(rm.getItemCode()));
                }

                if (productQuickDTO.getProductAttributeVos() != null) {
                    productQuickDTO.getProductAttributeVos().removeIf(rm -> StringUtils.isBlank(rm.getOptionName()));
                }
                // log.warning("After variants
                // size--->"+productQuickDTO.getProductVarientsVos().size());
                for (int i = 0; i < productQuickDTO.getProductVarientsVos().size(); i++) {
                    ProductQuickVarientDTO varientDTO = productQuickDTO.getProductVarientsVos().get(i);
                    ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                    // log.warning("productVarientId----->"+productVarientsVo.getProductVarientId());

                    productVarientsVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                    productVarientsVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                    productVarientsVo.setProductVo(productVo);
                    productVarientsVo.setVarientName(varientDTO.getVarientName());
                    productVarientsVo.setAttributeValue1(varientDTO.getAttributeValue1());
                    productVarientsVo.setAttributeValue2(varientDTO.getAttributeValue2());
                    productVarientsVo.setAttributeValue3(varientDTO.getAttributeValue3());
                    productVarientsVo.setAttributeName1(varientDTO.getAttributeName1());
                    productVarientsVo.setAttributeName2(varientDTO.getAttributeName2());
                    productVarientsVo.setAttributeName3(varientDTO.getAttributeName3());
                    productVarientsVo.setItemCode(varientDTO.getItemCode());
                    productVarientsVo.setExpdate(varientDTO.getExpdate());
                    productVarientsVo.setMrp(Double.parseDouble(varientDTO.getMrp()));
                    productVarientsVo.setPurchasePrice(Double.parseDouble(varientDTO.getPurchasePrice()));
                    productVarientsVo.setLandingCost(Double.parseDouble(varientDTO.getLandingCost()));
                    productVarientsVo.setSellingPrice(Double.parseDouble(varientDTO.getSellingPrice()));
                    productVarientsVo.setOtherPrice(Double.parseDouble(varientDTO.getSellingPrice()));
                    productVarientsVo.setShopifyPrice(Double.parseDouble(varientDTO.getSellingPrice()));

                    productVarientsVo.setDiscountType(varientDTO.getDiscountType());
                    productVarientsVo.setDiscount(Double.parseDouble(varientDTO.getDiscount()));

                    productVarientsVo.setRetailerMargin(Double.parseDouble(varientDTO.getRetailerMargin()));
                    productVarientsVo.setRetailerMarginType(varientDTO.getRetailerMarginType());

                    productVarientsVo.setWholesalerMarginType("amount");
                    productVarientsVo.setNewretailerMarginType("amount");
                    productVarientsVo.setNewretailerdiscountType("amount");

                    productVarientsVo
                            .setNewretailerdiscount(productVarientsVo.getMrp() - productVarientsVo.getLandingCost());
                    productVarientsVo
                            .setWholesalerdiscount(productVarientsVo.getMrp() - productVarientsVo.getLandingCost());

                    productVarientsVo.setRetailerPrice(Double.parseDouble(varientDTO.getLandingCost()));
                    productVarientsVo.setWholesalerPrice(Double.parseDouble(varientDTO.getLandingCost()));
//                    CompanySettingVo sellingmarginVo=companySettingService.findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()), Constant.REATILERMARGIN);
//                    try {
//                    	if(sellingmarginVo!=null && sellingmarginVo.getAddValue()!="0") {
//                    		productVarientsVo.setRetailerPrice(Double.parseDouble(new DecimalFormat("#.##").format(productVarientsVo.getPurchasePrice() +(productVarientsVo.getPurchasePrice()*Double.parseDouble(sellingmarginVo.getAddValue()))/100)));
//                        }else {
//                        	productVarientsVo.setRetailerPrice(productVarientsVo.getSellingPrice());
//                        }
//            		} catch (Exception e) {
//            			e.printStackTrace();
//            			productVarientsVo.setRetailerPrice(productVarientsVo.getSellingPrice());
//            		}
//                    CompanySettingVo wholesalermarginvo=companySettingService.findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()), Constant.WHOLESALERMARGIN);
//                    try {
//                    	if(wholesalermarginvo!=null && wholesalermarginvo.getAddValue()!="0") {
//                    		productVarientsVo.setWholesalerPrice(Double.parseDouble(new DecimalFormat("#.##").format(productVarientsVo.getPurchasePrice()+(productVarientsVo.getPurchasePrice()*Double.parseDouble(wholesalermarginvo.getAddValue()))/100)));
//                        }else {
//                        	productVarientsVo.setWholesalerPrice(productVarientsVo.getSellingPrice());
//                        }
//                    	//log.info("::::::::::::::::::::::::::::::::::::wholseller"+productVarientsVo.getWholesalerPrice());
//            		} catch (Exception e) {
//            			e.printStackTrace();
//            			 productVarientsVo.setWholesalerPrice(productVarientsVo.getSellingPrice());
//            		}

                    productVo.setItemCode(productVarientsVo.getItemCode());
                    productVarientsVo.setWeight(0);
                    productVarientsVo.setCompareAtPrice(0);

                    productVarientsVo.setOtherMargin(0);
                    productVarientsVo.setShopifyMargin(0);
                    productVarientsVo.setWholesalerMargin(0);
                    productVarientsVo.setSequenceNo(0);
                    productVarientsVo.setShopifyVariantSourceId(0);
                    productVarientVoList.add(productVarientsVo);

                    itemcodeSeries = productQuickDTO.getProductVarientsVos().get(i).getItemCode();
                }
                productVo.setProductVarientsVos(productVarientVoList);

                try {
                    productVo.setMrp(productVo.getProductVarientsVos().get(0).getMrp());
                    productVo.setSellingPrice(productVo.getProductVarientsVos().get(0).getSellingPrice());
                    productVo.setItemCode(productVo.getProductVarientsVos().get(0).getItemCode());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (productVo.getHaveVariation() == 1) {
                    for (int i = 0; i < productQuickDTO.getProductAttributeVos().size(); i++) {
                        ProductAttributeVo productAttributeVo = new ProductAttributeVo();
                        ProductQuickAttributeDTO attributeDTO = productQuickDTO.getProductAttributeVos().get(i);
                        productAttributeVo.setOptionName(attributeDTO.getOptionName());
                        productAttributeVo.setPosition(attributeDTO.getPosition());
                        productAttributeVo.setOptionValues(attributeDTO.getOptionValues());
                        productAttributeVo.setProductVo(productVo);
                    }
                }

                ProductVo productVo2 = productService.insertProduct(productVo);
                try {
                    for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
                        String item_code = productVo.getProductVarientsVos().get(i).getItemCode();
                        long productVarientId = productVo.getProductVarientsVos().get(i).getProductVarientId();
                        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
                        List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                                .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(productVarientId, companyId,
                                        0, 1);
                        //// log.warning("productMultiBarcodeVos
                        //// size=====>"+productMultiBarcodeVos.size());
                        if (!productMultiBarcodeVos.isEmpty()) {
                            //// log.warning("======productMultiBarcodeVos is available=====");
                            ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
                            productMultiBarcodeVo.setItemCode(item_code);
                            ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                    .saveAndFlush(productMultiBarcodeVo);
                        } else {
                            //// log.warning("======productMultiBarcodeVos is not available=====");
                            ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                            productMultiBarcodeVo
                                    .setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            productMultiBarcodeVo
                                    .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            productMultiBarcodeVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                            productMultiBarcodeVo
                                    .setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                            productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                            productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                            productMultiBarcodeVo.setProductVarientId(productVarientId);
                            productMultiBarcodeVo.setItemCode(item_code);
                            productMultiBarcodeVo.setIsDefault(1);
                            ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                    .saveAndFlush(productMultiBarcodeVo);
                            //// log.warning("======productMultiBarcodeVo New Created=====");
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (StringUtils.isNotEmpty(posQty) && !posQty.equals("0") && !posQty.equals("")) {
                    for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
                        try {
                            log.info("adding stock of opening stock");
                            List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();
                            StockTransactionVo stockTransactionVo = new StockTransactionVo();

                            stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            stockTransactionVo
                                    .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            stockTransactionVo.setDescription("Opening Stock");
                            stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                            stockTransactionVo.setInQuantity(Double.parseDouble(posQty));

                            stockTransactionVo
                                    .setProductPrice(productVo.getProductVarientsVos().get(i).getPurchasePrice());

                            double landingcost = productVo.getProductVarientsVos().get(i).getLandingCost();
                            double sellingPrice = productVo.getProductVarientsVos().get(i).getSellingPrice();
                            stockTransactionVo.setBatchNo("B"
                                    + productVo.getProductVarientsVos().get(i).getProductVarientId()
                                    + new DecimalFormat("#.###").format(landingcost) + new DecimalFormat("#.###")
                                    .format(productVo.getProductVarientsVos().get(i).getMrp()));
                            stockTransactionVo.setMrp(productVo.getProductVarientsVos().get(i).getMrp());
                            stockTransactionVo.setLandingCost(landingcost);
                            stockTransactionVo.setSellingPrice(sellingPrice);

                            stockTransactionVo.setProductVarientsVo(productVo.getProductVarientsVos().get(i));

                            DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");

                            try {
                                stockTransactionVo.setStockTransactionDate(
                                        dateFormat3.parse(session.getAttribute("firstDateFinancialYear").toString()));
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }

                            stockTransactionVo.setType("new");
                            stockTransactionVo
                                    .setTypeId(productVo.getProductVarientsVos().get(i).getProductVarientId());
                            stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());
                            if (productVo.getIsExpiryManage() == 1) {
                                stockTransactionVo.setExpirationManage(1);
                                Calendar c = Calendar.getInstance();
                                String dateString = date;
                                SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                                Date date1 = format.parse(dateString);
                                c.setTime(date1);
                                SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                                String strDate = "";
                                if (productVo.getExpDateType().equalsIgnoreCase("MFG")) {
                                    stockTransactionVo.setManufactureDate(c.getTime());
                                    c.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays())); // Adding
                                    // days
                                    stockTransactionVo.setExpirationDate(c.getTime());
                                    strDate = formatter.format(c.getTime());
                                } else {
                                    stockTransactionVo.setExpirationDate(c.getTime());
                                    strDate = formatter.format(c.getTime());
                                    c.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays()) * -1); // Adding
                                    // days
                                    stockTransactionVo.setManufactureDate(c.getTime());
                                }
                                log.warning("strDate >> : " + strDate);

                                log.warning("Batch Before  >> : " + stockTransactionVo.getBatchNo());
                                stockTransactionVo.setBatchNo(stockTransactionVo.getBatchNo() + strDate);
                                log.warning("Batch After  >> : " + stockTransactionVo.getBatchNo());
                            }

                            if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                                stockTransactionVos.add(stockTransactionVo);
                            }

                            stockTransactionService.saveOpeningStock(stockTransactionVos);

                            try {
                                wooService.updateProductStockInWooCommerce(stockTransactionVos);
                                shopifyService.updateStockInShopify(stockTransactionVos, session);
                            } catch (Exception e) {
                                e.printStackTrace();
                                // TODO: handle exception
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            // System.err.println("error at saving opening stock");
                            // TODO: handle exception
                        }
                    }
                } else {
                    try {
                        List<StockMasterVo> masterVos = new ArrayList<StockMasterVo>();
                        for (int i = 0; i < productVo2.getProductVarientsVos().size(); i++) {
                            List<Long> branchIdList = userRepository
                                    .getbranchList(Long.parseLong(session.getAttribute("companyId").toString()));
                            for (int j = 0; j < branchIdList.size(); j++) {
                                StockMasterVo stockMasterVo = new StockMasterVo();
                                stockMasterVo.setBatchNo(
                                        "B" + productVo2.getProductVarientsVos().get(i).getProductVarientId()
                                                + new DecimalFormat("#.###").format(
                                                productVo2.getProductVarientsVos().get(i).getLandingCost()));
                                stockMasterVo.setBranchId(Long.parseLong("" + branchIdList.get(j)));
                                stockMasterVo
                                        .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                stockMasterVo.setCreatedOn(new Date());
                                stockMasterVo.setExpirationDays(0);
                                stockMasterVo.setIsDisable(0);
                                stockMasterVo
                                        .setLandingCost(productVo2.getProductVarientsVos().get(i).getLandingCost());
                                stockMasterVo.setModified_on(new Date());
                                stockMasterVo.setMrp(productVo2.getProductVarientsVos().get(i).getMrp());
                                stockMasterVo.setProductVarientsVo(productVo2.getProductVarientsVos().get(i));
                                stockMasterVo
                                        .setPurchasePrice(productVo2.getProductVarientsVos().get(i).getPurchasePrice());
                                stockMasterVo.setQuantity(0);
                                stockMasterVo
                                        .setSellingPrice(productVo2.getProductVarientsVos().get(i).getSellingPrice());
                                stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString());
                                if (productVo2.getIsExpiryManage() == 1) {

                                    Calendar c = Calendar.getInstance();
                                    String dateString = productVo2.getProductVarientsVos().get(i).getExpdate();
                                    SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                                    Date date1 = format.parse(dateString);
                                    c.setTime(date1);
                                    SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                                    String strDate = "";
                                    if (productVo.getExpDateType().equalsIgnoreCase("MFG")) {
                                        stockMasterVo.setManufactureDate(c.getTime());
                                        c.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays())); // Adding
                                        // days
                                        stockMasterVo.setExpirationDate(c.getTime());
                                        strDate = formatter.format(c.getTime());
                                    } else {
                                        stockMasterVo.setExpirationDate(c.getTime());
                                        strDate = formatter.format(c.getTime());
                                        c.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays()) * -1); // Adding
                                        // days
                                        stockMasterVo.setManufactureDate(c.getTime());
                                    }
                                    log.warning("strDate >> : " + strDate);

                                    log.warning("Batch Before  >> : " + stockMasterVo.getBatchNo());
                                    stockMasterVo.setBatchNo(stockMasterVo.getBatchNo() + strDate);
                                    log.warning("Batch After  >> : " + stockMasterVo.getBatchNo());
                                }
                                masterVos.add(stockMasterVo);
                            }
                        }

                        stockMasterService.saveAll(masterVos);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Constant.BARCODEGENRATESERIESWISE);
                if (barcodegenrateserieswise != null) {
                    if (barcodegenrateserieswise.getValue() == 1) {
                        CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEMANAGE);
                        if (barcodemanage != null && barcodemanage.getValue() == 2) {
                            try {
                                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODESERIES);
                                CompanySettingVo barcodeprefix = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODEPREFIX);
                                if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
                                    itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
                                    barcodeSeries.setAddValue(itemcodeSeries);
                                    companySettingService.saveCompanySetting(barcodeSeries);
                                }
                            } catch (Exception e) {
                                // TODO: handle exception
                            }

                        } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                            try {
                                CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODESERIES);
                                CompanySettingVo barcodeprefix = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODEPREFIX);

                                if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
                                    itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
                                    barcodeSeries.setAddValue(itemcodeSeries);
                                    companySettingService.saveCompanySetting(barcodeSeries);
                                }
                            } catch (Exception e) {
                                // TODO: handle exception
                            }

                        }
                    }
                }

                for (ProductVarientsVo pv : productVo.getProductVarientsVos()) {
                    productVarientIds.add(pv.getProductVarientId());
                }
                return new ApiResponse(true, "success", productVarientIds);
            } else {

                String itemcodeSeries = "";
                ProductVo product = new ProductVo();

                product.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                product.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                product.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                product.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                product.setModifiedOn(CurrentDateTime.getCurrentDate());
                product.setCreatedOn(CurrentDateTime.getCurrentDate());
                product.setName(posName);
                product.setDisplayName(posName);
                product.setProductType(posproducttypet);
                product.setTaxIncluded(Integer.parseInt(posTaxIncluded));
                product.setPurchaseTaxIncluded(Integer.parseInt(pospurchaseTaxIncluded));
                product.setIsExpiryManage(Integer.parseInt(isExpiryManage));
                product.setIsBatchManage(Integer.parseInt(isBatchManage));

                if (product.getIsExpiryManage() == 1) {
                    if (StringUtils.isNotBlank(expDays)) {
                        product.setExpirationdays(expDays);
                        if (StringUtils.isNotBlank(isExpirySee)) {
                            product.setIsExpirySee(Integer.parseInt(isExpirySee));
                        } else {
                            product.setIsExpirySee(0);
                        }
                        product.setExpDateType(expType);
                    } else {
                        product.setExpirationdays("1");
                    }
                }
                product.setHaveVariation(0);
                try {
                    product.setHsnCode(posHsnCode);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                CategoryVo categoryVo = new CategoryVo();
                categoryVo.setCategoryId(Long.parseLong(categoryId));
                product.setCategoryVo(categoryVo);

                BrandVo brandVo = new BrandVo();
                brandVo.setBrandId(Long.parseLong(brandId));
                product.setBrandVo(brandVo);
                if (StringUtils.isNotEmpty(subCategoryId) && !subCategoryId.equals("0") && !subCategoryId.equals("")) {
                    CategoryVo subCategoryVo = new CategoryVo();
                    subCategoryVo.setCategoryId(Long.parseLong(subCategoryId));
                    product.setSubCategoryVo(subCategoryVo);
                }
                if (StringUtils.isNotEmpty(subBrandId) && !subBrandId.equals("0") && !subBrandId.equals("")) {
                    BrandVo subBrandVo = new BrandVo();
                    subBrandVo.setBrandId(Long.parseLong(subBrandId));
                    product.setSubBrandVo(subBrandVo);
                }
                TaxVo tax = new TaxVo();
                tax.setTaxId(Long.parseLong(taxId));
                product.setTaxVo(tax);
                product.setPurchaseTaxVo(tax);

                UnitOfMeasurementVo unitOfMeasurementVo = new UnitOfMeasurementVo();
                unitOfMeasurementVo.setMeasurementId(Long.parseLong(uom));
                product.setUnitOfMeasurementVo(unitOfMeasurementVo);
                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                productVarientsVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                productVarientsVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                productVarientsVo.setMrp(Double.parseDouble(posMrp));
                product.setMrp(Double.parseDouble(posMrp));
                product.setSellingPrice(Double.parseDouble(posSellingPrice));
                if (StringUtils.isNotBlank(posSellingPrice)) {
                } else {
                    posSellingPrice = "0";
                }
                productVarientsVo.setSellingPrice(Double.parseDouble(posSellingPrice));
                productVarientsVo.setLandingCost(Double.parseDouble(posLandingCost));
                productVarientsVo.setShopifyPrice(Double.parseDouble(posSellingPrice));
                productVarientsVo.setPurchasePrice(Double.parseDouble(posPurchasePrice));
                CompanySettingVo sellingmarginVo = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.REATILERMARGIN);
                try {
                    if (sellingmarginVo != null && sellingmarginVo.getAddValue() != "0") {
                        productVarientsVo.setRetailerPrice(Double.parseDouble(new DecimalFormat("#.##")
                                .format(Double.parseDouble(posPurchasePrice) + (Double.parseDouble(posPurchasePrice)
                                        * Double.parseDouble(sellingmarginVo.getAddValue())) / 100)));

                    } else {
                        productVarientsVo.setRetailerPrice(Double.parseDouble(posSellingPrice));
                    }
                    // log.info("::::::::::::::::::::::::::::::::::::retailer"+productVarientsVo.getRetailerPrice());
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarientsVo.setRetailerPrice(Double.parseDouble(posSellingPrice));
                }
                CompanySettingVo wholesalermarginvo = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.WHOLESALERMARGIN);
                try {
                    if (wholesalermarginvo != null && wholesalermarginvo.getAddValue() != "0") {
                        productVarientsVo.setWholesalerPrice(Double.parseDouble(new DecimalFormat("#.##")
                                .format(Double.parseDouble(posPurchasePrice) + (Double.parseDouble(posPurchasePrice)
                                        * Double.parseDouble(wholesalermarginvo.getAddValue())) / 100)));
                    } else {
                        productVarientsVo.setWholesalerPrice(Double.parseDouble(posSellingPrice));
                    }
                    // log.info("::::::::::::::::::::::::::::::::::::wholseller"+productVarientsVo.getWholesalerPrice());
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarientsVo.setWholesalerPrice(Double.parseDouble(posSellingPrice));
                }

                // productVarientsVo.setRetailerPrice(Double.parseDouble(posSellingPrice));
                productVarientsVo.setItemCode(itemCode);
                product.setItemCode(itemCode);
                productVarientsVo.setWeight(0);
                productVarientsVo.setCompareAtPrice(0);
                productVarientsVo.setOtherPrice(0);

                productVarientsVo.setOtherMargin(0);
                productVarientsVo.setShopifyMargin(0);
                productVarientsVo.setWholesalerMargin(0);
                productVarientsVo.setSequenceNo(0);
                productVarientsVo.setShopifyVariantSourceId(0);
                productVarientsVo.setDiscountType(posDiscountType);
                productVarientsVo.setDiscount(Double.parseDouble(posDiscount));
                productVarientsVo.setProductVo(product);
                productVarientsVo.setRetailerMarginType("amount");
                productVarientsVo.setRetailerMargin(
                        round(productVarientsVo.getSellingPrice() - productVarientsVo.getLandingCost(), 2));
                productVarientVoList.add(productVarientsVo);

                product.setProductVarientsVos(productVarientVoList);

                try {
                    product.setItemCode(product.getProductVarientsVos().get(0).getItemCode());
                    itemcodeSeries = product.getProductVarientsVos().get(0).getItemCode();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    product.setSellingPrice(product.getProductVarientsVos().get(0).getSellingPrice());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    product.setMrp(product.getProductVarientsVos().get(0).getMrp());
                } catch (Exception e) {
                    e.printStackTrace();
                }

                ProductVo productVo = productService.insertProduct(product);

                try {
                    for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
                        String item_code = productVo.getProductVarientsVos().get(i).getItemCode();
                        long productVarientId = productVo.getProductVarientsVos().get(i).getProductVarientId();
                        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
                        List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                                .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(productVarientId, companyId,
                                        0, 1);
                        //// log.warning("productMultiBarcodeVos
                        //// size=====>"+productMultiBarcodeVos.size());
                        if (!productMultiBarcodeVos.isEmpty()) {
                            //// log.warning("======productMultiBarcodeVos is available=====");
                            ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
                            productMultiBarcodeVo.setItemCode(item_code);
                            ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                    .saveAndFlush(productMultiBarcodeVo);
                        } else {
                            //// log.warning("======productMultiBarcodeVos is not available=====");
                            ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                            productMultiBarcodeVo
                                    .setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            productMultiBarcodeVo
                                    .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            productMultiBarcodeVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                            productMultiBarcodeVo
                                    .setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                            productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                            productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                            productMultiBarcodeVo.setProductVarientId(productVarientId);
                            productMultiBarcodeVo.setItemCode(item_code);
                            productMultiBarcodeVo.setIsDefault(1);
                            ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                    .saveAndFlush(productMultiBarcodeVo);
                            //// log.warning("======productMultiBarcodeVo New Created=====");
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (StringUtils.isNotEmpty(posQty) && !posQty.equals("0") && !posQty.equals("")) {

                    try {
                        log.info("adding stock of opening stock");
                        List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();
                        StockTransactionVo stockTransactionVo = new StockTransactionVo();

                        stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        stockTransactionVo.setDescription("Opening Stock");
                        stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        stockTransactionVo.setInQuantity(Double.parseDouble(posQty));

                        stockTransactionVo.setProductPrice(productVo.getProductVarientsVos().get(0).getPurchasePrice());

                        double landingcost = productVo.getProductVarientsVos().get(0).getLandingCost();
                        double sellingPrice = productVo.getProductVarientsVos().get(0).getSellingPrice();

                        stockTransactionVo.setBatchNo("B"
                                + productVo.getProductVarientsVos().get(0).getProductVarientId()
                                + new DecimalFormat("#.###").format(landingcost)
                                + new DecimalFormat("#.###").format(productVo.getProductVarientsVos().get(0).getMrp()));
                        stockTransactionVo.setMrp(productVo.getProductVarientsVos().get(0).getMrp());
                        stockTransactionVo.setLandingCost(landingcost);
                        stockTransactionVo.setSellingPrice(sellingPrice);

                        stockTransactionVo.setProductVarientsVo(productVo.getProductVarientsVos().get(0));

                        DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");

                        try {
                            stockTransactionVo.setStockTransactionDate(
                                    dateFormat3.parse(session.getAttribute("firstDateFinancialYear").toString()));
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }

                        stockTransactionVo.setType("new");
                        stockTransactionVo.setTypeId(productVo.getProductVarientsVos().get(0).getProductVarientId());
                        stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());
                        if (productVo.getIsExpiryManage() == 1) {
                            stockTransactionVo.setExpirationManage(1);
                            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                            Calendar cal = Calendar.getInstance();
                            stockTransactionVo.setManufactureDate(cal.getTime());
                            cal.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays()));
                            stockTransactionVo.setExpirationDate(cal.getTime());
                        }
                        if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                            stockTransactionVos.add(stockTransactionVo);
                        }

                        stockTransactionService.saveOpeningStock(stockTransactionVos);

                        try {
                            wooService.updateProductStockInWooCommerce(stockTransactionVos);
                            shopifyService.updateStockInShopify(stockTransactionVos, session);
                        } catch (Exception e) {
                            e.printStackTrace();
                            // TODO: handle exception
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        // System.err.println("error at saving opening stock");
                        // TODO: handle exception
                    }
                } else {
                    try {
                        List<StockMasterVo> masterVos = new ArrayList<StockMasterVo>();
//
//          				   stockTransactionService.saveOpeningStock(stockTransactionVos);
                        List<Long> branchIdList = userRepository
                                .getbranchList(Long.parseLong(session.getAttribute("companyId").toString()));
                        for (int i = 0; i < branchIdList.size(); i++) {
                            StockMasterVo stockMasterVo = new StockMasterVo();
                            stockMasterVo.setBatchNo("B" + productVarientsVo.getProductVarientId()
                                    + new DecimalFormat("#.###").format(productVarientsVo.getLandingCost()));
                            stockMasterVo.setBranchId(Long.parseLong("" + branchIdList.get(i)));
                            stockMasterVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            stockMasterVo.setCreatedOn(new Date());
                            stockMasterVo.setExpirationDays(0);
                            stockMasterVo.setIsDisable(0);
                            stockMasterVo.setLandingCost(productVarientsVo.getLandingCost());
                            stockMasterVo.setModified_on(new Date());
                            stockMasterVo.setMrp(productVarientsVo.getMrp());
                            stockMasterVo.setProductVarientsVo(productVarientsVo);
                            stockMasterVo.setPurchasePrice(productVarientsVo.getPurchasePrice());
                            stockMasterVo.setQuantity(0);
                            stockMasterVo.setSellingPrice(productVarientsVo.getSellingPrice());
                            stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString());

                            if (productVo.getIsExpiryManage() == 1) {

                                Calendar c = Calendar.getInstance();
                                String dateString = date;
                                SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                                Date date1 = format.parse(dateString);
                                c.setTime(date1);
                                SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                                String strDate = "";
                                if (productVo.getExpDateType().equalsIgnoreCase("MFG")) {
                                    stockMasterVo.setManufactureDate(c.getTime());
                                    c.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays())); // Adding
                                    // days
                                    stockMasterVo.setExpirationDate(c.getTime());
                                    strDate = formatter.format(c.getTime());
                                } else {
                                    stockMasterVo.setExpirationDate(c.getTime());
                                    strDate = formatter.format(c.getTime());
                                    c.add(Calendar.DATE, Integer.parseInt(productVo.getExpirationdays()) * -1); // Adding
                                    // days
                                    stockMasterVo.setManufactureDate(c.getTime());
                                }
                                log.warning("strDate >> : " + strDate);

                                log.warning("Batch Before  >> : " + stockMasterVo.getBatchNo());
                                stockMasterVo.setBatchNo(stockMasterVo.getBatchNo() + strDate);
                                log.warning("Batch After  >> : " + stockMasterVo.getBatchNo());
                            }
                            masterVos.add(stockMasterVo);
                        }
                        stockMasterService.saveAll(masterVos);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
//                try {
//                	Greeting greeting = new Greeting();
//         	       try {
//
//         	    	    //log.info("Path is:" + request.getServletContext().getRealPath("/"));
//         	            File directory = new File(request.getServletContext().getRealPath("/") + "json");
//         	            if (!directory.exists()) {
//         	                directory.mkdir();
//         	                // If you require it to make the entire directory path including parents,
//         	                // use directory.mkdirs(); here instead.
//         	            }
//         	            String filepath=request.getServletContext().getRealPath("/") + "json" + System.getProperty("file.separator")
//                         + "product" + Long.parseLong(session.getAttribute("companyId").toString()) + ".json";
//         	            try {
//         	            	File file = new File(filepath);
//         	                FileChannel fileChannel = new FileOutputStream(file, true).getChannel();
//         	                fileChannel.truncate(fileChannel.size() - 1); //Removes last character
//         	                fileChannel.close();
//        				} catch (Exception e) {
//        					// TODO: handle exception
//        				}
//         	            try (FileWriter file = new FileWriter(filepath,true)) {
//         	                // File Writer creates a file in write mode at the given location
//
//         	            	ObjectMapper Obj = new ObjectMapper();
//         	            	file.toString();
//         	            	file.write(","+Obj.writeValueAsString(new DTOProductVoFORPOSJSON(productVo.getProductVarientsVos().get(0).getProductVarientId(),productVo.getName()))+"]");
//
//         	                // write function is use to write in file,
//         	                // here we write the Json object in the file
//         	                file.flush();
//
//         	            } catch (IOException e) {
//         	                e.printStackTrace();
//         	            }
//         	    	   messagingTemplate.convertAndSendToUser(session.getAttribute("branchId").toString(),"/queue/productnewadd", greeting);
//         	    	    } catch (Exception e) {
//         	                e.printStackTrace();
//         	        }
//        		} catch (Exception e) {
//        			e.printStackTrace();
//        		}
                try {

                    CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Constant.BARCODEGENRATESERIESWISE);
                    if (barcodegenrateserieswise != null) {
                        if (barcodegenrateserieswise.getValue() == 1) {
                            CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    Constant.BARCODEMANAGE);
                            if (barcodemanage != null && barcodemanage.getValue() == 2) {
                                try {
                                    CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                            Long.parseLong(session.getAttribute("companyId").toString()),
                                            Constant.BARCODESERIES);
                                    CompanySettingVo barcodeprefix = companySettingService.findByCompanyIdAndType(
                                            Long.parseLong(session.getAttribute("companyId").toString()),
                                            Constant.BARCODEPREFIX);
                                    if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
                                        itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
                                        barcodeSeries.setAddValue(itemcodeSeries);
                                        companySettingService.saveCompanySetting(barcodeSeries);
                                    }
                                } catch (Exception e) {
                                    // TODO: handle exception
                                }

                            } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                                try {
                                    CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            Constant.BARCODESERIES);
                                    CompanySettingVo barcodeprefix = companySettingService.findByBranchIdAndType(
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            Constant.BARCODEPREFIX);

                                    if (StringUtils.contains(itemcodeSeries, barcodeprefix.getAddValue())) {
                                        itemcodeSeries = itemcodeSeries.replace(barcodeprefix.getAddValue(), "");
                                        barcodeSeries.setAddValue(itemcodeSeries);
                                        companySettingService.saveCompanySetting(barcodeSeries);
                                    }
                                } catch (Exception e) {
                                    // TODO: handle exception
                                }

                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                productVarientIds.add(productVo.getProductVarientsVos().get(0).getProductVarientId());

                try {
                    if (Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 0
                            || Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 1) {
                        typesenseService.createSingleProductInTypesense(productVo.getProductId(),
                                productVo.getCompanyId());
                    }
                } catch (Exception e) {
                    // TODO: handle exception
                    e.printStackTrace();
                }
                return new ApiResponse(true, "success", productVarientIds);

            }
        } else {
            return new ApiResponse(false, "You Do not have Permission to Create a Product", null);
        }
    }

    @PostMapping("/createJsonEDITModel")
    @ResponseBody
    public String insertProductJSONEDITModel(HttpSession session, @RequestParam Map<String, String> allRequestParams,
                                             @RequestParam("data") String reqdata) throws JsonParseException, JsonMappingException, IOException {
        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT) == 1
                || MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {

            ObjectNode object = new ObjectMapper().readValue(reqdata, ObjectNode.class);

            productVarientsVo = productService
                    .findByProductVarientId(Long.parseLong(object.get("varietionId").textValue()));

            productVarientsVo.getProductVo().setName(object.get("name").textValue());

            UnitOfMeasurementVo measurementVo = new UnitOfMeasurementVo();

            measurementVo.setMeasurementId(Long.parseLong(object.get("unitOfMeasurementVo.measurementId").textValue()));
            productVarientsVo.getProductVo().setUnitOfMeasurementVo(measurementVo);

            productVarientsVo.getProductVo()
                    .setTaxIncluded(Integer.parseInt(allRequestParams.get("salesTaxIncluding").toString()));
            productVarientsVo.getProductVo()
                    .setPurchaseTaxIncluded(Integer.parseInt(allRequestParams.get("puchaseTaxIncluding").toString()));

            TaxVo taxVo = new TaxVo();
            taxVo.setTaxId(Long.parseLong(object.get("taxVo.taxId").textValue()));
            productVarientsVo.getProductVo().setTaxVo(taxVo);
            productVarientsVo.getProductVo().setHsnCode(object.get("hsnCode").textValue());

            TaxVo purchaseTaxVo = new TaxVo();
            purchaseTaxVo.setTaxId(Long.parseLong(object.get("purchaseTaxVo.taxId").textValue()));
            productVarientsVo.getProductVo().setPurchaseTaxVo(purchaseTaxVo);
            productVarientsVo.getProductVo().setHsnCode(object.get("hsnCode").textValue());

            CategoryVo categoryVo = new CategoryVo();
            categoryVo.setCategoryId(Long.parseLong(object.get("categoryVo.categoryId").textValue()));
            productVarientsVo.getProductVo().setCategoryVo(categoryVo);

            BrandVo brandVo = new BrandVo();
            brandVo.setBrandId(Long.parseLong(object.get("brandVo.brandId").textValue()));
            productVarientsVo.getProductVo().setBrandVo(brandVo);

            // productVarientsVo.getProductVo().setDiscount(Double.parseDouble(object.get("discount").textValue()));
            // productVarientsVo.getProductVo().setDiscountType(object.get("discountType").textValue().toLowerCase());

            productVarientsVo.setDiscount(Double.parseDouble(object.get("discount").textValue()));
            productVarientsVo.setDiscountType(object.get("discountType").textValue().toLowerCase());

            productVarientsVo.setPurchasePrice(
                    Double.parseDouble(object.get("productVarientsVos[0].purchasePrice").textValue()));
            productVarientsVo
                    .setSellingPrice(Double.parseDouble(object.get("productVarientsVos[0].sellingPrice").textValue()));
            productVarientsVo.setMrp(Double.parseDouble(object.get("productVarientsVos[0].mrp").textValue()));
            productVarientsVo.setItemCode(object.get("productVarientsVos[0].itemCode").textValue());

            // productVarientsVo.setRetailerPrice(Double.parseDouble(object.get("productVarientsVos[0].retailerPrice").textValue()));

            List<ProductVarientsVo> list = new ArrayList<>();
            list.add(productVarientsVo);
            productVarientsVo.getProductVo().setProductVarientsVos(list);

            /*
             * if(product.getHaveVariation() == 1) { for(int
             * i=0;i<product.getProductAttributeVos().size();i++) { ProductAttributeVo
             * productAttributeVo=product.getProductAttributeVos().get(i);
             * productAttributeVo.setProductVo(product); } }
             */
            productService.insertProduct(productVarientsVo.getProductVo());

        }
        return "" + productVarientsVo.getProductVo().getProductVarientsVos().get(0).getProductVarientId();
    }

    @RequestMapping("/{id}/getvarients")
    @ResponseBody
    public List<ProductVarientsForEditPageDTO> getVarientsVos(@PathVariable Long id, HttpSession session)
            throws ParseException {
        List<ProductVarientsForEditPageDTO> productVarientsVos = productService
                .findByCompanyIdAndProductVoProductId(Long.parseLong(session.getAttribute("companyId").toString()), id);

        return productVarientsVos;
    }

    @RequestMapping("/{id}")
    public ModelAndView viewProduct(@PathVariable Long id, HttpSession session) throws ParseException {
        ModelAndView mv = new ModelAndView();
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {
            long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
            String clusterId = session.getAttribute("clusterId").toString();
            String subclusterId = session.getAttribute("subclusterId").toString();
            List<BranchDTO> branchDTOs = new ArrayList<>();
            if (session.getAttribute("branchId").toString().equals(session.getAttribute("companyId").toString())) {

                branchDTOs = profileService
                        .getCustomListOfBranch(Long.parseLong(session.getAttribute("companyId").toString()));
                mv.addObject("branchList", branchDTOs);
            } else {

                branchDTOs = profileService
                        .getCustomBranchDetails(Long.parseLong(session.getAttribute("branchId").toString()));
                mv.addObject("branchList", branchDTOs);
            }
            mv.addObject("warehouseList", warehouseService.getAllWarehouseAndCompanyWarehouseByIsDeleted(0, Long.parseLong(session.getAttribute("branchId").toString())));
            mv.addObject("branchListSize", branchDTOs.size());
            mv.addObject("productvariants", productService.findProductVarientNameByProductId(id));

            log.info("product view call");
            List<ProductVo> productVos = productService.productDetail(id,
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);

            if (productVos.isEmpty() || productVos.get(0).getIsDeleted() == 1) {

                mv.setViewName("accessdenied/datanotavailbal");
            } else {

                List<ProductVo> productVoList = productRepository.findByProductKeyAndItemCode(
                        productVos.get(0).getProductKey(), productVos.get(0).getItemCode(),
                        Long.parseLong(session.getAttribute("companyId").toString()));
                List<ProductMultiBarcodeVo> productMultiBarcodeVos = new ArrayList<>();
                if (!productVoList.isEmpty()) {
                    productVoList.forEach(item -> {
                        if (item.getProductVarientsVos() != null) {
                            List<ProductMultiBarcodeVo> productMultiBarcodeVoList = productMultiBarcodeRepository
                                    .findByProductVarientIdAndCompanyIdAndIsDeleted(item.getProductVarientsVos().get(0).getProductVarientId(),
                                            Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
                            if (!productMultiBarcodeVoList.isEmpty()) {
                                productMultiBarcodeVoList.forEach(barcode -> {
                                    productMultiBarcodeVos.add(barcode);
                                });
                            }
                        }
                    });
                }
//				productVos.get(0).setProductMultiBarcodeVos(productMultiBarcodeVos);

                productVos.get(0).setCreatedbyname(profileService.getName(productVos.get(0).getCreatedBy()));

                productVos.get(0).getProductVarientsVos().removeIf(c -> c.getIsDeleted() == 1);

                double totalQty = 0;
                Date startDate, endDate;

                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

                startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
                endDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());

                totalQty = stockTransactionService.getTotalQty(
                        Long.parseLong(session.getAttribute("branchId").toString()), id, startDate, endDate,
                        session.getAttribute("financialYear").toString());

                productVos.get(0).getProductVarientsVos()
                        .forEach(v -> v.setQty(stockTransactionService.getVariantQty(
                                Long.parseLong(session.getAttribute("branchId").toString()), v.getProductVarientId(),
                                startDate, endDate, session.getAttribute("financialYear").toString())));

                productVos.get(0).setDefaultImageSrc(productService
                        .getDefaultImageSrcByProductId(productVos.get(0).getProductId(), FILE_UPLOAD_SERVER));

                List<ProductImageVo> productImageVos = productService.findImageByProductId(id, 0);

                DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy");
                Date date = new Date();
                log.info("dateFormat2.format(date)->>>>>" + dateFormat2.format(date));

                // productImageVos.forEach(p -> p.setProductVo(null));
                productVos.get(0).getProductVarientsVos().forEach(productVarient -> {
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndBranchIdAndYearIntervalOrderBycreatedonDesc(
                                    productVarient.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString());
                    int enablebatchcount = 0;
                    try {
                        if (!stockMasterVos.isEmpty()) {
                            for (int i = 0; i < stockMasterVos.size(); i++) {
                                double marginsellingprice = 0.0, membershipsellingprice = 0, margin = 0.0;
//                    			----------Retailer Margin -------------------
                                log.warning("HERE QTY  ---->" + stockMasterVos.get(i).getQuantity());
                                if (stockMasterVos.get(i).getProductVarientsVo().getRetailerMarginType()
                                        .equals("percentage")) {
                                    marginsellingprice = stockMasterVos.get(i).getLandingCost()
                                            + ((stockMasterVos.get(i).getLandingCost()
                                            * stockMasterVos.get(i).getProductVarientsVo().getRetailerMargin())
                                            / 100);
                                } else {
                                    marginsellingprice = stockMasterVos.get(i).getLandingCost()
                                            + stockMasterVos.get(i).getProductVarientsVo().getRetailerMargin();
                                }
//                    			----------Membership Margin -------------------
                                if (stockMasterVos.get(i).getProductVarientsVo().getMembershipMarginType() != null) {
                                    if (stockMasterVos.get(i).getProductVarientsVo().getMembershipMarginType()
                                            .equals("percentage")) {
                                        membershipsellingprice = stockMasterVos.get(i).getLandingCost()
                                                + ((stockMasterVos.get(i).getLandingCost() * stockMasterVos.get(i)
                                                .getProductVarientsVo().getMembershipMargin()) / 100);
                                    } else {
                                        membershipsellingprice = stockMasterVos.get(i).getLandingCost()
                                                + stockMasterVos.get(i).getProductVarientsVo().getMembershipMargin();
                                    }
                                } else {
                                    membershipsellingprice = stockMasterVos.get(i).getLandingCost()
                                            + stockMasterVos.get(i).getProductVarientsVo().getMembershipMargin();
                                }

//                    			---------- Margin -------------------
                                if (stockMasterVos.get(i).getProductVarientsVo().getRetailerMarginType()
                                        .equals("percentage")) {
                                    if (stockMasterVos.get(i).getLandingCost() > 0)
                                        margin = (((stockMasterVos.get(i).getSellingPrice() * 100)
                                                / stockMasterVos.get(i).getLandingCost()) - 100);
                                    else
                                        margin = 0.0;

                                } else {
                                    margin = stockMasterVos.get(i).getSellingPrice()
                                            - stockMasterVos.get(i).getLandingCost();
                                }
                                stockMasterVos.get(i).setMembershipsellingprice(membershipsellingprice);
                                stockMasterVos.get(i).setMarginsellingprice(marginsellingprice);
                                stockMasterVos.get(i).setMargin(margin);
                                try {
                                    if (productVarient.getProductVo().getIsExpiryManage() == 1) {
                                        int diffday = (int) ((date.getTime()
                                                - stockMasterVos.get(i).getExpirationDate().getTime())
                                                / (1000 * 60 * 60 * 24));
                                        stockMasterVos.get(i).setDifferentdays(diffday);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (stockMasterVos != null) {
                        productVarient.setStockMasterVos(stockMasterVos);
                        enablebatchcount = (int) stockMasterVos.stream().filter(x -> x.getIsDisable() == 0).count();
                        productVarient.setEnablebatchcount(enablebatchcount);
                    }
                });

                boolean isExistInTransaction = stockTransactionService.existByProductIdAndCompanyId(id,
                        Long.parseLong(session.getAttribute("companyId").toString()));

                List<BarcodeMasterDTO> barcodesetting = barcodeMasterSettingRepository
                        .findBarcodeDetailByCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                mv.addObject("barcodesetting", barcodesetting);
                CompanySettingVo allowshopify = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.SHOPIFY);
                if (allowshopify != null) {
                    if (allowshopify.getValue() == 1) {
                        mv.addObject("shopifySetup", 1);
                    } else {
                        mv.addObject("shopifySetup", 0);
                    }

                }
                WoocommerceSetupVo woocommerceVo = woocommerceSetupService
                        .getWoocommerceDetail(Long.parseLong(session.getAttribute("companyId").toString()));
                mv.addObject("woocommerce", 0);
                if (woocommerceVo != null && woocommerceVo.getAllowWooCommerce() != 0) {
                    mv.addObject("woocommerce", 1);
                }

                if (Long.parseLong(session.getAttribute("jioType").toString()) == Constant.JIO_TYPE_FJSK) {
                    if (productVos.get(0).getJpmProductTBLId() != 0) {
                        Map<String, String> jpmProduct = jpmProductRepository
                                .findByJPMProductTblId(productVos.get(0).getJpmProductTBLId());

                        if (!jpmProduct.isEmpty()) {
                            mv.addObject("jpmProduct", jpmProduct);

                            if (StringUtils.isNotBlank(jpmProduct.get("article_type").toString())) {
                                int limit = 0;
                                List<Map<String, String>> jpmProductMrpList = null;
                                log.info("fc_product_id: " + jpmProduct.get("fc_product_id").toString());
                                log.info("clusterId : " + clusterId);
                                log.info("subclusterId : " + subclusterId);
                                log.info("limit : " + limit);
                                log.info("category : " + jpmProduct.get("category_name").toString());
                                if (jpmProduct.get("article_type").toString().equals("M")
                                        || jpmProduct.get("article_type").toString().equals("B")) {
                                    limit = 5;
                                    jpmProductMrpList = jpmService.findJPMProductMrpListByArticleIdAndClusterId(
                                            jpmProduct.get("fc_product_id").toString(), clusterId, subclusterId, limit);// productVos.get(0).getJpmFCProductId()

                                } else if (jpmProduct.get("article_type").toString().equals("C")) {
                                    limit = 1;
                                    jpmProductMrpList = jpmService.findJPMProductMrpListByArticleIdAndClusterId(
                                            jpmProduct.get("fc_product_id").toString(), clusterId, subclusterId, limit);
                                }
                                if (CollectionUtils.isNotEmpty(jpmProductMrpList)) {
                                    mv.addObject("jpmProductMRPList", jpmProductMrpList);
                                }

                                // Marka product
                                if (jpmProduct.get("article_type").toString().equals("B")
                                        || jpmProduct.get("article_type").toString().equals("C")) {

                                    List<Map<String, String>> marka_sp_range = new ArrayList<Map<String, String>>();

                                    marka_sp_range = jpmService.getMarkaProductRangeByAtricleId(
                                            jpmProduct.get("fc_product_id").toString(), subclusterId);
                                    log.info("marka_sp_range by article " + marka_sp_range.toString());
                                    if (CollectionUtils.isEmpty(marka_sp_range)) {
                                        marka_sp_range = jpmService.getMarkaProductRangeByCategory(
                                                jpmProduct.get("category_name").toString(), subclusterId);
                                        log.info("marka_sp_range by category " + marka_sp_range.toString());
                                    }

                                    log.info("marka_sp_range by article/category " + marka_sp_range.toString());
                                    mv.addObject("markasprangelist", marka_sp_range);
                                }
                            }
                        }
                    }
                }

                mv.addObject("totalQty", totalQty);
                mv.addObject("isExistInTransaction", isExistInTransaction);
                mv.addObject("ProdcutDetails", productVos);
                mv.addObject("productImageVos", productImageVos);
                mv.addObject("FILE_UPLOAD_SERVER", FILE_UPLOAD_SERVER);
                mv.addObject("barcodesetting", barcodesetting);
                mv.addObject(Constant.MANAGEPOQUANTITYINPRODUCT,
                        companySettingService.findByBranchIdAndType(
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                Constant.MANAGEPOQUANTITYINPRODUCT));
                mv.addObject(Constant.PRODUCTTYPE, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE));
                mv.addObject(Constant.PRODUCTION,
                        MenuPermission.havePermission(session, Constant.PRODUCTION, Constant.INSERT));
                POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(id,
                        Long.parseLong(session.getAttribute("branchId").toString()));
                if (master != null) {
                    mv.addObject("poQuantityMaster", master);
                }

                mv.setViewName("product/product-view");
                List<WoocommerceSetupVo> list = woocommerceSetupService.findByCompanyIdAndAllowWooCommerce(
                        Long.parseLong(session.getAttribute("companyId").toString()), 1);
                if (!list.isEmpty()) {
                    mv.addObject("allowwoocommerce", 1);
                } else {
                    mv.addObject("allowwoocommerce", 0);
                }
                mv.addObject(Constant.BATCHCLOSED, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BATCHCLOSED));
                mv.addObject(Constant.PURCHASECONVERSATION, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.PURCHASECONVERSATION));
                mv.addObject(Constant.MEMBERSHIP, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP));
                mv.addObject(Constant.ALLPRICESHOW, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW));
                mv.addObject(Constant.NOTALLOWPRODUCTDELETEOFSTOCKAVAILABLE,
                        companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()),
                                Constant.NOTALLOWPRODUCTDELETEOFSTOCKAVAILABLE));
                mv.addObject(Constant.FINISHPRODUCTMAPPING, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.FINISHPRODUCTMAPPING));
                mv.addObject(Constant.MULTIBARCODE, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIBARCODE));
                mv.addObject(Constant.MULTIDUPLICATEBARCODE, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIDUPLICATEBARCODE));
                mv.addObject(Constant.ALLOWB2B, companySettingService.findByBranchIdAndType(
                        Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWB2B));
                mv.addObject(Constant.PRODUCTLEDGER, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTLEDGER));
            }
        } else {
            mv.setViewName("accessdenied/accessdenied");
        }
        return mv;
    }

    @RequestMapping("/batchdisable")
    @ResponseBody
    public String batchDisableByStockMasterId(HttpSession session,
                                              @RequestParam(name = "stockMasterId", defaultValue = "0") long stockMasterId,
                                              @RequestParam(name = "isDisable") int isDisable) {
        try {
            int response = stockMasterRepository.countByStockIdAndBranchId(stockMasterId,
                    Long.parseLong(session.getAttribute("branchId").toString()));
            if (response > 0) {
                int result = stockMasterRepository.updateIsDisableBatch(stockMasterId, isDisable);
                //// log.warning("updateIsDisableBatch------->"+result);
                if (result > 0) {
                    return "200";
                } else {
                    return "400";
                }
            } else {
                return "404";
            }

        } catch (Exception e) {
            e.printStackTrace();
            // log.severe(e.getMessage());
            return "500";
        }

    }

    @RequestMapping("/newbatchdisable")
    @ResponseBody
    public Map<String, Object> newbatchDisableByStockMasterId(HttpSession session,
                                                              @RequestParam(name = "stockMasterId", defaultValue = "0") long stockMasterId,
                                                              @RequestParam(name = "productVarientsId", defaultValue = "0") long productVarientsId,
                                                              @RequestParam(name = "isDisable") int isDisable) {

        try {

            Map<String, Object> map = new HashMap<>();
            int response = stockMasterRepository.countByStockIdAndBranchId(stockMasterId,
                    Long.parseLong(session.getAttribute("branchId").toString()));
            if (response > 0) {
                int enablebatchcount = 0;
                map.put("status", "200");
                map.put("enablebatchcount", String.valueOf(enablebatchcount));

                int result = stockMasterRepository.updateIsDisableBatch(stockMasterId, isDisable);
                List<StockMasterVo> stockMasterVos = stockMasterService
                        .findByProductVarientsVoProductVarientIdAndBranchIdAndYearIntervalOrderBycreatedonDesc(
                                productVarientsId, Long.parseLong(session.getAttribute("branchId").toString()),
                                session.getAttribute("financialYear").toString());

                if (stockMasterVos != null) {
                    enablebatchcount = (int) stockMasterVos.stream().filter(x -> x.getIsDisable() == 0).count();
                    map.put("enablebatchcount", String.valueOf(enablebatchcount));
                    map.put("stockmasterVo", stockMasterVos);
                }
                //// log.warning("updateIsDisableBatch------->"+result);

                if (result > 0) {
                    map.put("status", "200");
                    // return "200";
                } else {
                    map.put("status", "400");
                    // return "400";
                }
            } else {
                map.put("status", "404");
            }

            return map;
        } catch (Exception e) {
            e.printStackTrace();
            // log.severe(e.getMessage());
            return null;
        }

    }

    @RequestMapping("/batch/{id}")
    @ResponseBody
    public StockMasterVo batchData(HttpSession session, @PathVariable("id") long stockMasterId) {
        // StockMasterVo masterVo=stockMasterRepository.findByStockId(stockMasterId);
        StockMasterVo masterVo = stockMasterRepository.findByStockIdAndBranchId(stockMasterId,
                Long.parseLong(session.getAttribute("branchId").toString()));
        boolean isExpiryManage = productVariantRepository.getisexpirymanageByStockkId(masterVo.getStockId());
        masterVo.setExpiryManaged(isExpiryManage);
        return masterVo;
    }

    @GetMapping("/shopify/insert")
    @ResponseBody
    public String insertShopify(HttpSession session) {
        // t7-store
        // croodseng
        // String URI
        // ="https://"+API_KEY+":"+PASSWORD+"@croodseng.myshopify.com/admin/products.json";
        String input = "";
        input = "\"{\"product\": {" + "\"title\": \"Burton Custom Freestyle 151\","
                + "\"body_html\": \"<strong>Good snowboard!</strong>\"," + "\"vendor\": \"Burton\","
                + "\"product_type\": \"Snowboard\","
                + "\"tags\": \"Barnes & Noble, John's Fav, &quot;Big Air&quot;\"}}";

        input = "{\"product\": {\"title\": \"Burton Custom Freestyle 15111\",\"body_html\": \"<strong>Good snowboard!</strong>\",\"vendor\": \"Burton\",\"product_type\": \"Snowboard\",\"tags\": \"Urvich Mevada\"}}";

        // send request and parse result
        /*
         * ResponseEntity<String> response = restTemplate .exchange(
         * "https://723d3227dc653f80a8e4beb87fadb693:57349cecfe67899bdf44ac38683730b6@croodseng.myshopify.com/admin/products.json"
         * , HttpMethod.POST, entity, String.class);
         */

        /*
         * RestTemplate restTemplate = new RestTemplate(); //log.info(MediaType.TEXT_);
         *
         * HttpHeaders headers = new HttpHeaders();
         * headers.set("X-Shopify-Access-Token", PASSWORD);
         * headers.setContentType(MediaType.APPLICATION_JSON);
         * headers.setAccept(Arrays.asList(MediaType.ALL));
         *
         * //headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
         * HttpEntity<String> entity = new HttpEntity<String>(input, headers);
         *
         * return restTemplate.exchange(URI, HttpMethod.POST, entity,
         * String.class).getBody();
         */

        /*
         * List<ProductVo> productVos= (List<ProductVo>)
         * productService.productDetail(7L,Long.parseLong(session.getAttribute(
         * "companyId").toString())); ProductVo product = productVos.get(0); ModelMapper
         * modelMapper = new ModelMapper(); ShopifyProduct shopifyProduct1 =
         * modelMapper.map(product, ShopifyProduct.class);
         */

        // ModelMapper modelMapper = new ModelMapper();

        /*
         * org.modelmapper.Converter<ProductVo, ShopifyProduct> converter =new
         * org.modelmapper.Converter<ProductVo, ShopifyProduct>() {
         *
         * @Override public ShopifyProduct convert(MappingContext<ProductVo,
         * ShopifyProduct> arg0) { log.info(arg0.getSource().getTaxIncluded());
         * log.info(arg0.getDestination().getProductVarientsVos());
         *
         * arg0.getDestination().getProductVarientsVos().forEach(x ->
         * x.setTaxable(arg0.getSource().getTaxIncluded() == 1 ? true : false));
         *
         * return arg0.getDestination(); } };
         *
         * modelMapper.addConverter(converter);
         *
         * ShopifyProduct shopifyProduct = modelMapper.map(product,
         * ShopifyProduct.class);
         */

        String data1 = "{\"product\":{\"id\":1937308123203,\"title\":\"Mi Note 5 Pro\",\"body_html\":\"\",\"vendor\":\"croodseng\",\"product_type\":\"\",\"created_at\":\"2018-12-05T08:18:55-05:00\",\"handle\":\"mi-note-5-pro\",\"updated_at\":\"2018-12-05T08:18:55-05:00\",\"published_at\":\"2018-12-05T08:18:55-05:00\",\"template_suffix\":null,\"tags\":\"\",\"published_scope\":\"web\",\"admin_graphql_api_id\":\"gid:\\/\\/shopify\\/Product\\/1937308123203\",\"variants\":[{\"id\":18068145635395,\"product_id\":1937308123203,\"title\":\"White\",\"price\":\"9.00\",\"sku\":\"\",\"position\":1,\"inventory_policy\":\"continue\",\"compare_at_price\":\"99.00\",\"fulfillment_service\":\"manual\",\"inventory_management\":\"shopify\",\"option1\":\"White\",\"option2\":null,\"option3\":null,\"created_at\":\"2018-12-05T08:18:55-05:00\",\"updated_at\":\"2018-12-05T08:18:55-05:00\",\"taxable\":false,\"barcode\":null,\"grams\":9000,\"image_id\":null,\"weight\":9.0,\"weight_unit\":\"kg\",\"inventory_item_id\":18328661655619,\"inventory_quantity\":0,\"old_inventory_quantity\":0,\"requires_shipping\":true,\"admin_graphql_api_id\":\"gid:\\/\\/shopify\\/ProductVariant\\/18068145635395\"},{\"id\":18068145668163,\"product_id\":1937308123203,\"title\":\"Black\",\"price\":\"9.00\",\"sku\":\"\",\"position\":2,\"inventory_policy\":\"continue\",\"compare_at_price\":\"99.00\",\"fulfillment_service\":\"manual\",\"inventory_management\":\"shopify\",\"option1\":\"Black\",\"option2\":null,\"option3\":null,\"created_at\":\"2018-12-05T08:18:55-05:00\",\"updated_at\":\"2018-12-05T08:18:55-05:00\",\"taxable\":false,\"barcode\":null,\"grams\":9000,\"image_id\":null,\"weight\":9.0,\"weight_unit\":\"kg\",\"inventory_item_id\":18328661688387,\"inventory_quantity\":0,\"old_inventory_quantity\":0,\"requires_shipping\":true,\"admin_graphql_api_id\":\"gid:\\/\\/shopify\\/ProductVariant\\/18068145668163\"},{\"id\":18068145766467,\"product_id\":1937308123203,\"title\":\"Red\",\"price\":\"9.00\",\"sku\":\"\",\"position\":3,\"inventory_policy\":\"continue\",\"compare_at_price\":\"99.00\",\"fulfillment_service\":\"manual\",\"inventory_management\":\"shopify\",\"option1\":\"Red\",\"option2\":null,\"option3\":null,\"created_at\":\"2018-12-05T08:18:55-05:00\",\"updated_at\":\"2018-12-05T08:18:55-05:00\",\"taxable\":false,\"barcode\":null,\"grams\":9000,\"image_id\":null,\"weight\":9.0,\"weight_unit\":\"kg\",\"inventory_item_id\":18328661721155,\"inventory_quantity\":0,\"old_inventory_quantity\":0,\"requires_shipping\":true,\"admin_graphql_api_id\":\"gid:\\/\\/shopify\\/ProductVariant\\/18068145766467\"}],\"options\":[{\"id\":2647303684163,\"product_id\":1937308123203,\"name\":\"Color\",\"position\":1,\"values\":[\"White\",\"Black\",\"Red\"]}],\"images\":[],\"image\":null}}";
        // mapper.configure(DeserializationFeature.UNWRAP_ROOT_VALUE, true);
        ModelMapper modelMapper = new ModelMapper();
        // MappingIterator<ShopifyProduct> shopifyProduct;

        ObjectWriter writer;
        ObjectMapper mapper = new ObjectMapper();

        try {

            // JsonNode jsonNode=mapper.readTree(data1);

            // log.info(jsonNode.get("product").get("id"));
            // JsonNode orderNode = new ObjectMapper().readTree(data1);
            // JsonNode orderNode = new ObjectMapper().readValue(data1, JsonNode.class);

            // orderNode = new ObjectMapper().readValue(orderNode.get("product").toString(),
            // JsonNode.class);
            /*
             * JsonParser jsonParser = mapper.getJsonFactory().createJsonParser(data1);
             * JsonNode tree = jsonParser.readValueAsTree(); // Do stuff to the tree
             * shopifyProduct= mapper.readValues(jsonParser, ShopifyProduct.class);
             *
             * log.info(shopifyProduct.next().getShopifySourceId());
             */

            JsonNode jsonNode = mapper.readTree(data1);
            JsonNode root = jsonNode.path("product");
            ObjectReader objectReader = mapper.readerFor(new TypeReference<ShopifyProduct>() {
            });
            ShopifyProduct shopifyProduct = objectReader.readValue(root);
            // log.info(orderNode.get("product").get("id"));
            // shopifyProduct = mapper.readValue(data1, ShopifyProduct.class);
            shopifyProduct.getProductVarientsVos().stream().forEach(System.out::println);

            log.info("sizeee==" + shopifyProduct.getProductVarientsVos().get(0).getShopifyVariantSourceId());
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();

            return e.getMessage();
        }

        return null;

    }

    @RequestMapping("/{id}/json")
    @ResponseBody
    public List<ProductVo> viewJSON(@PathVariable Long id, HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        ProductVo product = new ProductVo();
        product.setProductId(id);
        List<ProductVo> productVos = productService.productDetail(id,
                Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
        if (CollectionUtils.isNotEmpty(productVos)) {
            productVos.get(0).getProductVarientsVos().removeIf(c -> c.getIsDeleted() == 1);
            log.info("Size=" + productVos.get(0).getProductVarientsVos().size());
            productVos.get(0).setProductAttributeVos(null);
            productVos.get(0).getProductVarientsVos().forEach(v -> v.setProductVo(null));

            productVos.get(0).getProductVarientsVos().forEach(t -> {
                t.setAvailableQty(stockMasterRepository.findproductVariantQty(
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Long.parseLong(session.getAttribute("branchId").toString()), t.getProductVarientId(),
                        session.getAttribute("financialYear").toString()));
            });
            productVos.forEach(x -> {
                x.getCategoryVo().setCategoryVo(null);
                x.getBrandVo().setBrandVo(null);
            });
        }

        return productVos;
    }

    @PostMapping("/purchase/{id}/{contactId}/json")
    @ResponseBody
    public ProductVarientsVo viewVariantJSON(@PathVariable("id") Long productVarientId,
                                             @RequestParam Map<String, String> allRequestParams, @PathVariable("contactId") long contactId,
                                             @RequestParam(value = "batchrequired", required = false, defaultValue = "0") String batchrequired,
                                             HttpSession session) throws CloneNotSupportedException {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        CompanySettingVo setting = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        // ProductVarientsVo pv =
        // productVariantRepository.findByProductVarientId(productVarientId);
        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
        ProductVarientsVo pv = productVariantRepository.findByProductVarientIdAndCompanyIdAndIsDeleted(productVarientId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
        if (pv != null) {
            productVarientsVo = (ProductVarientsVo) pv.clone();
            productVarientsVo.setMultiItemCode(productVarientsVo.getItemCode());
            productVarientsVo.getProductVo().setProductVarientsVos(null);
            productVarientsVo.getProductVo().setProductAttributeVos(null);

            PurchaseItemVo purchaseItemVo = purchaseItemRepository.findByBranchIdProductVarientIdAndContactId(branchId,
                    productVarientId, contactId);
            String code = purchaseItemRepository.getsuppilercodefrompurchaseitem(branchId, productVarientId,
                    Constant.PURCHASE_BILL);
            // System.err.println("code---"+code);
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
            // System.err.println("s----"+s);
            if (s == null) {
                s = "0";
            }
            productVarientsVo.setSupplierCode(code);
            productVarientsVo.setDiscount2(0.0);
            productVarientsVo.setDiscountType2("percentage");

            if (purchaseItemVo != null) {
                // System.err.println("purchaseItemVo null---");
                productVarientsVo.setDiscount(purchaseItemVo.getDiscount());
                productVarientsVo.setDiscountType(purchaseItemVo.getDiscountType());
                productVarientsVo.setDiscount2(purchaseItemVo.getDiscount2());
                productVarientsVo.setDiscountType2(purchaseItemVo.getDiscountType2());

                if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                    productVarientsVo.setPurchasePrice(
                            purchaseItemVo.getPrice() + (purchaseItemVo.getTaxAmount() / purchaseItemVo.getQty()));
                } else {
                    productVarientsVo.setPurchasePrice(purchaseItemVo.getPrice());
                }
                productVarientsVo.setMrp(purchaseItemVo.getMrp());
                productVarientsVo.setSellingPrice(purchaseItemVo.getSellingPrice());
            } else {
                Map<String, String> piv = purchaseItemRepository.findByProductVarientId(productVarientId,
                        Long.parseLong(session.getAttribute("branchId").toString()));
                if (piv.get("mrp") != null) {
                    productVarientsVo.setMrp(Double.parseDouble(piv.get("mrp")));
                    if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                        productVarientsVo.setPurchasePrice(Double.parseDouble(piv.get("price"))
                                + (Double.parseDouble(piv.get("tax_amount")) / Double.parseDouble(piv.get("qty"))));
                    } else {
                        productVarientsVo.setPurchasePrice(Double.parseDouble(piv.get("price")));
                    }
                }
                productVarientsVo.setDiscount(productVarientsVo.getDiscount());
                productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
            }

            if (batchrequired.equals("1")) {
                List<StockMasterDTOForDebitNote> masterVos = stockMasterRepository.findByProductBatch(productVarientId,
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        session.getAttribute("financialYear").toString());
                productVarientsVo.setStockMasterDTOForDebitNote(masterVos);
            }

            productVarientsVo.setAvailableQty(
                    s + " " + productVarientsVo.getProductVo().getUnitOfMeasurementVo().getMeasurementCode());

            if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
            }
            if (productVarientsVo.getProductVo().getBrandVo() != null) {
                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            }

            String master = poQunatityMasterService.getpoqty(productVarientsVo.getProductVo().getProductId(),
                    Long.parseLong(session.getAttribute("branchId").toString()));

            try {
                if (allRequestParams.get("purchaseType") != null && setting != null && master != null
                        && allRequestParams.get("purchaseType").equalsIgnoreCase("order")) {
                    productVarientsVo.setQty(Double.parseDouble(master) - Double.parseDouble(s.toString()));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                StockMasterVo stockMasterVo = stockMasterService
                        .findByProductVarientIdAndBranchIdAndYearIntervalOrderByStockIdDesc(
                                productVarientsVo.getProductVarientId(),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                session.getAttribute("financialYear").toString());
                if (stockMasterVo != null) {
                    productVarientsVo.setStockMaster(stockMasterVo);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return productVarientsVo;
    }

    @RequestMapping("/variant/{id}/updatePrice")
    @ResponseBody
    public String viewVariantpdatePrice(@PathVariable Long id, @RequestParam("mrp") double mrp,
                                        @RequestParam("retiler") double retiler, HttpSession session) {

        // ProductVarientsVo productVarientsVo =
        // productService.findByProductVarientId(id);
        List<ProductVarientPriceDTO> productVarientPriceList = new ArrayList<>();
        try {
            productVarientPriceList = productService.findProductVarientPriceDetails(0, id);
        } catch (Exception e) {
            e.printStackTrace();
        }

        ProductVarientsVo productVarientsVo = productVariantRepository.findByProductVarientIdAndCompanyId(id,
                Long.parseLong(session.getAttribute("companyId").toString()));
        if (productVarientsVo != null) {
            long productId = productVarientsVo.getProductVo().getProductId();
            if (productVarientsVo.getLandingCost() <= mrp) {
                productVarientsVo.setMrp(mrp);
                if (productVarientsVo.getDiscountType().equalsIgnoreCase("amount")) {
                    productVarientsVo.setSellingPrice(productVarientsVo.getMrp() - productVarientsVo.getDiscount());
                } else {
                    productVarientsVo.setSellingPrice(productVarientsVo.getMrp()
                            - (productVarientsVo.getMrp() * productVarientsVo.getDiscount() / 100));
                }
                productVarientsVo.setRetailerMargin(mrp - productVarientsVo.getLandingCost());
                productVarientsVo.setRetailerMarginType("amount");
                // int updatecount=
                // stockMasterRepository.updateVarientWiseupdate(productVarientsVo.getProductVarientId(),
                // productVarientsVo.getMrp(),Long.parseLong(session.getAttribute("branchId").toString()));
                //// log.info("updatecount::::"+updatecount);

                try {
                    productVariantRepository.save(productVarientsVo);
                    int result = productService.updateMrpInProduct(productId, mrp);
                    // log.warning("updateMrpInProduct----->"+result);
                    try {
                        ProductVo productVo = productService.findProductByProductVarientId(id);
                        productPriceActivityLog(productVarientPriceList, productVo, session);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    return "success";
                } catch (Exception e) {
                    return "fail";
                }
            } else {
                return "Landing Cost is smaller then MRP";
            }
        } else {
            return "fail";
        }

    }

    @RequestMapping("/variant/{id}/json")
    @ResponseBody
    public ProductVarientsVo getProductVariantId(HttpSession session, @PathVariable("id") String id,
                                                 @RequestParam(value = "salesType", defaultValue = "", required = false) String salesType,
                                                 @RequestParam(value = "type", required = false, defaultValue = "") String type) {

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        long variantId = 0;
        ProductVarientsVo productVarientsVos = new ProductVarientsVo();
        if (StringUtils.isNotBlank(id)) {
            try {
                // log.warning("id >>"+id);
                variantId = Long.parseLong(id);
                // log.warning("variantId"+variantId);
                ProductVarientsVo pv = productVariantRepository.findByProductVarientIdAndCompanyIdAndIsDeleted(
                        variantId, Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId,
                        clusterId);
                if (pv != null) {
                    try {
                        productVarientsVos = (ProductVarientsVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                    if (productVarientsVos != null) {
                        productVarientsVos.setMultiItemCode(productVarientsVos.getItemCode());
                        List<StockMasterVo> stockMasterVos = new ArrayList<>();
                        if (StringUtils.isBlank(type)) {
                            stockMasterVos = stockMasterService
                                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalWithBatchCheck(
                                            productVarientsVos.getProductVarientId(),
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            session.getAttribute("financialYear").toString(),
                                            Long.parseLong(session.getAttribute("companyId").toString()), salesType, 0,
                                            0);
                        } else {
                            stockMasterVos = stockMasterService
                                    .findByProductVarientsVoProductVarientIdAndBranchIdAndYearIntervalOrderBycreatedonDesc(
                                            productVarientsVos.getProductVarientId(),
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            session.getAttribute("financialYear").toString());
                        }

                        if (stockMasterVos != null) {
                            productVarientsVos.setStockMasterVos(stockMasterVos);
                        }
                        productVarientsVos.getProductVo().setProductVarientsVos(null);
                        productVarientsVos.getProductVo().setProductAttributeVos(null);
                        productVarientsVos.getProductVo().getCategoryVo().setCategoryVo(null);
                        productVarientsVos.getProductVo().getBrandVo().setBrandVo(null);
                    }

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        return productVarientsVos;

    }

    @RequestMapping("/variant/json")
    @ResponseBody
    public List<ProductVarientsVo> getProductVariantList(HttpSession session) {

        List<ProductVarientsVo> productVarientsVos = productService
                .findByCompanyIdAndProductVoIsDeleted(Long.parseLong(session.getAttribute("companyId").toString()), 0);

        productVarientsVos.forEach(p -> {
            p.getProductVo().setProductVarientsVos(null);
            p.getProductVo().setProductAttributeVos(null);
            p.getProductVo().getCategoryVo().setCategoryVo(null);
            p.getProductVo().getBrandVo().setBrandVo(null);
        });

        return productVarientsVos;
    }

    @RequestMapping("/variantDiscount/json")
    @ResponseBody
    public List<DTOProductVarientsVo> getProductVariantListDiscount(HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<DTOProductVarientsVo> productVarientsVos = productService.findByCompanyIdAndProductVoIsDeletedForDiscount(
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);

        return productVarientsVos;
    }

    @GetMapping("/variant/select/json")
    @ResponseBody
    public String productVariantMultiSelectJSON(@RequestParam Map<String, String> allRequestParams,
                                                HttpSession session) {
        JSONArray jsonArray = new JSONArray();
        jsonObject = new JSONObject();

        List<ProductVarientsVo> productVariantVos = productService.findProductVariantsWithPackage(
                allRequestParams.get("q"), Long.parseLong(session.getAttribute("companyId").toString()));
        log.info("-=-=--=>>>" + productVariantVos.size());
        productVariantVos.forEach(p -> {
            JSONObject json1 = new JSONObject();
            try {
                json1.put("id", p.getProductVarientId());
                json1.put("text",
                        p.getProductVo().getName() + " " + (p.getVarientName() == null ? "" : p.getVarientName()));
            } catch (Exception e) {

            }
            jsonArray.add(json1);
        });
        try {
            jsonObject.put("total_count", productVariantVos.size());
            jsonObject.put("incomplete_results", true);
            jsonObject.put("items", jsonArray);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonObject.toString();
    }

    /**
     * used in purchase by barcode search
     *
     * @param barcode
     * @param contactId
     * @param stockrequired
     * @param batchrequired
     * @param session
     * @return
     * @throws CloneNotSupportedException
     */
    @PostMapping("/purchase/barcode/{barcode}/{contactId}/json")
    @ResponseBody
    public List<ProductMultiBarcodeVo> viewVariantByBarcodeJSON(@PathVariable String barcode,
                                                                @PathVariable("contactId") long contactId,
                                                                @RequestParam(required = false, value = "stockrequired", defaultValue = "0") String stockrequired,
                                                                @RequestParam(required = false, value = "batchrequired", defaultValue = "0") String batchrequired,
                                                                HttpSession session) throws CloneNotSupportedException {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<ProductMultiBarcodeVo> productMultiBarcodeVos = productService.findMultiBarcodeByItemCodeAndCompanyIdAndIsDeleted(barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);

        List<ProductMultiBarcodeVo> productMultiBarcodeVoList = new ArrayList<>();

        if (!productMultiBarcodeVos.isEmpty()) {
            productMultiBarcodeVos.forEach(pv -> {
                ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                if (productMultiBarcodeVo != null) {
                    try {
                        productMultiBarcodeVo = (ProductMultiBarcodeVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                }

                if (productMultiBarcodeVo == null) {

                } else {
                    String s = stockMasterRepository.findProductMultiBarcodeAndProductVarientQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()), productMultiBarcodeVo.getProductVarientId(),
                            pv.getProductMultiBarcodeId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
                    PurchaseItemVo purchaseItemVo = purchaseItemRepository.findByBranchIdProductVarientIdAndProductMultBarcodeAndContactId(
                            branchId, productMultiBarcodeVo.getProductVarientId(), productMultiBarcodeVo.getProductMultiBarcodeId(), contactId);

                    if (purchaseItemVo != null) {
                        Optional<ProductVarientsVo> optionalProductVarientsVo = productService.getProductVarientVoById(productMultiBarcodeVo.getProductVarientId());
                        if (optionalProductVarientsVo.isPresent()) {
                            Optional<ProductVo> productVoOptional = productService.getProductVoById(optionalProductVarientsVo.get().getProductVo().getProductId());
                            if (productVoOptional.isPresent())
                                productMultiBarcodeVo.setProductVo(productVoOptional.get());
                        }
                        FitVo fitVo = fitPackingService.findByFitIdAndIsDeleted(productMultiBarcodeVo.getFitVo().getFitId(), 0);
                        PackingVo packingVo = fitPackingService.findByPackingIdAndIsDeleted(productMultiBarcodeVo.getPackingVo().getPackingId(), 0);

                        productMultiBarcodeVo.setFitVo(fitVo);
                        productMultiBarcodeVo.setPackingVo(packingVo);
                        productMultiBarcodeVo.setTaxAmount(purchaseItemVo.getTaxAmount());

                        if (productMultiBarcodeVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                            productMultiBarcodeVo.setStdRate(purchaseItemVo.getPrice()
                                    + (purchaseItemVo.getTaxAmount() / purchaseItemVo.getQty()));
                        } else {
                            productMultiBarcodeVo.setStdRate(purchaseItemVo.getPrice());
                        }
                        productMultiBarcodeVo.setMrp(purchaseItemVo.getMrp());
                    }

                    if (batchrequired.equals("1")) {
                        List<StockMasterDTOForDebitNote> masterVos = stockMasterRepository.findByProductBatchAndBarcode(
                                productMultiBarcodeVo.getProductVarientId(), productMultiBarcodeVo.getProductMultiBarcodeId(),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                session.getAttribute("financialYear").toString());
                        productMultiBarcodeVo.setStockMasterDTOForDebitNote(masterVos);
                    }
                    try {
                        // log.info("stockrequired:::"+stockrequired);
                        if (stockrequired.equals("0")) {
                            List<StockMasterVo> stockMasterVos = stockMasterService
                                    .findByProductVarientIdAndProductMultiBarcodeIdAndCompanyIdAndYearInterval(
                                            productMultiBarcodeVo.getProductVarientId(), productMultiBarcodeVo.getProductMultiBarcodeId(),
                                            Long.parseLong(session.getAttribute("companyId").toString()),
                                            session.getAttribute("financialYear").toString());
                            if (stockMasterVos != null) {
                                productMultiBarcodeVo.setStockMasterVos(stockMasterVos);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    productMultiBarcodeVo.setAvailableQty(s);
                    try {
                        StockMasterVo stockMasterVo = stockMasterRepository
                                .findByProductVarientIdAndProductMultiBarcodeIdAndBranchIdAndYearIntervalAndIsDisableOrderByStockIdDesc(
                                        productMultiBarcodeVo.getProductVarientId(), productMultiBarcodeVo.getProductMultiBarcodeId(),
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        session.getAttribute("financialYear").toString());
                        if (stockMasterVo != null) {
                            productMultiBarcodeVo.setStockMaster(stockMasterVo);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    productMultiBarcodeVoList.add(productMultiBarcodeVo);
                }
            });
        } else {

        }
        return productMultiBarcodeVoList;

    }

    @PostMapping("/purchase/supplier/{barcode}/{contactId}/json")
    @ResponseBody
    public List<ProductVarientNamedDTO> viewVariantByBarcodeJSONInSupplierWiseMapping(@PathVariable String barcode,
                                                                                      @RequestParam Map<String, String> allRequestParams, @PathVariable("contactId") long contactId,
                                                                                      @RequestParam(required = false, value = "batchrequired", defaultValue = "0") String batchrequired,
                                                                                      HttpSession session) throws CloneNotSupportedException {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        CompanySettingVo setting = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWSUPPLIERWISEPRODUCTMAPPING);
        List<ProductVarientsVo> productVariantVos = productService.getContactwiseProductForPurchase(contactId, barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), "1");
        if (setting != null && setting.getValue() == 1 && productVariantVos.size() <= 0) {
            log.info("setting not");
//        ProductVarientsVo pv = productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
//                Long.parseLong(session.getAttribute("companyId").toString()), 0);
            // ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            List<ProductVarientNamedDTO> varientsVos = new ArrayList<ProductVarientNamedDTO>();
            return varientsVos;
        } else {

            List<String> producttypelist = new ArrayList<>();
            producttypelist = productTypeRepository.findListOfData();

            List<ProductVarientsVo> varientsList = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(
                    barcode, Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                    producttypelist);

            // List<ProductVarientsVo> varientsVos = new ArrayList<ProductVarientsVo>();
            List<ProductVarientNamedDTO> varientsVos = new ArrayList<ProductVarientNamedDTO>();
            if (!varientsList.isEmpty()) {
                varientsList.forEach(pv -> {
                    ProductVarientsVo varientsVo = new ProductVarientsVo();
                    if (varientsVo != null) {
                        ////// log.info("pv.getSellingPrice()"+productVarientsVo.getSellingPrice());
                        try {
                            varientsVo = (ProductVarientsVo) pv.clone();
                        } catch (CloneNotSupportedException e) {
                            e.printStackTrace();
                        }
                        ////// log.info("productVarientsVo"+productVarientsVo.getSellingPrice());
                    }

                    if (varientsVo == null) {
                        // return null;
                    } else {

                        ModelMapper mapper = new ModelMapper();
                        // mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.LOOSE);
                        mapper.getConfiguration().setFieldMatchingEnabled(true)
                                .setMatchingStrategy(MatchingStrategies.STRICT);
                        ProductVarientNamedDTO productVarientsVo = mapper.map(varientsVo, ProductVarientNamedDTO.class);
                        log.info("Output productVarientNamedDTO DTO : " + productVarientsVo.toString());

                        String s = stockMasterRepository.findproductVariantQty(
                                Long.parseLong(session.getAttribute("companyId").toString()),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                productVarientsVo.getProductVarientId(),
                                session.getAttribute("financialYear").toString());
                        if (s == null) {
                            s = "0";
                        }
                        if (batchrequired.equals("1")) {
                            List<StockMasterDTOForDebitNote> masterVos = stockMasterRepository.findByProductBatch(
                                    productVarientsVo.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString());
                            productVarientsVo.setStockMasterDTOForDebitNote(masterVos);
                        }
                        PurchaseItemVo purchaseItemVo = purchaseItemRepository
                                .findByBranchIdProductVarientIdAndContactId(branchId,
                                        productVarientsVo.getProductVarientId(), contactId);
//                        productVarientsVo.setDiscount(0.0);
//                        productVarientsVo.setDiscountType("percentage");
                        productVarientsVo.setDiscount2(0.0);
                        productVarientsVo.setDiscountType2("percentage");

                        if (purchaseItemVo != null) {
                            // log.info("Purcchase Item Vo Found With Discount:" +
                            // purchaseItemVo.getDiscount());
                            productVarientsVo.setDiscount(purchaseItemVo.getDiscount());
                            productVarientsVo.setDiscountType(purchaseItemVo.getDiscountType());
                            productVarientsVo.setDiscount2(purchaseItemVo.getDiscount2());
                            productVarientsVo.setDiscountType2(purchaseItemVo.getDiscountType2());

                            if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                                productVarientsVo.setPurchasePrice(purchaseItemVo.getPrice()
                                        + (purchaseItemVo.getTaxAmount() / purchaseItemVo.getQty()));
                            } else {
                                productVarientsVo.setPurchasePrice(purchaseItemVo.getPrice());
                            }
                            productVarientsVo.setMrp(purchaseItemVo.getMrp());
                        } else {
//            				PurchaseItemVo piv = purchaseItemRepository.findByBranchIdProductVarientId(branchId,
//            						productVarientsVo.getProductVarientId());
//            				log.info("heeer9");
//            				if (piv != null) {
//            					productVarientsVo.setMrp(piv.getMrp());
//            					if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
//            						productVarientsVo.setPurchasePrice(piv.getPrice() + (piv.getTaxAmount() / piv.getQty()));
//            					} else {
//            						productVarientsVo.setPurchasePrice(piv.getPrice());
//            					}
//            				}
                            //// System.err.println("Purchase Price:" +
                            //// productVarientsVo.getPurchasePrice());
                            productVarientsVo.setDiscount(productVarientsVo.getDiscount());
                            productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
                        }
                        List<StockMasterVo> stockMasterVos = stockMasterService
                                .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                                        productVarientsVo.getProductVarientId(),
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        session.getAttribute("financialYear").toString());
                        if (stockMasterVos != null) {
                            productVarientsVo.setStockMasterVos(stockMasterVos);
                        }
                        productVarientsVo.getProductVo().setProductVarientsVos(null);
//                        productVarientsVo.getProductVo().setProductAttributeVos(null);
//                        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//                        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                        productVarientsVo.setAvailableQty(s);
                        CompanySettingVo setting1 = companySettingService.findByBranchIdAndType(
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                Constant.ALLOWSUPPLIERWISEPRODUCTMAPPING);
                        POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(
                                productVarientsVo.getProductVo().getProductId(),
                                Long.parseLong(session.getAttribute("branchId").toString()));
                        if (setting1 != null && master != null
                                && allRequestParams.get("purchaseType").equalsIgnoreCase("order")) {
                            productVarientsVo.setQty(master.getPoQuantity() - Double.parseDouble(s));
                        }
                        // return productVarientsVo;
                        try {
                            StockMasterVo stockMasterVo = stockMasterService
                                    .findByProductVarientIdAndBranchIdAndYearIntervalOrderByStockIdDesc(
                                            productVarientsVo.getProductVarientId(),
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            session.getAttribute("financialYear").toString());
                            if (stockMasterVo != null) {
                                productVarientsVo.setStockMaster(stockMasterVo);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        varientsVos.add(productVarientsVo);
                    }

                });
            }
            return varientsVos;

//    		List<ProductVarientsVo> list = productVariantRepository
//    				.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeletedAndProductVoActive(barcode,
//    						Long.parseLong(session.getAttribute("companyId").toString()), 0, 0);
//    		ProductVarientsVo productVarientsVo = null;
//    		if (list != null && list.size() > 0) {
//    			productVarientsVo = list.get(0);
//    		}

        }

    }

    /**
     * used in barcode search in opening stock inner house also
     *
     * @param barcode
     * @param session
     * @return
     * @throws CloneNotSupportedException
     */
    @PostMapping("/purchase/barcode/{barcode}/json")
    @ResponseBody
    public List<ProductMultiBarcodeVo> viewVariantByOnlyBarcodeJSON(@PathVariable String barcode, HttpSession session)
            throws CloneNotSupportedException {

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<String> producttypelist = new ArrayList<>();
        producttypelist = productTypeRepository.findListOfData();
        List<ProductMultiBarcodeVo> varientsList = productService.findMultiBarcodeByItemCodeAndCompanyIdAndIsDeleted(barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);

        List<ProductMultiBarcodeVo> productMultiBarcodeVos = new ArrayList<>();

        if (!varientsList.isEmpty()) {
            varientsList.forEach(pv -> {
                ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                if (productMultiBarcodeVo != null) {
                    ////// log.info("pv.getSellingPrice()"+productVarientsVo.getSellingPrice());
                    try {
                        productMultiBarcodeVo = (ProductMultiBarcodeVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                }

                if (productMultiBarcodeVo == null) {
                    // return null;
                } else {
                    String s = stockMasterRepository.findProductMultiBarcodeAndProductVarientQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            productMultiBarcodeVo.getProductVarientId(), productMultiBarcodeVo.getProductMultiBarcodeId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
                    PurchaseItemVo purchaseItemVo = purchaseItemRepository.findByBranchIdProductVarientIdAndProductMultBarcodeAndContactId(branchId,
                            productMultiBarcodeVo.getProductVarientId(), productMultiBarcodeVo.getProductMultiBarcodeId(), 0);
                    if (purchaseItemVo != null) {
                        Optional<ProductVarientsVo> optionalProductVarientsVo = productService.getProductVarientVoById(productMultiBarcodeVo.getProductVarientId());
                        if (optionalProductVarientsVo.isPresent()) {
                            Optional<ProductVo> productVoOptional = productService.getProductVoById(optionalProductVarientsVo.get().getProductVo().getProductId());
                            if (productVoOptional.isPresent())
                                productMultiBarcodeVo.setProductVo(productVoOptional.get());
                        }
                        FitVo fitVo = fitPackingService.findByFitIdAndIsDeleted(productMultiBarcodeVo.getFitVo().getFitId(), 0);
                        PackingVo packingVo = fitPackingService.findByPackingIdAndIsDeleted(productMultiBarcodeVo.getPackingVo().getPackingId(), 0);
                        productMultiBarcodeVo.setFitVo(fitVo);
                        productMultiBarcodeVo.setPackingVo(packingVo);
                        productMultiBarcodeVo.setTaxAmount(purchaseItemVo.getTaxAmount());

                        productMultiBarcodeVo.setMrp(purchaseItemVo.getMrp());
                        if (productMultiBarcodeVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                            productMultiBarcodeVo.setStdRate(purchaseItemVo.getPrice() + (purchaseItemVo.getTaxAmount() / purchaseItemVo.getQty()));
                        } else {
                            productMultiBarcodeVo.setStdRate(purchaseItemVo.getPrice());
                        }
                    }
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientIdAndProductMultiBarcodeIdAndCompanyIdAndYearInterval(
                                    productMultiBarcodeVo.getProductVarientId(), productMultiBarcodeVo.getProductMultiBarcodeId(),
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    session.getAttribute("financialYear").toString());
                    if (stockMasterVos != null) {
                        productMultiBarcodeVo.setStockMasterVos(stockMasterVos);
                    }

                    productMultiBarcodeVo.setAvailableQty(s);

                    productMultiBarcodeVos.add(productMultiBarcodeVo);
                }
            });
        }
        return productMultiBarcodeVos;

    }

    /**
     * used in opening stock barcode search and opening stock inner house also
     *
     * @param barcode
     * @param session
     * @return
     * @throws CloneNotSupportedException
     */
    @RequestMapping("/bytype/barcode/{barcode}/json")
    @ResponseBody
    public List<ProductVarientsVo> viewVariantByOnlyBarcodeForSpecificJSON(@PathVariable String barcode,
                                                                           @RequestParam(name = "isRaw", required = false, defaultValue = "0") String isRaw, HttpSession session)
            throws CloneNotSupportedException {
        List<String> productTpes = new ArrayList<>();
        if (StringUtils.equalsIgnoreCase(isRaw, "1")) {
            productTpes.add(Constant.Raw);
            productTpes.add(Constant.Packaging);
            productTpes.add(Constant.SemiFinished);
        } else {

            productTpes.add(Constant.Finished);
            productTpes.add(Constant.SemiFinished);
        }

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        List<ProductVarientsVo> productVarientsVos = productService
                .findByitemCodeIgnoreCaseAndCompanyIdAndIsDeletedAndProductVoActiveAndProductType(barcode,
                        Long.parseLong(session.getAttribute("companyId").toString()), 0, 0, productTpes);
        if (!productVarientsVos.isEmpty()) {
            productVarientsVos.forEach(productVarientsVo -> {

                if (productVarientsVo == null) {

                } else {
                    String s = stockMasterRepository.findproductVariantQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
//        	            productVarientsVo.setDiscount(0.0);
//        	            productVarientsVo.setDiscountType("percentage");
                    productVarientsVo.setDiscount2(0.0);
                    productVarientsVo.setDiscountType2("percentage");
                    PurchaseItemVo piv = purchaseItemRepository.findByBranchIdProductVarientId(branchId,
                            productVarientsVo.getProductVarientId());
                    if (piv != null) {
                        productVarientsVo.setMrp(piv.getMrp());
                        if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                            productVarientsVo.setPurchasePrice(piv.getPrice() + (piv.getTaxAmount() / piv.getQty()));
                        } else {
                            productVarientsVo.setPurchasePrice(piv.getPrice());
                        }
                    }
                    // System.err.println("Purchase Price:" + productVarientsVo.getPurchasePrice());
                    productVarientsVo.setDiscount(productVarientsVo.getDiscount());
                    productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                                    productVarientsVo.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    session.getAttribute("financialYear").toString());
                    if (stockMasterVos != null) {
                        productVarientsVo.setStockMasterVos(stockMasterVos);
                    }

                    productVarientsVo.getProductVo().setProductVarientsVos(null);
                    productVarientsVo.getProductVo().setProductAttributeVos(null);
//        	            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//        	            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                    }
                    if (productVarientsVo.getProductVo().getBrandVo() != null) {
                        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    }
                    productVarientsVo.setAvailableQty(s);
                    int allowNegativeStock = 0;
                    try {
                        allowNegativeStock = companySettingService
                                .findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.ALLOWNEGATIVESTOCK)
                                .getValue();
                        productVarientsVo.setAllowNegativeStock(allowNegativeStock);
                        //// System.err.println("allonegativestock.value in viewVariantByOnlyBarcodeJSON
                        //// is :"+allowNegativeStock);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // return productVarientsVo;
                }
            });
        }
        return productVarientsVos;

    }

    @RequestMapping("/pos/barcode/json")
    @ResponseBody
    public JSONArray viewBarcodeJSON(@RequestParam String barcode,
                                     @RequestParam(value = "iscallfromsales", defaultValue = "0", required = false) String iscallfromsales,
                                     HttpSession session) {
        JSONArray jsonArray;
        // BarcodeVo barcodeVo =
        // barcodeService.findByBarcodeAndBranchIdAndIsDeletedAndIsSell(barcode,
        // Long.parseLong(session.getAttribute("branchId").toString()), 0, 0);
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        List<String> producttypelist = new ArrayList<>();

        if (iscallfromsales.equals("0")) {
            producttypelist = productTypeRepository.findListOfData();
        } else {
            CompanySettingVo producttype = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);
            producttypelist.add("Finished");
            if (producttype.getValue() == 1) {
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLRAWPRODUCTS).getValue() == 0) {
                    producttypelist.add("Raw");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLSEMIFINISHEDPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("SemiFinished");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLPACKAGINGPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("Packaging");
                }
            } else {
                producttypelist = productTypeRepository.findListOfData();
            }
        }
        List<ProductVarientsVo> productVarientsVo = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(
                barcode, Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                producttypelist);

        if (productVarientsVo.size() <= 0) {
            return null;
        } else {

            jsonArray = new JSONArray();

            jsonObject = new JSONObject();
            jsonObject.put("name",
                    productVarientsVo.get(0).getProductVo().getName()
                            + (productVarientsVo.get(0).getVarientName() == null ? ""
                            : " " + productVarientsVo.get(0).getVarientName()));

            try {
                String s = productService.getDefaultImageSrcByProductId(
                        productVarientsVo.get(0).getProductVo().getProductId(), FILE_UPLOAD_SERVER);
                jsonObject.put("src", s);
            } catch (Exception e) {
                jsonObject.put("src", "");
            }
            jsonObject.put("product_varient_id", productVarientsVo.get(0).getProductVarientId());
            jsonObject.put("retailer_price", productVarientsVo.get(0).getRetailerPrice());
            jsonArray.add(jsonObject);

            return jsonArray;
        }

    }

    @RequestMapping("/sales/{productvariantId}/{batchNo}/{contactId}/{batchMrp}/json")
    @ResponseBody
    public ProductVarientsVo getVarientInfoByIdAndBatchNo(@PathVariable long productvariantId,
                                                          @PathVariable("batchNo") String batchNo, @PathVariable("contactId") long contactId,
                                                          @PathVariable("batchMrp") double batchMrp, HttpSession session) {

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        CompanySettingVo lastSalesPrice = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.LASTSALESMRP);

        ProductVarientsVo pv = productService.findByProductVarientIdAndCompanyIdAndIsDeleted(productvariantId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
        CompanySettingVo ALLOWCUSTOMERWISEPRODUCTMAPPING = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWCUSTOMERWISEPRODUCTMAPPING);
        try {
            productVarientsVo = (ProductVarientsVo) pv.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        if (productVarientsVo == null) {
            return null;
        } else {
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
            if (s == null) {
                s = "0";
            }
            productVarientsVo.setDiscount2(0.0);
            productVarientsVo.setDiscountType2("percentage");
            productVarientsVo.setOriginalMrp(productVarientsVo.getMrp());
            if (lastSalesPrice.getValue() == 1) {
                log.warning("LAST sales PRICE---->yes");
                if (contactId != 0) {
                    // get last transaction
                    SalesItemVo salesItemVo = saleItemRepository.findByBranchIdProductVarientIdAndBatchNoAndContactId(
                            branchId, productvariantId, batchNo, contactId);
                    if (salesItemVo != null) {
                        productVarientsVo.setDiscount(salesItemVo.getDiscount());
                        productVarientsVo.setDiscountType(salesItemVo.getDiscountType());
                        productVarientsVo.setDiscount2(salesItemVo.getDiscount2());
                        productVarientsVo.setDiscountType2(salesItemVo.getDiscountType2());
                        if (productVarientsVo.getProductVo().getTaxIncluded() == 1) {
                            try {
                                productVarientsVo.setMrp(
                                        salesItemVo.getPrice() + (salesItemVo.getTaxAmount() / salesItemVo.getQty()));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            productVarientsVo.setMrp(salesItemVo.getPrice());
                        }

                    } else {
//                        productVarientsVo.setDiscount(productVarientsVo.getDiscount());
//                        productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
                        productVarientsVo.setMrp(batchMrp);
                    }
                } else {
                    productVarientsVo.setMrp(batchMrp);
                }
            } else {
                productVarientsVo.setMrp(batchMrp);
            }

            // only for material creation module
            try {
                PurchaseItemVo piv = purchaseItemRepository.findByBranchIdProductVarientId(
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        productVarientsVo.getProductVarientId());
                if (piv != null) {
                    if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                        productVarientsVo.setLastPurchasePrice(piv.getPrice() + (piv.getTaxAmount() / piv.getQty()));
                    } else {
                        productVarientsVo.setLastPurchasePrice(piv.getPrice());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            List<StockMasterVo> stockMasterVos = stockMasterService
                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                            productVarientsVo.getProductVarientId(),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString());
            if (stockMasterVos != null) {
                productVarientsVo.setStockMasterVos(stockMasterVos);
            }

            productVarientsVo.getProductVo().setProductVarientsVos(null);
            productVarientsVo.getProductVo().setProductAttributeVos(null);
//            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
            }
            if (productVarientsVo.getProductVo().getBrandVo() != null) {
                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            }
            productVarientsVo.setAvailableQty(s);

            try {
                int finishproductmapping = 0;
                log.warning("finishproductmapping >>>>>>> : " + finishproductmapping);
                finishproductmapping = companySettingService
                        .findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()),
                                Constant.FINISHPRODUCTMAPPING)
                        .getValue();
                log.warning("finishproductmapping >>>>>>> : " + finishproductmapping);
                if (finishproductmapping == 1) {
                    productVarientsVo.setMappedProduct(productMappingRepository.getMappedProductWithstock(
                            productVarientsVo.getProductVo().getProductId(),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString()));
                    log.warning("Set Mapped product >>>>>>> : ");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            if (ALLOWCUSTOMERWISEPRODUCTMAPPING.getValue() == 1) {
                ContactProductVo product = contactProductRepository
                        .findByProductVarientIdAndContactId(productVarientsVo.getProductVarientId(), contactId);
                if (product != null) {
                    productVarientsVo.setMrp(product.getPrice());
                    productVarientsVo.setIsCustomerMapping(1);

                }
            }

            return productVarientsVo;
        }

    }

    @RequestMapping("/{id}/edit")
    public ModelAndView editProduct(@PathVariable Long id, HttpSession session) {
        ModelAndView mv = new ModelAndView();
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT) == 1) {
            long companyId = Long.parseLong(session.getAttribute("companyId").toString());
            long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
            int taxVal = 1;
            if (session.getAttribute("governmentTaxType").toString().equals(Constant.VAT)) {
                taxVal = 0;
            }
            String clusterId = session.getAttribute("clusterId").toString();

            List<ProductVo> productVos = productService.productDetail(id,
                    Long.parseLong(session.getAttribute("companyId").toString()), 1L, "0");
            if (productVos.size() == 0) {
                mv.setViewName(Constant.ERROR_PAGE_404);
                return mv;
            }
            if (productVos.get(0).getIsDeleted() == 1) {
                mv.setViewName("accessdenied/datanotavailbal");
            } else {
                productVos.get(0).getProductVarientsVos().removeIf(c -> c.getIsDeleted() == 1);
                productVos.get(0).getProductVarientsVos().forEach(x -> {

                    List<ProductMultiBarcodeVo> barcodeList = productMultiBarcodeRepository
                            .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(x.getProductVarientId(),
                                    companyId, 0, 1);
                    if (!barcodeList.isEmpty()) {
                        x.setProductMultiBarcodeId(barcodeList.get(0).getProductMultiBarcodeId());
                    }

                });

                productVos.forEach(item -> {
                    List<Long> fitIds = new ArrayList<>();
                    List<Long> packingIds = new ArrayList<>();

                    List<ProductVo> productVosList = productRepository.findByProductKeyAndItemCode(item.getProductKey(),
                            item.getItemCode(), Long.parseLong(session.getAttribute("companyId").toString()));
                    productVosList.forEach(product -> {
                        fitIds.add(product.getFitId());
                        packingIds.add(product.getPackingId());
                    });
                    Set<Long> uniqueFitIds = new HashSet<>(fitIds);
                    Set<Long> uniquePackingIds = new HashSet<>(packingIds);

                    List<Long> finalFitId = new ArrayList<>(uniqueFitIds);
                    List<Long> finalPackingId = new ArrayList<>(uniquePackingIds);
                    item.setFitIds(finalFitId);
                    item.setPackingIds(finalPackingId);
                });

                mv.addObject("categoryBrandPermissions",
                        MenuPermission.havePermission(session, Constant.CATEGORY_BRANDS, Constant.EDIT));
                mv.addObject("UomList", unitOfMeasurementService.findByCompanyIdAndIsDeleted(
                        Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId));
                mv.addObject("CategoryList", categoryService.findByCompanyId(
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
                mv.addObject("BrandList", brandService.findByCompanyId(
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
                mv.addObject("TaxList",
                        taxService.findByCompanyId(Long.parseLong(session.getAttribute("companyId").toString()),
                                merchantTypeId, clusterId, taxVal));
                mv.addObject("department", departmentService.findByCompanyId(
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
                mv.addObject("category", categoryService.findByCompanyId(
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
                mv.addObject("brand", brandService.findByCompanyId(
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
                mv.addObject("ProductOption", productService
                        .getProductOption(Long.parseLong(session.getAttribute("companyId").toString()), 0));
                mv.addObject("ProductDetails", productVos);
                mv.addObject(Constant.STOPUMOWISEDECIMAL, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.STOPUMOWISEDECIMAL));
                mv.addObject(Constant.MULTIBARCODE, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIBARCODE));
                mv.addObject(Constant.MULTIDUPLICATEBARCODE, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIDUPLICATEBARCODE));

                mv.addObject(Constant.FATOORAHQRCODE, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.FATOORAHQRCODE));
                mv.addObject(Constant.REATILERMARGIN, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.REATILERMARGIN));
                mv.addObject(Constant.WHOLESALERMARGIN, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.WHOLESALERMARGIN));
                mv.addObject(Constant.SELLINGMARGIN, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.SELLINGMARGIN));
                CompanySettingVo allowshopify = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.SHOPIFY);
                mv.addObject(Constant.PRODUCTTYPE, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE));
                mv.addObject(Constant.ALLOWB2B, companySettingService.findByBranchIdAndType(
                        Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWB2B));
                mv.addObject("productType", productTypeRepository.findAll());
                if (allowshopify != null) {
                    if (allowshopify.getValue() == 1) {
                        mv.addObject("shopifySetup", 1);
                    } else {
                        mv.addObject("shopifySetup", 0);
                    }
                    mv.addObject(Constant.MANAGEPOQUANTITYINPRODUCT,
                            companySettingService.findByBranchIdAndType(
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    Constant.MANAGEPOQUANTITYINPRODUCT));
                    POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(id,
                            Long.parseLong(session.getAttribute("branchId").toString()));
                    if (master != null) {
                        mv.addObject("poQuantityMaster", master);
                    }
                    /*
                     * ShopifyResponse responce=shopifyService.checkCredentials(shopifySetupVo);
                     * if(responce.isStatus()) { mv.addObject("shopifySetup",1); }
                     */
                }
                WoocommerceSetupVo woocommerceVo = woocommerceSetupService
                        .getWoocommerceDetail(Long.parseLong(session.getAttribute("companyId").toString()));
                mv.addObject("woocommerce", 0);
                if (woocommerceVo != null && woocommerceVo.getAllowWooCommerce() != 0) {
                    mv.addObject("woocommerce", 1);
                }
                mv.addObject(Constant.MEMBERSHIP, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP));
                mv.addObject(Constant.PURCHASECONVERSATION, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.PURCHASECONVERSATION));
                List<ConversationMasterSettingVo> purchaseConversationVos = conversationSettingRepository
                        .findByCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                mv.addObject("purchaseConversationVos", purchaseConversationVos);
                CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Constant.BARCODEGENRATESERIESWISE);
                if (barcodegenrateserieswise != null) {
                    if (barcodegenrateserieswise.getValue() == 1) {
                        CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEMANAGE);
                        if (barcodemanage != null && barcodemanage.getValue() == 2) {
                            try {
                                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODESERIES);
                                CompanySettingVo barcodeprefix = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODEPREFIX);
                                CompanySettingVo barcodelength = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODELENGTH);
                                mv.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
                                mv.addObject(Constant.BARCODEPREFIX, barcodeprefix.getAddValue());
                                mv.addObject(Constant.BARCODEGENRATESERIESWISE, 1);
                                mv.addObject(Constant.BARCODELENGTH, barcodelength.getValue());
                            } catch (Exception e) {
                                // TODO: handle exception
                            }

                        } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                            try {
                                CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODESERIES);
                                CompanySettingVo barcodeprefix = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODEPREFIX);
                                CompanySettingVo barcodelength = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODELENGTH);
                                mv.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
                                mv.addObject(Constant.BARCODEPREFIX, barcodeprefix.getAddValue());
                                mv.addObject(Constant.BARCODEGENRATESERIESWISE, 1);
                                mv.addObject(Constant.BARCODELENGTH, barcodelength.getValue());
                            } catch (Exception e) {
                                // TODO: handle exception
                            }
                        }
                    }
                }
                /*
                 * ShopifySetupVo shopifySetupVo = shopifyService
                 * .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()
                 * ), "shopify"); if (shopifySetupVo != null) { ShopifyResponse
                 * responce=shopifyService.checkCredentials(shopifySetupVo);
                 * if(responce.isStatus()) { mv.addObject("shopifySetup",1); } }
                 */
                mv.addObject(Constant.ALLPRICESHOW, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW));
                mv.setViewName("product/product-edit");
            }
        } else {
            mv.setViewName("accessdenied/accessdenied");
        }
        return mv;
    }

    @PostMapping("/{id}/delete")
    public ModelAndView deleteProduct(@PathVariable Long id, HttpSession session) {
        ModelAndView mv = new ModelAndView();
        int result = productService.countByProductIdAndCompanyIdAndIsDeleted(id,
                Long.parseLong(session.getAttribute("companyId").toString()), 0);
        if (result == 0) {
            mv.setViewName(Constant.ERROR_PAGE_404);
        } else {
            if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.DELETE) == 1) {
                try {
                    // wooCommerceService.deleteSingleProductFromWooCommerce(session, id);
                    wooService.deleteOneProductFromWooCommerce(session, id);
                    shopifyService.deleteSingleProductFromShopify(session, id);
                } catch (Exception e) {
                    e.printStackTrace();
                    // TODO: handle exception
                }
                productService.deleteProduct(id);
                try {
                    if (Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 0
                            || Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 1) {
                        typesenseService.deleteSingleProductInTypesense(id,
                                Long.parseLong(session.getAttribute("companyId").toString()));
                    }
                } catch (Exception e) {
                    // TODO: handle exception
                    e.printStackTrace();
                }
                mv.setViewName("redirect:/product/");
            } else {
                mv.setViewName("accessdenied/accessdenied");
            }
        }

        return mv;
    }

    @PostMapping("/{id}/deletefromwoocommerce")
    public ModelAndView deleteProductfromwoocommerce(@PathVariable Long id, HttpSession session) {
        ModelAndView mv = new ModelAndView();
        int result = productService.countByProductIdAndCompanyIdAndIsDeleted(id,
                Long.parseLong(session.getAttribute("companyId").toString()), 0);
        if (result == 0) {
            mv.setViewName(Constant.ERROR_PAGE_404);
        } else {
            if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.DELETE) == 1) {
                try {
                    wooService.deleteOneProductFromWooCommerce(session, id);
                } catch (Exception e) {
                    e.printStackTrace();
                    // TODO: handle exception
                }
                mv.setViewName("redirect:/product/" + id);
            } else {
                mv.setViewName("accessdenied/accessdenied");
            }
        }

        return mv;
    }

    @RequestMapping("/opening-stock")
    public ModelAndView openingStok(HttpSession session, HttpServletRequest request) {
        ModelAndView view = new ModelAndView("product/opening-stock/opening-stock");
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {
            // view.addObject("ProductList",productService.findByCompanyIdAndIsDeleted(Long.parseLong(session.getAttribute("companyId").toString()),
            // 0));
            long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
            String clusterId = session.getAttribute("clusterId").toString();
            int taxVal = 1;
            if (session.getAttribute("governmentTaxType").toString().equals(Constant.VAT)) {
                taxVal = 0;
            }
            view.addObject("allowproductcreateanywhere", companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLOWPRODUCTCREATEANYWHERE));
            view.addObject("UomList", unitOfMeasurementService.findByCompanyIdAndIsDeleted(
                    Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId));
            view.addObject("TaxList", taxService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId, taxVal));
            view.addObject("CategoryList", categoryService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            view.addObject("BrandList", brandService.findByCompanyId(
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));
            CompanySettingVo setting2 = companySettingService
                    .findByBranchIdAndType(Long.parseLong(session.getAttribute("branchId").toString()), "taxIncluded");
            view.addObject("taxIncluded", setting2.getValue());
            view.addObject("NEWPRODUCTPERMISSION",
                    MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT));
            CompanySettingVo setting1 = companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), "purchaseTaxIncluded");
            view.addObject("purchaseTaxIncluded", setting1.getValue());
            view.addObject(Constant.PRODUCTTYPE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE));
            view.addObject(Constant.MULTIBARCODE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIBARCODE));
            view.addObject(Constant.MULTIDUPLICATEBARCODE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIDUPLICATEBARCODE));
            view.addObject(Constant.EXPIRY, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.EXPIRY));
            try {
                CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Constant.BARCODEGENRATESERIESWISE);
                if (barcodegenrateserieswise != null) {
                    if (barcodegenrateserieswise.getValue() == 1) {
                        CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEMANAGE);
                        if (barcodemanage != null && barcodemanage.getValue() == 2) {
                            try {
                                CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODESERIES);
                                CompanySettingVo barcodeprefix = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODEPREFIX);
                                CompanySettingVo barcodelength = companySettingService.findByCompanyIdAndType(
                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                        Constant.BARCODELENGTH);
                                view.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
                                view.addObject(Constant.BARCODEPREFIX, barcodeprefix.getAddValue());
                                view.addObject(Constant.BARCODEGENRATESERIESWISE, 1);
                                view.addObject(Constant.BARCODELENGTH, barcodelength.getValue());
                            } catch (Exception e) {
                                // TODO: handle exception
                            }

                        } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                            try {
                                CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODESERIES);
                                CompanySettingVo barcodeprefix = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODEPREFIX);
                                CompanySettingVo barcodelength = companySettingService.findByBranchIdAndType(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        Constant.BARCODELENGTH);
                                view.addObject(Constant.BARCODESERIES, barcodeSeries.getAddValue());
                                view.addObject(Constant.BARCODEPREFIX, barcodeprefix.getAddValue());
                                view.addObject(Constant.BARCODEGENRATESERIESWISE, 1);
                                view.addObject(Constant.BARCODELENGTH, barcodelength.getValue());
                            } catch (Exception e) {
                                // TODO: handle exception
                            }
                        }
                    }
                }
                view.addObject(Constant.ALLPRICESHOW, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW));
                view.addObject(Constant.REATILERMARGIN, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.REATILERMARGIN));
                view.addObject(Constant.WHOLESALERMARGIN, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.WHOLESALERMARGIN));
                view.addObject(Constant.SELLINGMARGIN, companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.SELLINGMARGIN));

            } catch (Exception e) {
                e.printStackTrace();
            }

            view.addObject("productType", productTypeRepository.findAll());

            int allowNegativeStock = 0;
            allowNegativeStock = companySettingService
                    .findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()),
                            Constant.ALLOWNEGATIVESTOCK)
                    .getValue();
            view.addObject("allowNegativeStock", allowNegativeStock);

            CompanySettingVo settingVo = companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), Constant.SALESGARMENTDESIGN);

            List<String> producttypelist = new ArrayList<>();
            producttypelist.add("Finished");
            producttypelist.add("Raw");
            producttypelist.add("SemiFinished");
            producttypelist.add("Packaging");
            List<DTOProductFOROpeningStockJSON> dto = productService.findAllProductForJsonForOpeningStock(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    session.getAttribute("financialYear").toString(), merchantTypeId, clusterId, producttypelist);

            File directory = new File(request.getServletContext().getRealPath("/") + "json");
            if (!directory.exists()) {
                directory.mkdir();
            }
            try (FileWriter file = new FileWriter(
                    request.getServletContext().getRealPath("/") + "json" + System.getProperty("file.separator")
                            + "product" + Long.parseLong(session.getAttribute("companyId").toString()) + ".json")) {
                ObjectMapper Obj = new ObjectMapper();
                file.write(Obj.writeValueAsString(dto));
                file.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
            DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
            Date date = new Date();
            view.addObject("serverdate", dateFormat2.format(date));
            if (settingVo.getValue() == 1) {
                view.setViewName("product/opening-stock/opening-stock-garment");
            } else {
                view.setViewName("product/opening-stock/opening-stock");
            }

        } else {
            view.setViewName("accessdenied/accessdenied");
        }
        return view;
    }

    @PostMapping("/opening-stock/datatable")
    @ResponseBody
    public DataTableProductOpeningStockResponseDTO openingStockDatatable(@RequestParam Map<String, String> allRequestParams, HttpSession session) {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        String yearInterval = session.getAttribute("financialYear").toString();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String searchValue = "";
        if (allRequestParams.get("search.value") != null && !allRequestParams.get("search.value").equals("")) {
            searchValue = allRequestParams.get("search.value").toString();
        }
        Integer totalLength = stockTransactionService.countOpeningStockData("new", searchValue, branchId, yearInterval);
        int start = Integer.parseInt(allRequestParams.get("start"));
        String pageLength = allRequestParams.get("length");
        int length = 0, page = 0, offset = 0, draw = 1;
        if (!pageLength.equals("-1")) {
            length = Integer.parseInt(allRequestParams.get("length"));
            page = start / length;
            offset = page * length;
        } else {
            length = totalLength;
            offset = 0;
        }
        List<DataTableOpeningStockDTO> list = new ArrayList<>();
        list = stockTransactionService.getOpeningStockDataWithPagination(length, offset, searchValue, "new", branchId, yearInterval);
        double totalRecords = totalLength;
        DataTableProductOpeningStockResponseDTO dto = new DataTableProductOpeningStockResponseDTO();
        dto.setData(list);
        dto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
        dto.setError(null);
        dto.setRecordsFiltered((int) totalRecords);
        dto.setRecordsTotal((int) totalRecords);
        dto.setDataTableMetaDTO(
                new DataTableMetaDTO(page, (int) Math.ceil((totalRecords) / length), (int) length, (int) totalRecords));
        return dto;
    }

	/*@PostMapping("/opening-stock/datatable")
	@ResponseBody
	public DataTablesOutput<StockTransactionVo> stockTransactionDatatable(@Valid DataTablesInput input,
			@RequestParam Map<String, String> allRequestParams, HttpSession session)
			throws NumberFormatException, ParseException {

		// ContactVo contactVo=contactRepository.findByContactId(contactId);
		long branchId = Long.parseLong(session.getAttribute("branchId").toString());

		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

		Specification<StockTransactionVo> specification = new Specification<StockTransactionVo>() {

			@Override
			public Predicate toPredicate(Root<StockTransactionVo> root, CriteriaQuery<?> query,
					CriteriaBuilder criteriaBuilder) {
				List<Predicate> predicates = new ArrayList<Predicate>();
				predicates.add(criteriaBuilder.equal(root.get("type"), "new"));
				predicates.add(criteriaBuilder.equal(root.get("yearInterval"),
						session.getAttribute("financialYear").toString()));
				predicates.add(criteriaBuilder.equal(root.get("branchId"), branchId));
				query.orderBy(criteriaBuilder.desc(root.get("stockTransactionId")));
				*//*
     * try {
     * predicates.add(criteriaBuilder.between(root.get("stockTransactionDate"),
     * dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()),
     * dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString())));
     * } catch (ParseException e) { e.printStackTrace(); }
     *//*

				return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
			}
		};

		DataTablesOutput<StockTransactionVo> a = stockTransactionService.findAll(input, null, specification);

		a.getData().forEach(x -> {
			x.setCreatedByName(profileService.getName(x.getCreatedBy()));
			x.getProductVarientsVo().getProductVo().setProductVarientsVos(null);
			x.getProductVarientsVo().getProductVo().setProductAttributeVos(null);
			x.getProductVarientsVo().getProductVo().getCategoryVo().setCategoryVo(null);
			x.getProductVarientsVo().getProductVo().getBrandVo().setBrandVo(null);
		});

		return a;
	}*/

    @PostMapping("/opening-stock")
    public ModelAndView openingStokSave(HttpSession session, @RequestParam Map<String, String> allRequestParams) {
        ModelAndView mv = new ModelAndView();
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {
            List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();

            // if(allRequestParams.get("haveVariant").equals("0")) {

            StockTransactionVo stockTransactionVo = new StockTransactionVo();
            stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
            stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
            try {
                //// System.err.println("createdby in opening-stock is
                //// :"+Long.parseLong(session.getAttribute("userId").toString()));
                stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
            } catch (Exception e) {
                e.printStackTrace();
                stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
            }
            stockTransactionVo.setDescription("Opening Stock");
            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            productVarientsVo.setProductVarientId(Long.parseLong(allRequestParams.get("productVarientId")));

            stockTransactionVo.setProductVarientsVo(productVarientsVo);
            ProductMultiBarcodeVo productMultiBarcodeVo = productService.getProductMultiBarcodeById(Long.parseLong(allRequestParams.get("productMultiBarcodeId").toString()));
            stockTransactionVo.setProductMultiBarcodeVo(productMultiBarcodeVo);

            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

            try {
                stockTransactionVo.setStockTransactionDate(
                        dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
            } catch (ParseException e) {
                e.printStackTrace();
            }

            stockTransactionVo.setType("new");
            stockTransactionVo.setTypeId(Long.parseLong(allRequestParams.get("productVarientId")));
            stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());

            if (allRequestParams.get("type").toString().equalsIgnoreCase("OUT")) {
                if (allRequestParams.get("outQuantity") != null && !allRequestParams.get("outQuantity").equals("")) {
                    stockTransactionVo.setOutQuantity(Double.valueOf(allRequestParams.get("outQuantity")));
                }
                stockTransactionVo.setInQuantity(0);
                stockTransactionVo.setBatchId(Long.parseLong(allRequestParams.get("batchid").toString()));
                double purchasePrice = stockTransactionRepository
                        .getPurchasePrice(Long.parseLong(allRequestParams.get("batchid").toString()));
                stockTransactionVo.setProductPrice(Double.valueOf(allRequestParams.get("price")));
            } else {

                if (allRequestParams.get("inQuantity") != null && !allRequestParams.get("inQuantity").equals("")) {
                    stockTransactionVo.setInQuantity(Double.valueOf(allRequestParams.get("inQuantity")));
                    stockTransactionVo.setProductPrice(productMultiBarcodeVo.getStdRate());
                }
                stockTransactionVo.setOutQuantity(0);

                SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                String strDate = "";
//                if (StringUtils.isNotBlank(allRequestParams.get("expiryManage"))
//                        && allRequestParams.get("expiryManage").equalsIgnoreCase("1")) {
//                    stockTransactionVo.setExpirationManage(1);
//
//                    try {
//                        stockTransactionVo
//                                .setManufactureDate(dateFormat.parse(allRequestParams.get("manufactureDate")));
//                        stockTransactionVo.setExpirationDate(dateFormat.parse(allRequestParams.get("batchExpiryDate")));
//                        strDate = formatter.format(dateFormat.parse(allRequestParams.get("batchExpiryDate")));
//                    } catch (ParseException e) {
//                        stockTransactionVo.setManufactureDate(new Date());
//                        stockTransactionVo.setExpirationDate(new Date());
//                        strDate = formatter.format(new Date());
//                        e.printStackTrace();
//                    }
//                } else {
                stockTransactionVo.setExpirationManage(0);
//                }
                double landingcost = 0.0, purchasePrice = 0.0;
                double sellingPrice = 0.0, taxRate = 0.0;
                ProductVarientsVo varientVo = productService
                        .findByProductVarientId(productVarientsVo.getProductVarientId());
                if (productMultiBarcodeVo != null) {
                    taxRate = taxService.getTaxRateByTaxId(varientVo.getProductVo().getPurchaseTaxVo().getTaxId());
                    purchasePrice = Double.valueOf(allRequestParams.get("price"));
                    if (allRequestParams.get("modallandingCost") != null
                            && !allRequestParams.get("modallandingCost").equals("")) {
                        landingcost = Double.parseDouble(allRequestParams.get("modallandingCost"));
                        stockTransactionVo.setLandingCost(Double.parseDouble(allRequestParams.get("modallandingCost")));

                        if (stockTransactionVo.getExpirationManage() == 1) {
                            stockTransactionVo.setBatchNo("B" + Long.parseLong(allRequestParams.get("productVarientId"))
                                    + new DecimalFormat("#.###").format(landingcost)
                                    + new DecimalFormat("#.###").format(Double.valueOf(allRequestParams.get("mrp")))
                                    + strDate);
                        } else {
                            stockTransactionVo.setBatchNo("B" + Long.parseLong(allRequestParams.get("productVarientId"))
                                    + new DecimalFormat("#.###").format(landingcost)
                                    + new DecimalFormat("#.###").format(Double.valueOf(allRequestParams.get("mrp"))));
                        }

                    } else {
                        landingcost = Double.valueOf(Double.valueOf(allRequestParams.get("price"))
                                + ((Double.valueOf(allRequestParams.get("price")) * taxRate) / 100));
                        stockTransactionVo.setLandingCost(landingcost);
                        if (stockTransactionVo.getExpirationManage() == 1) {
                            stockTransactionVo.setBatchNo("B" + Long.parseLong(allRequestParams.get("productVarientId"))
                                    + new DecimalFormat("#.###").format(landingcost)
                                    + new DecimalFormat("#.###").format(Double.valueOf(allRequestParams.get("mrp")))
                                    + strDate);
                        } else {
                            stockTransactionVo.setBatchNo("B" + Long.parseLong(allRequestParams.get("productVarientId"))
                                    + new DecimalFormat("#.###").format(landingcost)
                                    + new DecimalFormat("#.###").format(Double.valueOf(allRequestParams.get("mrp"))));
                        }
                    }
                }

                if (varientVo != null) {
                    if (StringUtils.isNotBlank(varientVo.getDiscountType())) {
                        if (varientVo.getDiscountType().equals("percentage")) {
                            sellingPrice = Double.valueOf(allRequestParams.get("mrp"))
                                    - (Double.valueOf(allRequestParams.get("mrp")) * varientVo.getDiscount() / 100);
                        } else {
                            sellingPrice = Double.valueOf(allRequestParams.get("mrp")) - varientVo.getDiscount();
                        }
                    }

                }
                // set batch no
                stockTransactionVo.setMrp(Double.valueOf(allRequestParams.get("mrp")));
                stockTransactionVo.setSellingPrice(sellingPrice);
                stockTransactionVo.setProductPrice(purchasePrice);
            }

            if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                stockTransactionVos.add(stockTransactionVo);
            }

            stockTransactionService.saveOpeningStock(stockTransactionVos);

            try {
                wooService.updateProductStockInWooCommerce(stockTransactionVos);
                shopifyService.updateStockInShopify(stockTransactionVos, session);
            } catch (Exception e) {
                e.printStackTrace();
                // TODO: handle exception
            }

            /**
             * Adjust Qty
             *
             */

            ShopifySetupVo shopifySetupVo = shopifyService
                    .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()), "shopify");
            ShopifyResponse responce = null;

            if (shopifySetupVo != null && Long.parseLong(session.getAttribute("companyId").toString()) == Long
                    .parseLong(session.getAttribute("branchId").toString())) {
                //// log.info("update product controller-------------");
                responce = shopifyService.checkCredentials(shopifySetupVo);
            }
            if (shopifySetupVo != null && responce != null && responce.isStatus()) {
                shopifyService.updateStockadjustment(Long.parseLong(allRequestParams.get("productVarientId")),
                        Long.parseLong(session.getAttribute("companyId").toString()));
            }

            mv.setViewName("redirect:/product/opening-stock");

        } else {
            mv.setViewName("accessdenied/accessdenied");
        }
        return mv;
    }

    @RequestMapping("/inhouse/getavlqty/json")
    @ResponseBody
    public double findAvailableQtyInnerHouse(HttpSession session,
                                             @RequestParam(name = "stockLocationId", required = false, defaultValue = "0") long stockLocationId,
                                             @RequestParam(name = "productVarientId", required = false, defaultValue = "0") long productVarientId) {

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        String avlQty = "";
        //// log.warning("productVarientId---------->"+productVarientId);
        //// log.warning("stockLocationId---------->"+stockLocationId);
        if (productVarientId != 0) {
            avlQty = stockMasterInnerHouseRepository.findProductVariantQty(branchId, stockLocationId, productVarientId,
                    session.getAttribute("financialYear").toString());
            //// log.warning("avlQty checking---------->"+avlQty);
        }
        //// log.warning("final return avlQty---------->"+avlQty);
        if (StringUtils.isNotBlank(avlQty)) {
            return Double.parseDouble(avlQty);
        } else {
            return 0;
        }

    }

    @GetMapping("/inhouse/opening-stock")
    public ModelAndView inhouseopeningStok(HttpSession session) {
        ModelAndView view = new ModelAndView("product/inhouse/opening-stock/opening-stock");
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {
            view.addObject("location", stockLocationService.findByCompanyId(companyId));
            view.addObject(Constant.MULTIBARCODE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIBARCODE));
            view.addObject(Constant.MULTIDUPLICATEBARCODE, companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIDUPLICATEBARCODE));
        } else {
            view.setViewName("accessdenied/accessdenied");
        }
        return view;
    }

    @RequestMapping("/inhouse/opening-stock/datatable")
    @ResponseBody
    public DataTablesOutput<StockTransactionInnerHouseVo> inhousestockTransactionDatatable(@Valid DataTablesInput input,
                                                                                           @RequestParam Map<String, String> allRequestParams, HttpSession session)
            throws NumberFormatException, ParseException {

        // ContactVo contactVo=contactRepository.findByContactId(contactId);
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        Specification<StockTransactionInnerHouseVo> specification = new Specification<StockTransactionInnerHouseVo>() {

            @Override
            public Predicate toPredicate(Root<StockTransactionInnerHouseVo> root, CriteriaQuery<?> query,
                                         CriteriaBuilder criteriaBuilder) {
                List<Predicate> predicates = new ArrayList<Predicate>();
                predicates.add(criteriaBuilder.equal(root.get("type"), "new"));
                predicates.add(criteriaBuilder.equal(root.get("yearInterval"),
                        session.getAttribute("financialYear").toString()));
                predicates.add(criteriaBuilder.equal(root.get("branchId"), branchId));

                /*
                 * try {
                 * predicates.add(criteriaBuilder.between(root.get("stockTransactionDate"),
                 * dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()),
                 * dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString())));
                 * } catch (ParseException e) { e.printStackTrace(); }
                 */

                return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
            }
        };

        DataTablesOutput<StockTransactionInnerHouseVo> a = stockTransactionInnerHouseRepository.findAll(input, null,
                specification);

        a.getData().forEach(x -> {
            x.getProductVarientsVo().getProductVo().setProductVarientsVos(null);
            x.getProductVarientsVo().getProductVo().setProductAttributeVos(null);
            x.getProductVarientsVo().getProductVo().getCategoryVo().setCategoryVo(null);
            x.getProductVarientsVo().getProductVo().getBrandVo().setBrandVo(null);
            // x.setLocationName(empLocationService.findByLocationId(x.getLocationId()).getLocationName());
        });

        return a;
    }

    @PostMapping("/inhouse/opening-stock")
    public ModelAndView inhouseopeningStokSave(HttpSession session,
                                               @RequestParam Map<String, String> allRequestParams) {
        ModelAndView mv = new ModelAndView();
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {
            List<StockTransactionInnerHouseVo> stockTransactionVos = new ArrayList<StockTransactionInnerHouseVo>();
            StockTransactionInnerHouseVo stockTransactionVo = new StockTransactionInnerHouseVo();

            stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
            stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
            stockTransactionVo.setDescription("Opening Stock");
            stockTransactionVo.setDesignNo(allRequestParams.get("designNo"));
            if (allRequestParams.get("inQuantity") != null && !allRequestParams.get("inQuantity").equals("")) {
                stockTransactionVo.setInQuantity(Double.valueOf(allRequestParams.get("inQuantity")));
            }
            if (allRequestParams.get("outQuantity") != null && !allRequestParams.get("outQuantity").equals("")) {
                stockTransactionVo.setOutQuantity(Double.valueOf(allRequestParams.get("outQuantity")));
            }

            double price = 0;
            if (StringUtils.isNotBlank(allRequestParams.get("price"))) {
                price = Double.valueOf(allRequestParams.get("price"));
            }
            stockTransactionVo.setProductPrice(price);

            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            productVarientsVo.setProductVarientId(Long.parseLong(allRequestParams.get("productVarientId")));
            stockTransactionVo.setProductVarientsVo(productVarientsVo);

            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

            try {
                stockTransactionVo.setStockTransactionDate(
                        dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
            } catch (ParseException e) {
                e.printStackTrace();
            }

            stockTransactionVo.setType("new");
            stockTransactionVo.setTypeId(Long.parseLong(allRequestParams.get("productVarientId")));
            stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());

            if (StringUtils.isNotBlank(allRequestParams.get("stockLocationId"))) {
                long stockLocationId = Long.parseLong(allRequestParams.get("stockLocationId").toString());
                stockTransactionVo.setStockLocationId(stockLocationId);
                String stockLocationName = stockLocationService.findStockLocationName(stockLocationId);
                stockTransactionVo.setStockLocationName(stockLocationName);
            } else {
                stockTransactionVo.setStockLocationId(0);
                stockTransactionVo.setStockLocationName(Constant.PRODUCTIONHOUSE);
            }

            if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                stockTransactionVos.add(stockTransactionVo);

            }
            stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
            StockTransactionInnerHouseVo newww = stockTransactionInnerHouseRepository.save(stockTransactionVo);

            mv.setViewName("redirect:/product/inhouse/opening-stock");

        } else {
            mv.setViewName("accessdenied/accessdenied");
        }
        return mv;
    }

    @PostMapping("/opening-stock/garment")
    public ModelAndView openingStokSaveForgarment(HttpSession session,
                                                  @RequestParam Map<String, String> allRequestParams) {
        ModelAndView mv = new ModelAndView();
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {
            //// System.err.println("productId---->"+allRequestParams.get("modelProductIdmain"));

            List<ProductVarientsVo> productVarientsVos = productService.findByProductVoProductIdAndIsDeleted(
                    Long.parseLong(allRequestParams.get("modelProductIdmain").toString()));
            //// System.err.println("mrp---->"+allRequestParams.get("mrp"));
            //// System.err.println("PurchasePrice---->"+allRequestParams.get("price"));
            for (int i = 0; i < productVarientsVos.size(); i++) {
                String inQuantity = allRequestParams
                        .get("varientInqty" + productVarientsVos.get(i).getProductVarientId());
                String outQuantity = allRequestParams
                        .get("varientOutqty" + productVarientsVos.get(i).getProductVarientId());
                String productVarientId = allRequestParams
                        .get("productvarientid" + productVarientsVos.get(i).getProductVarientId());
//                //System.err.println("id----"+allRequestParams.get("productvarientid"+productVarientsVos.get(i).getProductVarientId()));
//                //System.err.println("inqty---->"+allRequestParams.get("varientInqty"+productVarientsVos.get(i).getProductVarientId()));
//                //System.err.println("outqty---->"+allRequestParams.get("varientOutqty"+productVarientsVos.get(i).getProductVarientId()));

                List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();

                StockTransactionVo stockTransactionVo = new StockTransactionVo();
                stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                try {
                    //// System.err.println("createdby in opening-stock is
                    //// :"+Long.parseLong(session.getAttribute("userId").toString()));
                    stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                } catch (Exception e) {
                    e.printStackTrace();
                    stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                }
                stockTransactionVo.setDescription("Opening Stock");
                // stockTransactionVo.setDesignNo(allRequestParams.get("designNo"));
                if (inQuantity != null && !inQuantity.equals("")) {
                    stockTransactionVo.setInQuantity(Double.valueOf(inQuantity));
                }
                if (outQuantity != null && !outQuantity.equals("")) {
                    stockTransactionVo.setOutQuantity(Double.valueOf(outQuantity));
                }

                stockTransactionVo.setProductPrice(Double.valueOf(allRequestParams.get("price")));

                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                productVarientsVo.setProductVarientId(Long.parseLong(productVarientId));
                stockTransactionVo.setProductVarientsVo(productVarientsVo);

                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

                try {
                    stockTransactionVo.setStockTransactionDate(
                            dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                stockTransactionVo.setType("new");
                stockTransactionVo.setTypeId(Long.parseLong(productVarientId));
                stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());
                if (StringUtils.isNotBlank(allRequestParams.get("expiryManage"))
                        && allRequestParams.get("expiryManage").equalsIgnoreCase("1")) {
                    stockTransactionVo.setExpirationManage(1);
                    try {
                        stockTransactionVo
                                .setManufactureDate(dateFormat.parse(allRequestParams.get("manufactureDate")));
                        stockTransactionVo.setExpirationDate(dateFormat.parse(allRequestParams.get("batchExpiryDate")));
                    } catch (ParseException e) {
                        stockTransactionVo.setManufactureDate(new Date());
                        stockTransactionVo.setExpirationDate(new Date());
                        e.printStackTrace();
                    }
                } else {
                    stockTransactionVo.setExpirationManage(0);
                }
                double landingcost = 0.0;
                double sellingPrice = 0.0;
                ProductVarientsVo varientVo = productService
                        .findByProductVarientId(productVarientsVo.getProductVarientId());
                if (varientVo != null) {
                    // System.err.println("product available");
                    if (varientVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                        landingcost = Double.valueOf(allRequestParams.get("price"));
                        //// System.err.println("landing cost tax includeing"+landingcost);
                    } else {
                        TaxVo taxvo = taxService.findByTaxId(varientVo.getProductVo().getPurchaseTaxVo().getTaxId());
                        landingcost = Double.valueOf(allRequestParams.get("price"))
                                + (Double.valueOf(allRequestParams.get("price")) * taxvo.getTaxRate() / 100);
                        //// System.err.println("landing cost tax exclusive"+landingcost);
                    }
                }
                if (varientVo != null) {
                    if (varientVo.getDiscountType().equals("percentage")) {
                        sellingPrice = Double.valueOf(allRequestParams.get("mrp"))
                                - (Double.valueOf(allRequestParams.get("mrp")) * varientVo.getDiscount() / 100);
                        //// System.err.println("selling price discount in persantage"+sellingPrice);
                    } else {
                        sellingPrice = Double.valueOf(allRequestParams.get("mrp")) - varientVo.getDiscount();
                        // //System.err.println("selling price discount in amount"+sellingPrice);
                    }
                }
                // set batch no
                stockTransactionVo.setBatchNo(
                        "B" + Long.parseLong(productVarientId) + new DecimalFormat("#.###").format(landingcost)
                                + new DecimalFormat("#.###").format(Double.valueOf(allRequestParams.get("mrp"))));
                stockTransactionVo.setMrp(Double.valueOf(allRequestParams.get("mrp")));
                stockTransactionVo.setLandingCost(landingcost);
                stockTransactionVo.setSellingPrice(sellingPrice);

                if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                    stockTransactionVos.add(stockTransactionVo);
                }
//		} else {
//
//			for(int i = 1; i<= Integer.parseInt(allRequestParams.get("index")); i++) {
//				StockTransactionVo stockTransactionVo =new StockTransactionVo();
//
//				stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
//				stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
//				stockTransactionVo.setDescription("Opening Stock");
//				stockTransactionVo.setDesignNo(allRequestParams.get("designNo"));
//				stockTransactionVo.setInQuantity(Double.valueOf(allRequestParams.get("inQuantity"+i)));
//				stockTransactionVo.setOutQuantity(Double.valueOf(allRequestParams.get("outQuantity"+i)));
//				stockTransactionVo.setProductPrice(Double.valueOf(allRequestParams.get("price")));
//
//				ProductVarientsVo productVarientsVo = new ProductVarientsVo();
//				productVarientsVo.setProductVarientId(Long.parseLong(allRequestParams.get("productVarientId"+i)));
//				stockTransactionVo.setProductVarientsVo(productVarientsVo);
//
//				DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
//
//				try {
//					stockTransactionVo.setStockTransactionDate(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
//				} catch (ParseException e) {
//					e.printStackTrace();
//				}
//
//				stockTransactionVo.setType("new");
//				stockTransactionVo.setTypeId(Long.parseLong(allRequestParams.get("productVarientId"+i)));
//				stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());
//
//				stockTransactionVos.add(stockTransactionVo);
//			}
//		}

                stockTransactionService.saveOpeningStock(stockTransactionVos);

                // ProductVarientsVo updateproductVarientsVo = productService
                // .findByProductVarientId(Long.parseLong(productVarientId));

                try {
                    wooService.updateProductStockInWooCommerce(stockTransactionVos);
                    shopifyService.updateStockInShopify(stockTransactionVos, session);
                } catch (Exception e) {
                    e.printStackTrace();
                    // TODO: handle exception
                }
//                updateproductVarientsVo.setMrp(Double.parseDouble(allRequestParams.get("mrp")));
//                updateproductVarientsVo.setRetailerPrice(Double.parseDouble(allRequestParams.get("mrp")));
//                updateproductVarientsVo.setPurchasePrice(Double.parseDouble(allRequestParams.get("price")));
//
//                if (updateproductVarientsVo.getDiscountType().equals("amount")) {
//                    updateproductVarientsVo.setSellingPrice(
//                            updateproductVarientsVo.getMrp() - updateproductVarientsVo.getDiscount());
//                } else {
//                    updateproductVarientsVo
//                            .setSellingPrice(updateproductVarientsVo.getMrp() - (updateproductVarientsVo.getMrp()
//                                    * updateproductVarientsVo.getDiscount() / 100));
//                }
//
//                try {
//                    productVariantRepository.save(updateproductVarientsVo);
//
//                } catch (Exception e) {
//
//                }

                /**
                 * Adjust Qty
                 *
                 */

                shopifyService.updateStock(stockTransactionVo.getInQuantity(), Long.parseLong(productVarientId),
                        Long.parseLong(session.getAttribute("companyId").toString()));

            }

            mv.setViewName("redirect:/product/opening-stock");

        } else {
            mv.setViewName("accessdenied/accessdenied");
        }
        return mv;
    }

    @PostMapping("/stockAdjustment/save")
    @ResponseBody
    public String stockAdjustmentSave(HttpSession session, @RequestParam("price") double price,
                                      @RequestParam("inQuantity") double inQty, @RequestParam("outQuantity") double outQty,
                                      @RequestParam(value = "batchId", required = false, defaultValue = "0") long batchId,
                                      @RequestParam("productVarientId") long productVarientId, @RequestParam("mrp") double mrp,
                                      @RequestParam("designNo") String designNo, @RequestParam("warehouseId") Long warehouseId,
                                      @RequestParam("rackId") Long rackId) {
        log.info("stock adjustment save");
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();
            StockTransactionVo stockTransactionVo = new StockTransactionVo();

            log.info("stock adjustment save");
            stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
            stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
            stockTransactionVo.setDescription(Constant.STOCKADJUSTMENT);
            stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
            stockTransactionVo.setDesignNo(designNo);

            if (warehouseId != null || rackId != null) {
                stockTransactionVo.setWarehouseId(warehouseId);
                stockTransactionVo.setRackId(rackId);
            }
            if (inQty != 0) {
                stockTransactionVo.setInQuantity(inQty);
            }
            if (outQty != 0) {
                stockTransactionVo.setOutQuantity(outQty);
            }

            stockTransactionVo.setProductPrice(price);

            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            productVarientsVo.setProductVarientId(productVarientId);
            stockTransactionVo.setProductVarientsVo(productVarientsVo);

            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

            try {
                Date startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
                Date lastDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());
                Date currentDate = new Date();
                // System.err.println("current date "+currentDate+ " first Date "+startDate+"
                // last date "+lastDate);

                // System.err.println("firstdate check "+currentDate.after(startDate));
                // System.err.println("lastdate check "+currentDate.before(lastDate));

                if (currentDate.after(startDate) && currentDate.before(lastDate)) {
                    // System.err.println("both are true ");
                    stockTransactionVo.setStockTransactionDate(dateFormat.parse(dateFormat.format(new Date())));
                } else {
                    // System.err.println("not current financial year");
                    stockTransactionVo.setStockTransactionDate(
                            dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            stockTransactionVo.setType(Constant.STOCKADJUSTMENT);
            stockTransactionVo.setTypeId(productVarientId);
            stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());

            double landingcost = 0.0;
            double sellingPrice = 0.0;
            ProductVarientsVo varientVo = productService
                    .findByProductVarientId(productVarientsVo.getProductVarientId());
            if (varientVo != null) {
                if (varientVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                    landingcost = price;
                    //// System.err.println("landing cost tax includeing"+landingcost);
                } else {
                    TaxVo taxvo = taxService.findByTaxId(varientVo.getProductVo().getPurchaseTaxVo().getTaxId());
                    landingcost = price + (price * taxvo.getTaxRate() / 100);
                    // //System.err.println("landing cost tax exclusive"+landingcost);
                }
            }
            if (varientVo != null) {
                if (StringUtils.isNotBlank(varientVo.getDiscountType())) {
                    if (varientVo.getDiscountType().equals("percentage")) {
                        sellingPrice = mrp - (mrp * varientVo.getDiscount() / 100);
                        // //System.err.println("selling price discount in persantage"+sellingPrice);
                    } else {
                        sellingPrice = mrp - varientVo.getDiscount();
                        // //System.err.println("selling price discount in amount"+sellingPrice);
                    }
                }
            }
            // set batch no
            if (batchId != 0L) {
                StockMasterVo masterVo = stockMasterRepository.findByStockIdAndBranchId(batchId,
                        Long.parseLong(session.getAttribute("branchId").toString()));
                if (masterVo != null) {
                    stockTransactionVo.setBatchNo(masterVo.getBatchNo());
                    stockTransactionVo.setBatchId(batchId);
                    stockTransactionVo.setMrp(masterVo.getMrp());
                    stockTransactionVo.setLandingCost(masterVo.getLandingCost());
                    stockTransactionVo.setSellingPrice(masterVo.getSellingPrice());
                } else {
                    stockTransactionVo
                            .setBatchNo("B" + productVarientId + new DecimalFormat("#.###").format(landingcost)
                                    + new DecimalFormat("#.###").format(Double.valueOf(mrp)));
                    stockTransactionVo.setMrp(Double.valueOf(mrp));
                    stockTransactionVo.setLandingCost(landingcost);
                    stockTransactionVo.setSellingPrice(sellingPrice);
                }
            } else {
                stockTransactionVo.setBatchNo("B" + productVarientId + new DecimalFormat("#.###").format(landingcost)
                        + new DecimalFormat("#.###").format(Double.valueOf(mrp)));
                stockTransactionVo.setMrp(Double.valueOf(mrp));
                stockTransactionVo.setLandingCost(landingcost);
                stockTransactionVo.setSellingPrice(sellingPrice);
            }
            if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                stockTransactionVos.add(stockTransactionVo);
            }

            stockTransactionService.saveOpeningStock(stockTransactionVos);

            ProductVarientsVo updateproductVarientsVo = productService.findByProductVarientId(productVarientId);
            ShopifySetupVo shopifySetupVo = shopifyService
                    .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()), "shopify");
            ShopifyResponse responce = null;

            if (shopifySetupVo != null && Long.parseLong(session.getAttribute("companyId").toString()) == Long
                    .parseLong(session.getAttribute("branchId").toString())) {
                //// log.info("update product controller-------------");
                responce = shopifyService.checkCredentials(shopifySetupVo);
            }

            try {
                wooService.updateProductStockInWooCommerce(stockTransactionVos);
                shopifyService.updateStockadjustment(productVarientId,
                        Long.parseLong(session.getAttribute("companyId").toString()));
            } catch (Exception e) {
                e.printStackTrace();
            }
            // return "success";

        } else {
            return "false";
        }
        return "success";
    }

    @PostMapping("/stockAdjustment/barcode/save")
    @ResponseBody
    public String barcodeStockAdjustmentSave(HttpSession session, @RequestParam(name = "outQuantity", required = false) double outQty,
                                             @RequestParam(name = "inQuantity") double inQty, @RequestParam("productVarientId") long productVarientId
            , @RequestParam("productMultiBarcodeId") long productMultiBarcodeId, @RequestParam("stock") int stock,
                                             @RequestParam(name = "batchId") long batchId, @RequestParam("warehouseId") Long warehouseId, @RequestParam("rackId") Long rackId) {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            stockTransactionService.saveStockForStockAdjustment(outQty, inQty, productVarientId, productMultiBarcodeId, warehouseId, rackId, batchId, session, stock);
        } else {
            return "false";
        }
        return "success";
    }

    @GetMapping("/shopify/stock/{id}")
    public String updateSock(@PathVariable("id") long id, HttpSession session) {

        stockTransactionService.findByStockTransactionId(id);

        ShopifySetupVo shopifySetupVo = shopifyService
                .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()), "shopify");

        // log.info(shopifySetupVo.getApiKey());

        StockTransactionVo stockTransactionVo;
        if (shopifySetupVo != null) {

            stockTransactionVo = stockTransactionService.findByStockTransactionId(id);

            String URI = "";

            try {

                RestTemplate restTemplate = new RestTemplate();

                HttpHeaders headers = new HttpHeaders();
                headers.set("X-Shopify-Access-Token", shopifySetupVo.getSecretKey());
                headers.setContentType(MediaType.APPLICATION_JSON);
                headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));

                HttpEntity<String> entity = new HttpEntity<>(headers);

                /**
                 * Get Inventory Item Id By ProductId and ProductVariantId
                 **/
                URI = BaseUrl(shopifySetupVo) + Constant.SHPOIFYPUTPRODUCT
                        + stockTransactionVo.getProductVarientsVo().getProductVo().getShopifySourceId() + "/variants/"
                        + stockTransactionVo.getProductVarientsVo().getShopifyVariantSourceId()
                        + ".json?fields=inventory_item_id";
                // log.info(URI);

                String data1 = restTemplate.exchange(URI, HttpMethod.GET, entity, String.class).getBody();

                JSONObject jsonObject = (JSONObject) new JSONParser().parse(data1);

                String inventoryItemId = ((JSONObject) jsonObject.get("variant")).get("inventory_item_id").toString();

                // log.info(inventoryItemId);

                /**
                 * Get Location Id By Inventory Item Ids
                 **/
                URI = BaseUrl(shopifySetupVo) + Constant.SHOPIFYINVENTORYLEVELS + "?inventory_item_ids="
                        + inventoryItemId;

                data1 = restTemplate.exchange(URI, HttpMethod.GET, entity, String.class).getBody();
                // log.info(data1);

                jsonObject = (JSONObject) new JSONParser().parse(data1);
                jsonObject = (JSONObject) ((JSONArray) jsonObject.get("inventory_levels")).get(0);
                String locationId = jsonObject.get("location_id").toString();

                /**
                 * Adjust Inventory Level By Location Id and Inventory Item Id
                 **/

                URI = BaseUrl(shopifySetupVo) + Constant.SHOPIFYADJUSTINVENTORYLEVELS;

                jsonObject = new JSONObject();

                jsonObject.put("location_id", Long.parseLong(locationId));
                jsonObject.put("inventory_item_id", Long.parseLong(inventoryItemId));
                jsonObject.put("available_adjustment", 2);
                // log.info(jsonObject.toJSONString());
                entity = new HttpEntity<>(jsonObject.toJSONString(), headers);

                data1 = restTemplate.exchange(URI, HttpMethod.POST, entity, String.class).getBody();

                // log.info("Updated Successfully" + data1);

                return data1;
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        return null;
    }

    @PostMapping("/opening-stock/{stockTransactionId}/barcode/{size}")
    public void openingStokBarcode(@PathVariable long stockTransactionId, @PathVariable String size,
                                   @RequestParam Map<String, String> allRequestParams, HttpSession session, HttpServletRequest request,
                                   HttpServletResponse response) throws IOException {

        jasperParameter = new HashMap();
        jasperParameter.put("branch_id", Long.parseLong(session.getAttribute("branchId").toString()));

        jasperParameter.put("stock_transaction_id", stockTransactionId);

        /*
         * if(!request.getParameter("from_barcode_no").equals("") &&
         * !(request.getParameter("from_barcode_no")==null) &&
         * !request.getParameter("to_barcode_no").equals("") &&
         * !(request.getParameter("to_barcode_no")==null))
         */
        jasperParameter.put("logoserver", FILE_UPLOAD_SERVER);
        if (StringUtils.isNotBlank(allRequestParams.get("noOfCopy"))) {
            jasperParameter.put("qty", Long.parseLong(allRequestParams.get("noOfCopy").trim()));
        } else {
            jasperParameter.put("qty", Long.parseLong("1"));
        }

        if (StringUtils.isNotBlank(allRequestParams.get("blankNo"))) {
            jasperParameter.put("blank_no", Long.parseLong(allRequestParams.get("blankNo").trim()));
        } else {
            jasperParameter.put("blank_no", Long.parseLong("0"));
        }

        jasperParameter.put("currency_code", session.getAttribute("currencyCode").toString());
        jasperParameter.put("from_barcode_no", "");
        jasperParameter.put("to_barcode_no", "");
        jasperParameter.put("price_type", allRequestParams.get("contactType"));
        jasperParameter.put("path", JASPER_REPORT_PATH + System.getProperty("file.separator"));
        try {
            if (size.equals("3840")) {
                jasperExporter.jasperExporterPDF(jasperParameter, JASPER_REPORT_PATH
                                + System.getProperty("file.separator") + "/barcode/barcode_openingstock_a4_40l.jrxml",
                        "barcode_a4_40l", response);
            } else if (size.equals("3935")) {
                jasperExporter.jasperExporterPDF(jasperParameter,
                        JASPER_REPORT_PATH + System.getProperty("file.separator")
                                + "/barcode/barcode_openingstock_a4_40l_between_barcode.jrxml",
                        "barcode_a4_40l", response);
            } else if (size.equals("5050")) {
                jasperExporter.jasperExporterPDF(jasperParameter, JASPER_REPORT_PATH
                                + System.getProperty("file.separator") + "/barcode/barcode_openingstock_50_50.jrxml", "barcode",
                        response);
            }

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    @PostMapping("/barcode-list/{stockTransactionId}")
    @ResponseBody
    public List<BarcodeVo> barcodeList(@PathVariable long stockTransactionId, HttpSession session) {
        List<BarcodeVo> barcodeVos = barcodeService.findByBranchIdAndStockTransactionId(
                Long.parseLong(session.getAttribute("branchId").toString()), stockTransactionId);

        barcodeVos.forEach(b -> {
            b.setStockTransactionVo(null);
            b.setProductVarientsVo(null);
        });

        return barcodeVos;
    }

    @PostMapping("/barcode-list/delete")
    @ResponseBody
    public String barcodeListDelete(@RequestParam("stockTransactionId") long stockTransactionId,
                                    @RequestParam("barcodeId") String barcodeId, HttpSession session) {

        int count = barcodeService.deleteByBarcodeIds(Long.parseLong(session.getAttribute("branchId").toString()),
                Arrays.asList(barcodeId.split(",")).stream().map(Long::parseLong).collect(Collectors.toList()));

        stockTransactionService.decreaseStockTransactionQty(stockTransactionId, count);

        return count + "";
    }

    @RequestMapping(value = "{id}/callwoo", method = RequestMethod.POST)
    @ResponseBody
    public String uploadproductonwoo(@PathVariable("id") long productId, HttpServletRequest request,
                                     HttpSession session) {
        try {
//				ProductVo product = productService.findByProductIdAndIsDeleted(productId, 0);
//				wooCommerceService.saveProductInWooCommerce(session, product);
            wooService.syncOneProductInWooCommerce(productId, session);
            return "200";
        } catch (Exception e) {
            e.printStackTrace();
            // TODO: handle exception
        }
        return null;
    }

    @RequestMapping(value = "{id}/image/upload", method = RequestMethod.POST)
    @ResponseBody
    public Map<String, Object> uploadImage(@PathVariable("id") long productId, @RequestParam("file") MultipartFile file,
                                           HttpServletRequest request, HttpSession session) {

        HashMap<String, Object> map = new HashMap<String, Object>();
        ProductImageVo productImageVo = new ProductImageVo();
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        try {

            if (!file.isEmpty()) {
                FileValidationResponse response = securityValidation.validateFile(file, Constant.FILE_IMAGE);
                //// log.info("status--->"+response.isValid());
                //// log.info("message--->"+response.getMessage());

                if (!response.isValid()) {
                    // log.warning("Inside not valid");
                    map.put("status", "500");
                    map.put("msg", response.getMessage());
                    return map;
                } else {
                    if (file.getSize() > MAX_IMAGE_SIZE) {
                        log.info("file size" + file.getSize());
                        map.put("status", "500");
                        map.put("msg", "Image size is more than 800KB");
                        return map;
                    }
                    // log.warning("inside valid");
                    long companyId = Long.parseLong(String.valueOf(session.getAttribute("companyId").toString()));
                    String fileName, fileExtension = "";
                    File fb = ImageResize.convert(file);
                    Calendar calendar = Calendar.getInstance();
                    fileExtension = getFileExtension(fb);

                    fileName = productId + "-" + calendar.getTimeInMillis() + "." + fileExtension;
                    String imageSrc = BUCKET + "/" + IMAGE_LOCATION + "/" + companyId + "/" + productId + "/"
                            + fileName;
                    String uploadStatus = "500";
                    String azureImageSrc = "";
                    String imagePath = "";
                    if (FILE_UPLOAD_SERVER.equals(Constant.FILE_UPLOAD_SERVER_AZURE)) {
                        Map<String, String> azureResponse = azureBlobService.sendImageFileToAZURE(fb, fileName,
                                fileExtension, companyId, productId);
                        if (!azureResponse.isEmpty()) {
                            if (StringUtils.isNotBlank(azureResponse.get("status"))
                                    && azureResponse.get("status").equals("200")) {
                                uploadStatus = "200";
                                azureImageSrc = azureResponse.get("imageSrc");
                                imagePath = azureImageSrc;
                            }
                        }
                    } else {
                        AWSCredentials credentials = new BasicAWSCredentials(ACCESS_KEY, SECRET_KEY);
                        java.security.Security.setProperty("networkaddress.cache.ttl", S3_CACHE);
                        s3 = new AmazonS3Client(credentials);
                        s3.setEndpoint(END_POINT_URL);

                        Part part = request.getPart("file-up");
                        InputStream targetStream = new FileInputStream(fb);

                        ObjectMetadata objectMetadata = new ObjectMetadata();
                        if (fileExtension.equalsIgnoreCase("png"))
                            objectMetadata.setContentType(MediaType.IMAGE_PNG_VALUE);
                        else if (fileExtension.equalsIgnoreCase("jpg"))
                            objectMetadata.setContentType(MediaType.IMAGE_JPEG_VALUE);
                        else if (fileExtension.equalsIgnoreCase("jpeg"))
                            objectMetadata.setContentType(MediaType.IMAGE_JPEG_VALUE);

                        objectMetadata.setContentLength(fb.length());
                        PutObjectRequest putObjectRequest = new PutObjectRequest(BUCKET,
                                IMAGE_LOCATION + "/" + companyId + "/" + productId + "/" + fileName, targetStream,
                                objectMetadata);
                        // skip if do not want to access the image directly from S3

                        putObjectRequest.setCannedAcl(CannedAccessControlList.PublicRead);
                        // skip if do not want to access the image directly from S3
                        s3.putObject(putObjectRequest);
                        uploadStatus = "200";
                        imagePath = Constant.REALPATH + imageSrc;
                    }

                    if (uploadStatus == "200") {

                        productImageVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                        productImageVo.setModifiedOn(CurrentDateTime.getCurrentDate());

//	                     log.info(
//	                             "-=-=-=-=-=-ewewewe=-=-=-=----" + productService.findNextPositionByProductId(productId));
                        productImageVo.setSrc(imageSrc);
                        productImageVo.setSignedSrc(azureImageSrc);
                        productImageVo.setPosition(productService.findNextPositionByProductId(productId));
                        // productImageVo.setSrc(BUCKET + "/" + IMAGE_LOCATION + "/" + companyId + "/" +
                        // productId + "/" + fileName);

                        ProductVo productVo = new ProductVo();
                        productVo.setProductId(productId);
                        productImageVo.setProductVo(productVo);
                        //// System.err.println("Product Id is" +
                        //// productImageVo.getProductVo().getProductId());
                        productService.insertProductImage(productImageVo);
                        try {
                            productService.updateImageInProduct(productId, imagePath);
                        } catch (Exception e) {
                            // TODO: handle exception
                        }
                        // try {
                        // ProductVo product = productService.findByProductIdAndIsDeleted(productId, 0);
                        // wooCommerceService.saveProductInWooCommerce(session, product);

                        // } catch (Exception e) {
                        // e.printStackTrace();
                        // // TODO: handle exception
                        // }
                        productVo = productService.productDetail(productId, companyId, merchantTypeId, clusterId)
                                .get(0);

                        if (productVo.getShopifySync() == 1 && productVo.getShopifySourceId() != 0) {
                            log.info("Inside product upload");
                            ShopifySetupVo shopifySetupVo = shopifyService.getShopifyDetail(
                                    Long.parseLong(session.getAttribute("companyId").toString()), "shopify");

                            if (shopifySetupVo != null) {
                                try {
                                    RestTemplate restTemplate = new RestTemplate();
                                    HttpHeaders headers = new HttpHeaders();
                                    headers.set("X-Shopify-Access-Token", shopifySetupVo.getSecretKey());
                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                    headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
                                    JSONObject jsonObject1 = new JSONObject();
                                    JSONObject jsonObject = new JSONObject();
                                    // log.severe("CALL image");
                                    if (FILE_UPLOAD_SERVER.equals(Constant.FILE_UPLOAD_SERVER_AZURE)) {
                                        log.info("Into Azure!!!!!!!!!!!!!!!!!!");
                                        jsonObject.put("src", productImageVo.getSignedSrc());
                                    } else {
                                        log.info("INTO S3!!!!!!!!!!!!!!!!!!!!!");
                                        jsonObject.put("src", Constant.REALPATH + productImageVo.getSrc());
                                    }
                                    log.info("IMAGE SRC::::::::::::::" + jsonObject);
                                    jsonObject1.put("image", jsonObject);

                                    HttpEntity<String> entity = new HttpEntity<>(jsonObject1.toJSONString(), headers);

                                    String URI = BaseUrl(shopifySetupVo) + Constant.SHPOIFYPUTPRODUCT
                                            + productVo.getShopifySourceId() + "/images.json";
                                    String data1 = "";
                                    try {
                                        data1 = restTemplate.exchange(URI, HttpMethod.POST, entity, String.class)
                                                .getBody();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    ModelMapper modelMapper = new ModelMapper();

                                    ObjectMapper mapper = new ObjectMapper();
                                    mapper.setSerializationInclusion(Include.NON_NULL);
                                    JsonNode jsonNode = null;
                                    try {
                                        jsonNode = mapper.readTree(data1);
                                    } catch (IOException e) {
                                        // TODO Auto-generated catch block
                                        e.printStackTrace();
                                    }

                                    JsonNode root = jsonNode.path("image");
                                    ObjectReader objectReader = mapper
                                            .readerFor(new TypeReference<ShopifyProductImage>() {
                                            });

                                    try {
                                        ShopifyProductImage shopifyImage = objectReader.readValue(root);
                                        log.info("IMAGEEEEEEEE-->>>" + shopifyImage.getId());
                                        log.info("IMAGEEEEEEEE2222-->>>" + productImageVo.getImageId());
                                        productImageRepository.updateShopifyId(productImageVo.getImageId(),
                                                shopifyImage.getId());
                                    } catch (IOException e) {
                                        // TODO Auto-generated catch block
                                        e.printStackTrace();
                                    }
                                    // log.info("Updated Successfully" + data1);

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                    map.put("data", productImageVo);
                    map.put("status", "200");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            map.put("status", "500");
            map.put("msg", "somthing went to wrong");
        }

        return map;

    }

    @RequestMapping(value = "{id}/image/uploadc", method = RequestMethod.POST)
    @ResponseBody
    public String registrationc(@PathVariable("id") long productId, @RequestParam("file") MultipartFile file,
                                HttpServletRequest request, HttpSession session) {

        ProductImageVo productImageVo = new ProductImageVo();
        String s = "";
        try {

            if (!file.isEmpty()) {

                File fb = ImageResize.convert(file);

                InputStream targetStream = new FileInputStream(fb);

                try {
                    FileInputStream fileInputStreamReader = new FileInputStream(fb);
                    byte[] bytes = new byte[(int) fb.length()];
                    fileInputStreamReader.read(bytes);
                    // BASE64Encoder encoder = new BASE64Encoder();
                    s = Base64.encodeBase64String(bytes);
                    // log.info(s);

                } catch (FileNotFoundException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return s;

    }

    @RequestMapping("{id}/image/json")
    @ResponseBody
    public List<ProductImageVo> getAllImage(@PathVariable("id") long productId, HttpServletRequest request,
                                            HttpSession session) {
        List<ProductImageVo> productImageVos = productService.findImageByProductId(productId, 0);

        productImageVos.forEach(p -> p.setProductVo(null));

        return productImageVos;
    }

    @PostMapping("/variant/{id}/image/update")
    @ResponseBody
    public String getAllIamge(@PathVariable("id") long productVarientId, @RequestParam("imageId") long imageId,
                              HttpSession session) {
        // log.info(productVarientId + " image " + imageId);
        productService.updateImageId(productVarientId, imageId);
        return "";
    }

    @RequestMapping("/getListOfTaxes")
    @ResponseBody
    public List<TaxCustomDTO> getListOfTaxes(@RequestParam(value = "id") String id,
                                             @RequestParam(name = "garmentdesign", defaultValue = "0", required = false) int garmentdesign) {
        List<String> items = Arrays.asList(id.split("\\s*,\\s*"));
        //// System.err.println("item size" + items.size());
        List<TaxCustomDTO> taxvos = new ArrayList<TaxCustomDTO>();
        for (int i = 0; i < items.size(); i++) {
            if (items.get(i) != "" && items.get(i) != null && items.get(i) != "null"
                    && StringUtils.isNotBlank(items.get(i)) && !items.get(i).equals("null")) {
                TaxCustomDTO tax = productService.findTaxByProductVarientOrProduct(garmentdesign,
                        Long.parseLong(items.get(i)), Long.parseLong(items.get(i)));

                if (tax != null) {
                    taxvos.add(tax);
                }
            }
        }

        return taxvos;
    }

    /*
     * // new method for temporary product file uploadddation
     *
     * @RequestMapping(value = "/upload/temporaryExcel")
     *
     * @ResponseBody public String ImportCustomerExcelFile(HttpSession session,
     * HttpServletRequest request) throws IOException {
     *
     * log.info("Uploading Starting");
     *
     * String filepath = (String) session.getAttribute("filepath");
     * log.info("FIle Path is :" + filepath); File fb = new File(filepath);
     * InputStream in = new FileInputStream(fb);
     *
     * // Create Workbook instance holding reference to .xlsx file XSSFWorkbook
     * workbook = new XSSFWorkbook(in); // Get first/desired sheet from the workbook
     * XSSFSheet sheet = workbook.getSheetAt(0);
     *
     * // Iterate through each rows one by one Iterator<Row> rowIterator =
     * sheet.iterator(); rowIterator.next(); int count = 0; while
     * (rowIterator.hasNext()) {
     *
     * Row row = rowIterator.next();
     *
     *
     * Iterator<Cell> cellIterator = row.cellIterator();
     *
     * while (cellIterator.hasNext()) { Cell cell = cellIterator.next(); // Check
     * the cell type and format accordingly cell.setCellType(Cell.CELL_TYPE_STRING);
     * switch (cell.getCellType()) { case Cell.CELL_TYPE_BOOLEAN:
     *
     * log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t"); break; case
     * Cell.CELL_TYPE_NUMERIC:
     *
     * break; case Cell.CELL_TYPE_STRING:
     *
     * // list.add(cell.getStringCellValue().trim()); break;
     *
     * }
     *
     * }
     *
     *
     *
     *
     *
     * // For each row, iterate through all the columns String itemCode =
     * row.getCell(0).getStringCellValue().trim().toString(); double mrp =
     * Double.parseDouble(row.getCell(3).toString()); double tax =
     * Double.parseDouble(row.getCell(5).toString());
     *
     * ProductVarientsVo productVarientsVo =
     * productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(
     * itemCode.trim().toString(),
     * Long.parseLong(session.getAttribute("companyId").toString()), 0); if
     * (productVarientsVo != null) { productVarientsVo.setMrp(mrp);
     * productVarientsVo.setRetailerPrice(mrp);
     *
     * String discountType = productVarientsVo.getDiscountType(); double discount =
     * productVarientsVo.getDiscount(); if (discountType.equals("percentage")) {
     * double HUNDRED = 100; double sellingPrice = (mrp * discount) / HUNDRED;
     * productVarientsVo.setSellingPrice(mrp-sellingPrice); } else if
     * (discountType.equals("amount")) { double sellingPrice = mrp - discount;
     * productVarientsVo.setSellingPrice(mrp-sellingPrice); }
     * log.info("Tax from excel is: "+tax); TaxVo taxVo1 =
     * taxService.findByTaxRateAndCompanyId(tax,
     * Long.parseLong(session.getAttribute("companyId").toString())); if (taxVo1 !=
     * null ) { productVarientsVo.getProductVo().setTaxVo(taxVo1); } else {
     *
     * TaxVo taxVo = new TaxVo();
     * taxVo.setTaxName(row.getCell(4).getStringCellValue().trim());
     * taxVo.setTaxRate(Double.parseDouble(row.getCell(5).getStringCellValue()));
     * taxVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()))
     * ;
     * taxVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString())
     * );
     * taxVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString(
     * )));
     * taxVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
     *
     * AccountCustomVo accountCustomVo = new AccountCustomVo();
     * accountCustomVo.setBranchId(Long.parseLong(session.getAttribute("branchId").
     * toString()));
     * accountCustomVo.setCompanyId(Long.parseLong(session.getAttribute("companyId")
     * .toString()));
     * accountCustomVo.setAlterBy(Long.parseLong(session.getAttribute("userId").
     * toString()));
     * accountCustomVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").
     * toString()));
     * accountCustomVo.setModifiedOn(CurrentDateTime.getCurrentDate());
     * accountCustomVo.setCreatedOn(CurrentDateTime.getCurrentDate());
     * accountCustomVo.setAccountName(taxVo.getTaxName() + "(" + taxVo.getTaxRate()
     * + "%)");
     *
     * AccountGroupVo accountGroupVo = new AccountGroupVo();
     *
     * accountGroupVo.setAccountGroupId(Constant.ACCOUNT_GROUP_DUTIES_AND_TAXES);
     * accountCustomVo.setAccounType(Constant.TAX);
     *
     * accountCustomVo.setGroup(accountGroupVo);
     * accountCustomService.insertAccount(accountCustomVo);
     * taxVo.setAccountCustomVo(accountCustomVo); taxService.save(taxVo);
     * productVarientsVo.getProductVo().setTaxVo(taxVo); }
     *
     * productVariantRepository.save(productVarientsVo);
     * log.info(productVarientsVo.getProductVarientId()+":"+ itemCode + ":" +
     * mrp+":"+productVarientsVo.getMrp()); count++; } } log.info(count +
     * " records updated"); return "success"; }
     */

    @PostMapping(value = "/check/excel")
    @ResponseBody
    public ProductSheetUploadFinalDTO ImportCustomer(@RequestParam("excelFile") MultipartFile file, HttpSession session,
                                                     HttpServletRequest request, HttpServletResponse response) throws IOException {
        FileValidationResponse fileValidationResponse = securityValidation.validateFile(file, Constant.FILE_EXCEL);
        if (!fileValidationResponse.isValid()) {
            List<ProductWrongSheetDTO> wrongSheetDTO = new ArrayList<ProductWrongSheetDTO>();
            return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + 0), wrongSheetDTO.size(),
                    fileValidationResponse.getMessage(), false);
        } else {
            File fb = ImageResize.convert(file);
//            log.info(fb.getName());
//            log.info(fb.getAbsolutePath());
            String filepath = fb.getAbsolutePath();
//            session.setAttribute("filepath", filepath);
            HashMap<String, Object> map = new HashMap<String, Object>();
            rowNumber = "";
            totalRow = 0;
            return checkSheet(request, response, session, filepath);
        }
    }

    //////////// workbook////////
    @RequestMapping(value = "/downloadAllProducts/excel")
    @ResponseBody
    public String downloadAllProductsExcel(HttpSession session, HttpServletResponse response) {

        String tmpdir = System.getProperty("java.io.tmpdir");
        try {
//        	CompanySettingVo productType = companySettingService.findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);
//            CompanySettingVo allPriceShow = companySettingService.findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW);
            CompanySettingVo poCompanySetting = companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
            CompanySettingVo membershipSetting = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP);
            String[] columns = {"Product Name", "Varient Name", "Print Name", "ItemCode", "Short description",
                    "description", "Purchase Price", "MRP", "Discount", "Discount Type", "Purchase Tax Name",
                    "Purchase Tax Rate", "Sales Tax Name", "Sales Tax Rate", "Department", "Category", "Sub Category",
                    "HSN", "Sales Tax Included", "Purchase Tax Included", "Unit Of Measurement", "Unit Code",
                    "No. Of Decimal Places", "Brand Name", "Brand Code", "Sub Brand", "Cess", "Cess Rate",
                    "Expiration Days", "Net Weight", "Ingredients [Seprated by comma (,) ]",
                    "Product Type (Finished,SemiFinished,Packaging,Raw)", "Wholesale Price", "Retailer Price",
                    "Online Price", "Minimum Qty", "Image Link"};// category column 14
            String[] columnsWithPO = {"Product Name", "Varient Name", "Print Name", "ItemCode", "Short description",
                    "description", "Purchase Price", "MRP", "Discount", "Discount Type", "Purchase Tax Name",
                    "Purchase Tax Rate", "Sales Tax Name", "Sales Tax Rate", "Department", "Category", "Sub Category",
                    "HSN", "Sales Tax Included", "Purchase Tax Included", "Unit Of Measurement", "Unit Code",
                    "No. Of Decimal Places", "Brand Name", "Brand Code", "Sub Brand", "Cess", "Cess Rate",
                    "Expiration Days", "Net Weight", "Ingredients [Seprated by comma (,) ]", "PO Quantity",
                    "Stock Limit", "Product Type (Finished,SemiFinished,Packaging,Raw)", "Wholesale Price",
                    "Retailer Price", "Online Price", "Minimum Qty", "Image Link"};
            String[] columnsWithMembership = {"Product Name", "Varient Name", "Print Name", "ItemCode",
                    "Short description", "description", "Purchase Price", "MRP", "Discount", "Discount Type",
                    "Purchase Tax Name", "Purchase Tax Rate", "Sales Tax Name", "Sales Tax Rate", "Department",
                    "Category", "Sub Category", "HSN", "Sales Tax Included", "Purchase Tax Included",
                    "Unit Of Measurement", "Unit Code", "No. Of Decimal Places", "Brand Name", "Brand Code",
                    "Sub Brand", "Cess", "Cess Rate", "Expiration Days", "Net Weight",
                    "Ingredients [Seprated by comma (,) ]", "MemberShip Margin",
                    "MemberShip Margin Type (amount/percentage)", "Normal Margin",
                    "Normal Margin Type (amount/percentage)", "Product Type (Finished,SemiFinished,Packaging,Raw)",
                    "Wholesale Price", "Retailer Price", "Online Price", "Minimum Qty", "Image Link"};
            List<ProductExportDto> productVariantVos = productService.findUploadSheetDataByCompanyIdAndIsDeleted(
                    Long.parseLong(session.getAttribute("companyId").toString()), 0);
            Workbook workbook = new XSSFWorkbook();
            CreationHelper createHelper = workbook.getCreationHelper();
            String filename = "All-Products-File" + session.getAttribute("companyId").toString();
            Sheet sheet = workbook.createSheet(filename);
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 14);
            headerFont.setColor(IndexedColors.RED.getIndex());

            CellStyle headerCellStyle = workbook.createCellStyle();
            headerCellStyle.setFont(headerFont);

            Row headerRow = sheet.createRow(0);
            boolean plainSheet = true;
            if (poCompanySetting != null) {
                if (poCompanySetting.getValue() == 1) {
                    plainSheet = false;
                    int length = columnsWithPO.length;
                    for (int i = 0; i < length; i++) {
                        Cell cell = headerRow.createCell(i);
                        cell.setCellValue(columnsWithPO[i]);
                        cell.setCellStyle(headerCellStyle);
                    }
                } else if (membershipSetting.getValue() == 1) {
                    plainSheet = false;
                    int length = columnsWithMembership.length;
                    for (int i = 0; i < length; i++) {
                        Cell cell = headerRow.createCell(i);
                        cell.setCellValue(columnsWithMembership[i]);
                        cell.setCellStyle(headerCellStyle);
                    }
                } else {
                    int length = columns.length;
                    for (int i = 0; i < length; i++) {
                        Cell cell = headerRow.createCell(i);
                        cell.setCellValue(columns[i]);
                        cell.setCellStyle(headerCellStyle);
                    }
                }
            }

            if (membershipSetting.getValue() == 1) {
                plainSheet = false;
            }

            // CellStyle dateCellStyle = workbook.createCellStyle();
            log.info("product varients " + productVariantVos.size());
            int rowNum = 1;
            int totalLength = productVariantVos.size();
            int start = 0;
            for (start = 0; start < totalLength; start++) {
                ProductExportDto productVariant = productVariantVos.get(start);

                // if(rowNum>=5) { break; }

                if (!(productVariant.getItemCode().equalsIgnoreCase(null)
                        || productVariant.getItemCode().equalsIgnoreCase(""))) {
                    Row row = sheet.createRow(rowNum++);
                    row.createCell(0)
                            .setCellValue(securityValidation.replaceCsvInjectionCharacters(productVariant.getName()));
                    row.createCell(1).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getVarientName()));
                    row.createCell(2).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getDisplayName()));
                    row.createCell(3).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getItemCode()));
                    row.createCell(4).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getShortDescription()));
                    row.createCell(5).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getDescription()));
                    if (productVariant.getPurchaseTaxIncluded() == 1) {
                        double value = productVariant.getPurchasePrice()
                                + ((productVariant.getPurchasePrice() * productVariant.getPurchaseTaxRate()) / 100);
                        row.createCell(6).setCellValue(new DecimalFormat("#.##").format(value));
                    } else {
                        row.createCell(6).setCellValue(productVariant.getPurchasePrice());
                    }

                    row.createCell(7).setCellValue(productVariant.getMrp());
                    row.createCell(8).setCellValue(productVariant.getDiscount());
                    row.createCell(9).setCellValue(productVariant.getDiscountType());
                    row.createCell(10).setCellValue(productVariant.getPurchaseTaxName());
                    row.createCell(11).setCellValue(productVariant.getPurchaseTaxRate());
                    row.createCell(12).setCellValue(productVariant.getTaxName());
                    row.createCell(13).setCellValue(productVariant.getTaxRate());
                    row.createCell(14).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getDepartmentName()));
                    row.createCell(15).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getCategoryName()));
                    row.createCell(16).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getSubCategoryName()));
                    row.createCell(17).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getHsnCode()));
                    row.createCell(18).setCellValue((productVariant.getTaxIncluded() == 1 ? "Yes" : "No"));
                    row.createCell(19).setCellValue((productVariant.getPurchaseTaxIncluded() == 1 ? "Yes" : "No"));
                    row.createCell(20).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getMeasurementName()));
                    row.createCell(21).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getMeasurementCode()));
                    row.createCell(22).setCellValue(productVariant.getNoOfDecimalPlaces());
                    row.createCell(23).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getBrandName()));
                    row.createCell(24).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getBrandCode()));
                    row.createCell(25).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getSubBrandName()));
                    row.createCell(26).setCellValue((productVariant.getCess() == 1 ? "Yes" : "No"));
                    row.createCell(27).setCellValue(productVariant.getCesstax());
                    row.createCell(28).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getExpirationdays()));
                    row.createCell(29).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getNetweight()));
                    row.createCell(30).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getIngredients()));

                    if (poCompanySetting != null) {
                        if (poCompanySetting.getValue() == 1) {
                            row.createCell(31).setCellValue(productVariant.getpoQuantity());
                            row.createCell(32).setCellValue(productVariant.getpoStockLimit());

                            row.createCell(33).setCellValue(productVariant.getProductType());
                            row.createCell(34).setCellValue(productVariant.getWholeSalePrice());
                            row.createCell(35).setCellValue(productVariant.getRetailerPrice());
                            row.createCell(36).setCellValue(productVariant.getOnlinePrice());
                            row.createCell(375).setCellValue(productVariant.getMinQty());
                        } else if (membershipSetting.getValue() == 1) {
                            row.createCell(31).setCellValue(productVariant.getMembershipMargine());
                            row.createCell(32).setCellValue(productVariant.getMembershipMargineType());
                            row.createCell(33).setCellValue(productVariant.getRetailerMargin());
                            row.createCell(34).setCellValue(productVariant.getRetailerMarginType());

                            row.createCell(35).setCellValue(productVariant.getProductType());
                            row.createCell(36).setCellValue(productVariant.getWholeSalePrice());
                            row.createCell(37).setCellValue(productVariant.getRetailerPrice());
                            row.createCell(38).setCellValue(productVariant.getOnlinePrice());
                            row.createCell(39).setCellValue(productVariant.getMinQty());
                        }
                    }

                    try {
                        if (plainSheet) {
                            row.createCell(31).setCellValue(productVariant.getProductType());
                            row.createCell(32).setCellValue(productVariant.getWholeSalePrice());
                            row.createCell(33).setCellValue(productVariant.getRetailerPrice());
                            row.createCell(34).setCellValue(productVariant.getOnlinePrice());
                            row.createCell(35).setCellValue(productVariant.getMinQty());
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    // -------po quantity is on------//
                }

                // log.info("Row:-------" + rowNum);

            }
            /*
             * if(poCompanySetting != null) { if(poCompanySetting.getValue() == 1) { for
             * (int i = 0; i < columnsWithPO.length; i++) { sheet.autoSizeColumn(i); } }else
             * { for (int i = 0; i < columns.length; i++) { sheet.autoSizeColumn(i); } } }
             */

            FileOutputStream fileOut = new FileOutputStream(tmpdir + "/" + filename + ".xlsx");
            workbook.write(fileOut);
            String filePathToBeServed = tmpdir + "/" + filename + ".xlsx"; // complete file name with path;
            File fileToDownload = new File(filePathToBeServed);
            InputStream inputStream = new FileInputStream(fileToDownload);
            response.setContentType("application/force-download");
            response.setHeader("Content-Disposition", "attachment; filename=" + filename + ".xlsx");
            IOUtils.copy(inputStream, response.getOutputStream());
            response.flushBuffer();
            inputStream.close();
            fileOut.close();
            workbook.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @RequestMapping(value = "/updateProducts/check/excel")
    @ResponseBody
    public Map<String, Object> CheckUpdateBulkProduct(@RequestParam("updateExcelFile") MultipartFile file,
                                                      HttpSession session, HttpServletRequest request, HttpServletResponse response) throws IOException {
        HashMap<String, Object> map = new HashMap<String, Object>();
        FileValidationResponse fileValidationResponse = securityValidation.validateFile(file, Constant.FILE_EXCEL);
        if (!fileValidationResponse.isValid()) {
            map.put("msg", fileValidationResponse.getMessage());
            return map;
        } else {
            File fb = ImageResize.convert(file);
            log.info(fb.getName());
            log.info(fb.getAbsolutePath());
            String filepath = fb.getAbsolutePath();
            session.setAttribute("filepath", filepath);
            rowNumber = "";
            try {
                if (checkSheetUpdated(request, response, session)) {

                    map.put("msg", "success");
                    return map;
                } else {
                    // System.err.println("There are some error in following Cell Number --> " +
                    // rowNumber);
                    map.put("msg", "There are some error in following Cell Number --> " + rowNumber);
                    return map;
                }
            } catch (NoSuchElementException e) {
                e.printStackTrace();
                map.put("msg", "Excel sheet is blank.");
                return map;
            } catch (Exception e) {
                e.printStackTrace();
                map.put("msg", "There is Something went wrong...");
                return map;
            }
        }

    }

    public boolean checkSheetUpdated(HttpServletRequest request, HttpServletResponse response, HttpSession session)
            throws IOException {
        CompanySettingVo productType = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);
        CompanySettingVo allPriceShow = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW);
        CompanySettingVo poCompanySetting = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
        CompanySettingVo membershipSetting = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP);
        CompanySettingVo isUmoWiseDecimalRestrictionStopped = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.STOPUMOWISEDECIMAL);
        StringBuilder rowNumberBuilder = new StringBuilder();
        //// System.err.println("poCompanySetting is :"+poCompanySetting.getValue());
        CompanySettingVo limit = companySettingService.findByCompanyIdAndType(0, Constant.SHEETLIMIT);
        String name = "";
        boolean result = true;
        List<String> itemcodelist = new ArrayList<>();
        List<String> categorylist = null;
        List<String> brandlist = null;

        org.json.JSONArray categoryArray = new org.json.JSONArray();
        org.json.JSONArray brandArray = new org.json.JSONArray();

        org.json.JSONObject categoryMapJson = null;
        org.json.JSONObject brandMapJson = null;
        String filepath = (String) session.getAttribute("filepath");
        File fb = new File(filepath);
        InputStream in = new FileInputStream(fb);
        // Create Workbook instance holding reference to .xlsx file
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        // Get first/desired sheet from the workbook
        XSSFSheet sheet = workbook.getSheetAt(0);
        // Iterate through each rows one by one
        long rowTotal = sheet.getLastRowNum();
        itemcodelist = productService.findAllItemcode(Long.parseLong(session.getAttribute("companyId").toString()));
//        categoryNameList = categoryService
//                .getAllByCategoryNameAndCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
//        departmentList=categoryService
//                .getAllByDepartmentNameAndCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
        Iterator<Row> rowIterator = sheet.iterator();
//		for(String category:categoryNameList)
//		{
//			log.info("category"+category);
//		}
        int decimalNumber = 2;
        try {
            decimalNumber = Integer.parseInt(session.getAttribute("decimalPoint").toString());
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataFormatter formatter = new DataFormatter();

        Row row1 = rowIterator.next();

        if (row1.getCell(0) != null && row1.getCell(0).getStringCellValue().trim() != "") {

            if (!row1.getCell(0).getStringCellValue().trim().equals("Product Name")) {
                result = false;
                rowNumberBuilder.append("column Not find Wrong Sheet");
            }
        } else {
            result = false;
            rowNumberBuilder.append("column Not find Wrong Sheet");
        }

        if (!rowIterator.hasNext()) {
            result = false;
            rowNumberBuilder.append("There is no row in the excel sheet");
        }

        int SHEETPRODUCTTYPE = 31;
        int SHEETWHOLESALEPRICE = 32;
        int SHEETRETAILERPRICE = 33;
        int SHEETONLINEPRICE = 34;
        int SHEETMINQTY = 35;
        boolean plainSheet = true;
        if (poCompanySetting != null) {
            if (poCompanySetting.getValue() == 1) {
                SHEETPRODUCTTYPE = 33;
                SHEETWHOLESALEPRICE = 34;
                SHEETRETAILERPRICE = 35;
                SHEETONLINEPRICE = 36;
                SHEETMINQTY = 37;
                plainSheet = false;
                if (row1.getCell(Constant.BULKSHEETPOQTY) != null
                        && row1.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim() != "") {

                    if (!row1.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim().equals("PO Quantity")) {
                        result = false;
                        rowNumberBuilder.append("PO Quantity column Not find Wrong Sheet");
                    }
                } else {
                    result = false;
                    rowNumberBuilder.append("PO Quantity column Not find Wrong Sheet");
                }
                if (row1.getCell(Constant.BULKSHEETSTOCKLIMIT) != null
                        && row1.getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim() != "") {

                    if (!row1.getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim().equals("Stock Limit")) {
                        result = false;
                        rowNumberBuilder.append("Stock Limit column Not find Wrong Sheet");
                    }
                } else {
                    result = false;
                    rowNumberBuilder.append("Stock Limit column Not find Wrong Sheet");
                }

            } else if (membershipSetting.getValue() == 1) {
                SHEETPRODUCTTYPE = 35;
                SHEETWHOLESALEPRICE = 36;
                SHEETRETAILERPRICE = 37;
                SHEETONLINEPRICE = 38;
                SHEETMINQTY = 39;
                plainSheet = false;
                try {
                    if (row1.getCell(Constant.BULKSHEETMEMBERSHIP) != null
                            && row1.getCell(Constant.BULKSHEETMEMBERSHIP).getStringCellValue().trim() != "") {

                        if (!row1.getCell(Constant.BULKSHEETMEMBERSHIP).getStringCellValue().trim()
                                .equals("MemberShip Margin")) {
                            result = false;
                            rowNumberBuilder.append("MemberShip Margin column Not find Wrong Sheet");
                        }
                    }
                    if (row1.getCell(Constant.BULKSHEETMEMBERSHIPTYPE) != null
                            && row1.getCell(Constant.BULKSHEETMEMBERSHIPTYPE).getStringCellValue().trim() != "") {

                        if (!row1.getCell(Constant.BULKSHEETMEMBERSHIPTYPE).getStringCellValue().trim()
                                .equals("MemberShip Margin Type (amount/percentage)")) {
                            result = false;
                            rowNumberBuilder.append("MemberShip Margin Type column Not find Wrong Sheet");
                        }
                    }
                } catch (Exception e) {
                    // TODO: handle exception
                }

            }
        }

        if (rowTotal > limit.getValue()) {
            result = false;
            rowNumberBuilder.append("Only " + limit.getValue() + " product can be upload at a time");
        }
        if (result == true) {
            int i = 2;
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                // For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    cell.setCellValue(formatter.formatCellValue(cell));
                    cell.setCellType(Cell.CELL_TYPE_STRING);
                }

                // ProductVo productVo = new ProductVo();
                /*----------------------------------------------------------*/

                // productVo =
                // productService.findByNameIgnoreCaseAndCompanyId(row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim(),
                // Long.parseLong(session.getAttribute("companyId").toString()));
                double landingCost = 0, mrp = 0, purchaseprice = 0, purchasetaxRate = 0, discount = 0, sellingprice = 0,
                        margin = 0;
                String discounttype = null;
                int purchasetaxincluding = 0;
                int allowedDigitAfterDecimal = 0;
                try {
                    if (row.getCell(Constant.BULKSHEETPRODUCTNAME) != null
                            && row.getCell(Constant.BULKSHEETPRODUCTNAME).getStringCellValue().trim() != "") {
                        if (row.getCell(Constant.BULKSHEETPRODUCTNAME).getStringCellValue().trim().length() < 101) {
                            if (RegexTest.validateName(
                                    row.getCell(Constant.BULKSHEETPRODUCTNAME).getStringCellValue().trim())) {
                            } else {
                                result = false;
                                rowNumberBuilder
                                        .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPRODUCTNAME)
                                                + ")-Product Name Is not valid\n");
                            }
                        } else {
                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPRODUCTNAME)
                                            + ")-Product Name must be less or equal to 100 characters");
                        }
                    } else {
                        result = false;
                        rowNumberBuilder.append(
                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPRODUCTNAME) + ")-\n");
                    }

                } catch (Exception e) {
                    // e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETVARIENTNAME) != null
                            && row.getCell(Constant.BULKSHEETVARIENTNAME).getStringCellValue().trim() != "") {

                        if (row.getCell(Constant.BULKSHEETVARIENTNAME).getStringCellValue().trim().length() <= 62) {
                            if (RegexTest.validateVarientName(
                                    row.getCell(Constant.BULKSHEETVARIENTNAME).getStringCellValue().trim())) {

                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + ","
                                        + Constant.SHEET_NAME.get(Constant.BULKSHEETVARIENTNAME)
                                        + ")-varient name can only consist of alphabetical, number,back slash and underscore");
                            }
                        } else {
                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETVARIENTNAME)
                                            + ")-varient Name must be less or equal to 62 characters");
                        }

                    }
                } catch (Exception e) {
                    // e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETPRINTNAME) != null
                            && row.getCell(Constant.BULKSHEETPRINTNAME).getStringCellValue().trim() != "") {
//						if (RegexTest.validateName(row.getCell(Constant.BULKSHEETVARIENTNAME).getStringCellValue().trim())) {
//						} else {
//							result = false;
//							rowNumber += "(" + i + ",B)-";
//						}
                    } else {
                        result = false;
                        rowNumberBuilder
                                .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPRINTNAME) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                // ---------------------------------------------------------------------------------

                // ---------------ITEM CODE CHECK-------------

                try {
                    // log.info("--=-=->>>>>>>" + row.getCell(Constant.BULKSHEETVARIENTNAME));
                    if (row.getCell(Constant.BULKSHEETITEMCODE) != null
                            && row.getCell(Constant.BULKSHEETITEMCODE).getStringCellValue().trim() != "") {
                        boolean exist = itemcodelist.contains(
                                row.getCell(Constant.BULKSHEETITEMCODE).getStringCellValue().trim()) ? true : false;

                        if (exist) {
                            // log.info("exists------------nnnn");
                            // result = true;
                        } else {
                            result = false;
                            // log.info("does not exists------------nnnn");
                            rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETITEMCODE)
                                    + ")-Item code does not exists\n");
                            rowNumber = rowNumberBuilder.toString();
                            return result;
                        }

                        // itemcodelist.add(row.getCell(Constant.BULKSHEETPURCHASEPRICE).getStringCellValue().trim());

                    } else {
                        // log.info("does not exists--2----------nnnn");
                        result = false;
                        rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETITEMCODE)
                                + ")-Item Code Is Required\n");
                    }

                } catch (Exception e) {
                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETITEMCODE)
                            + ")-Item Code Is Required\n");
                    e.printStackTrace();
                }
                // -----------------------------------------------

//                try {
//                    if (row.getCell(Constant.BULKSHEETITEMCODE) != null && row.getCell(Constant.BULKSHEETITEMCODE).getStringCellValue().trim() != "") {
////						if (RegexTest.validateName(row.getCell(Constant.BULKSHEETVARIENTNAME).getStringCellValue().trim())) {
////						} else {
////							result = false;
////							rowNumber += "(" + i + ",B)-";
////						}
//                    } else {
//                        result = false;
//                        rowNumber += "(" + i + ",D)-";
//                    }
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
                try {
                    if (row.getCell(Constant.BULKSHEETPURCHASEPRICE) != null
                            && row.getCell(Constant.BULKSHEETPURCHASEPRICE).getStringCellValue().trim() != "") {
                        if (RegexTest.validateDouble(
                                row.getCell(Constant.BULKSHEETPURCHASEPRICE).getStringCellValue().trim(),
                                decimalNumber)) {
                            purchaseprice = Double.parseDouble(
                                    row.getCell(Constant.BULKSHEETPURCHASEPRICE).getStringCellValue().trim());
                        } else {
                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPURCHASEPRICE)
                                            + ")- purchase price is InValid \n");
                        }

                    } else {
                        result = false;
                        rowNumberBuilder.append(
                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPURCHASEPRICE) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (row.getCell(Constant.BULKSHEETMRP) != null
                            && row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim() != "") {
                        if (RegexTest.validateDouble(row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim(),
                                decimalNumber)) {
                            mrp = Double.parseDouble(row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim());
                            // log.info("mrp->>>>"+mrp);
                        } else {
                            result = false;
                            rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETMRP)
                                    + ")- Mrp is InValid \n");
                        }
                    } else {
                        result = false;
                        rowNumberBuilder
                                .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETMRP) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (row.getCell(Constant.BULKSHEETDISCOUNT) != null
                            && row.getCell(Constant.BULKSHEETDISCOUNT).getStringCellValue().trim() != "") {
                        if (RegexTest.validateDouble(
                                row.getCell(Constant.BULKSHEETDISCOUNT).getStringCellValue().trim(), decimalNumber)) {
                            discount = Double
                                    .parseDouble(row.getCell(Constant.BULKSHEETDISCOUNT).getStringCellValue().trim());
                        } else {
                            result = false;
                            rowNumberBuilder.append(
                                    "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETDISCOUNT) + ")-\n");
                        }

                    } else {
                        result = false;
                        rowNumberBuilder
                                .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETDISCOUNT) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (row.getCell(Constant.BULKSHEETDISCOUNTYTPE) != null
                            && row.getCell(Constant.BULKSHEETDISCOUNTYTPE).getStringCellValue().trim() != "") {
                        discounttype = row.getCell(Constant.BULKSHEETDISCOUNTYTPE).getStringCellValue().trim();
                    } else {
                        result = false;
                        rowNumberBuilder.append(
                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETDISCOUNTYTPE) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                // ---------------------------------------------------------------------------------

//				try {
//					if (row.getCell(Constant.BULKSHEETMRP) != null && row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim() != "") {
//						if (RegexTest.validateDouble(row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim())) {
//						} else {
//							result = false;
//							rowNumber += "(" + i + ",G)-";
//						}
//					} else {
//						result = false;
//						rowNumber += "(" + i + ",G)-";
//					}
//
//				} catch (Exception e) {
//					e.printStackTrace();
//				}
                // -------------------------------------tax-------------------------------------------
                try {
                    if (row.getCell(Constant.BULKSHEETPURCHASETAXNAME) != null
                            && row.getCell(Constant.BULKSHEETPURCHASETAXNAME).getStringCellValue().trim() != "") {
                        // log.info("discount type----------" +
                        // row.getCell(Constant.BULKSHEETPURCHASETAXNAME).getStringCellValue().trim());
                    } else {
                        result = false;
                        rowNumberBuilder.append(
                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPURCHASETAXNAME) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETPURCHASETAXRATE) != null
                            && row.getCell(Constant.BULKSHEETPURCHASETAXRATE).getStringCellValue().trim() != "") {
                        if (RegexTest.validateDouble(
                                row.getCell(Constant.BULKSHEETPURCHASETAXRATE).getStringCellValue().trim(),
                                decimalNumber)) {
                            try {
                                purchasetaxRate = Double.parseDouble(
                                        row.getCell(Constant.BULKSHEETPURCHASETAXRATE).getStringCellValue().trim());
                            } catch (NumberFormatException e) {
                                purchasetaxRate = 0;
                                e.printStackTrace();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        } else {
                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPURCHASETAXRATE)
                                            + ")-(Purchase Tax Rate not valid)-\n");
                        }

                    } else {
                        result = false;
                        rowNumberBuilder.append(
                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPURCHASETAXRATE) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETSALESTAXNAME) != null
                            && row.getCell(Constant.BULKSHEETSALESTAXNAME).getStringCellValue().trim() != "") {

                    } else {
                        result = false;
                        rowNumberBuilder.append(
                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETSALESTAXNAME) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETSALESTAXRATE) != null
                            && row.getCell(Constant.BULKSHEETSALESTAXRATE).getStringCellValue().trim() != "") {
                        if (RegexTest.validateDouble(
                                row.getCell(Constant.BULKSHEETSALESTAXRATE).getStringCellValue().trim(),
                                decimalNumber)) {
                            try {
                                purchasetaxRate = Double.parseDouble(
                                        row.getCell(Constant.BULKSHEETSALESTAXRATE).getStringCellValue().trim());
                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        } else {
                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETSALESTAXRATE)
                                            + ")-(Sales Tax Rate not valid)-\n");
                        }
                    } else {
                        result = false;
                        rowNumberBuilder.append(
                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETSALESTAXRATE) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETDEPARTMENT) != null
                            && row.getCell(Constant.BULKSHEETDEPARTMENT).getStringCellValue().trim() != "") {
                        if (row.getCell(Constant.BULKSHEETDEPARTMENT).getStringCellValue().trim().length() <= 50) {

                        } else {

                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETDEPARTMENT)
                                            + ")-(Department Name must be less or equal to 50 characters)-\n");
                        }
                    } else {
                        result = false;
                        rowNumberBuilder
                                .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETDEPARTMENT) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                String categoryName = "";
                try {
                    if (row.getCell(Constant.BULKSHEETCATEGORY) != null
                            && row.getCell(Constant.BULKSHEETCATEGORY).getStringCellValue().trim() != "") {
                        if (row.getCell(Constant.BULKSHEETCATEGORY).getStringCellValue().trim().length() <= 50) {
                            categoryName = securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETCATEGORY).getStringCellValue().trim());
                        } else {
                            result = false;
                            rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETCATEGORY)
                                    + ")-(Category Name must be less or equal to 50 characters)-\n");
                        }
                    } else {
                        result = false;
                        rowNumberBuilder
                                .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETCATEGORY) + ")-\n");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETSUBCATEGORY) != null
                            && row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue().trim() != "") {
                        if (row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue().trim().length() <= 50) {
                            CategoryVo subCategoryVo = categoryService.findByCategoryNameAndCompanyId(
                                    securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue().trim()),
                                    Long.parseLong(session.getAttribute("companyId").toString()));
                            if (subCategoryVo != null) {

                                if (subCategoryVo.getCategoryVo() != null) {// means subcategory doesn't have parent
                                    // means this is the main category
                                    CategoryVo categoryVo = categoryService.findByCategoryNameAndCompanyId(categoryName,
                                            Long.parseLong(session.getAttribute("companyId").toString()));

                                    List<MainCategoryDTO> mainCategoryDTOs = categoryService
                                            .findMainCategoryBySubCategoryName(
                                                    securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                            row.getCell(Constant.BULKSHEETSUBCATEGORY)
                                                                    .getStringCellValue().trim()),
                                                    Long.parseLong(session.getAttribute("companyId").toString()));

                                    if (categoryVo == null && !mainCategoryDTOs.isEmpty()) {
                                        result = false;
                                        rowNumberBuilder.append(
                                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETCATEGORY)
                                                        + ")-(Parent Category Not Found)-");
                                    } else if (categoryVo != null && !mainCategoryDTOs.isEmpty()) {
                                        boolean mainCategoryFound = false;
                                        for (int j = 0; j < mainCategoryDTOs.size(); j++) {
                                            if (mainCategoryDTOs.get(j).getCategoryId() == categoryVo.getCategoryId()) {
                                                mainCategoryFound = true;
                                            }
                                        }
                                        if (!mainCategoryFound) {
                                            rowNumber += "(" + i + ","
                                                    + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBCATEGORY)
                                                    + ")-(Sub Category's Parent Category Not Found)-";
                                        }
                                    }
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + ","
                                            + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBCATEGORY)
                                            + ")-(Sub Category is Main Category so Can not add as Sub Category)-");
                                }

                            } else {
                                String subCategoryName = row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue()
                                        .trim();
                                try {
                                    if (!categoryArray.isEmpty()) {
                                        for (int j = 0; j < categoryArray.length(); j++) {
                                            org.json.JSONObject objects = categoryArray.optJSONObject(j);
                                            String subCat = (String) objects.get("sub");
                                            String cat = (String) objects.get("main");
                                            if (StringUtils.equals(subCat, subCategoryName)) {
                                                if (!StringUtils.equals(categoryName, cat)) {
                                                    result = false;
                                                    rowNumberBuilder.append("(" + i + ","
                                                            + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBCATEGORY)
                                                            + ")-(Sub-Category Can't be Same for Two Different Parent Category)-");
                                                    break;
                                                }
                                            }

                                        }
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                try {
                                    if (categorylist == null) {
                                        categorylist = new ArrayList<>();
                                    }
                                    if (!categorylist.isEmpty()) {
                                        if (categorylist.contains(subCategoryName)
                                                && categoryMapJson.has(subCategoryName)) {
                                            String subCateValue = (String) categoryMapJson.get(subCategoryName);
                                            if (!StringUtils.equals(subCateValue, subCategoryName)) {
                                                result = false;
                                                rowNumberBuilder.append("(" + i + ","
                                                        + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBCATEGORY)
                                                        + ")-(Sub-Category is Main Category so cannot added as a Sub-Category)-");
                                            }
                                        }
                                    }
                                    categorylist.add(categoryName);
                                    if (categoryMapJson == null) {
                                        categoryMapJson = new org.json.JSONObject();
                                    }
                                    categoryMapJson.put(categoryName, subCategoryName);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                            }
                            try {
                                org.json.JSONObject categoryJson = new org.json.JSONObject();
                                categoryJson.put("sub",
                                        row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue().trim());
                                categoryJson.put("main", categoryName);
                                categoryArray.put(categoryJson);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        } else {

                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBCATEGORY)
                                            + ")-(Sub Category Name must be less or equal to 50 characters)-\n");
                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                ////////////////////////////////////////////////////////////////////////////////////
                try {
                    if (row.getCell(Constant.BULKSHEETHSNCODE) != null
                            && row.getCell(Constant.BULKSHEETHSNCODE).getStringCellValue().trim() != "") {
                        // log.info("hsnnnnnnnnnn" +
                        // row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue().trim());
                        if (RegexTest
                                .validateInterger(row.getCell(Constant.BULKSHEETHSNCODE).getStringCellValue().trim())) {
                        } else {
                            result = false;
                            rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETHSNCODE)
                                    + ")-only digits\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETSALESTAXINCLUDING) != null
                            && row.getCell(Constant.BULKSHEETSALESTAXINCLUDING).getStringCellValue().trim() != "") {
                        if (row.getCell(Constant.BULKSHEETSALESTAXINCLUDING).getStringCellValue().trim()
                                .equalsIgnoreCase("Yes")
                                || row.getCell(Constant.BULKSHEETSALESTAXINCLUDING).getStringCellValue().trim()
                                .equalsIgnoreCase("No")) {
                        } else {
                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETSALESTAXINCLUDING)
                                            + ")-only Yes or No\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETPURCHASETAXINCLUDING) != null
                            && row.getCell(Constant.BULKSHEETPURCHASETAXINCLUDING).getStringCellValue().trim() != "") {
                        if (row.getCell(Constant.BULKSHEETPURCHASETAXINCLUDING).getStringCellValue().trim()
                                .equalsIgnoreCase("Yes")
                                || row.getCell(Constant.BULKSHEETPURCHASETAXINCLUDING).getStringCellValue().trim()
                                .equalsIgnoreCase("No")) {
                            try {
                                if (row.getCell(Constant.BULKSHEETPURCHASETAXINCLUDING).toString()
                                        .equalsIgnoreCase("Yes")) {
                                    purchasetaxincluding = 1;
                                } else {
                                    purchasetaxincluding = 0;
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            result = false;
                            rowNumberBuilder.append(
                                    "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPURCHASETAXINCLUDING)
                                            + ")-only Yes or No\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETMEASURMENTNAME) != null
                            && row.getCell(Constant.BULKSHEETMEASURMENTNAME).getStringCellValue().trim() != "") {
                        if (RegexTest.validateName(
                                row.getCell(Constant.BULKSHEETMEASURMENTNAME).getStringCellValue().trim())) {
                        } else {
                            result = false;
                            rowNumberBuilder.append(
                                    "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETMEASURMENTNAME) + ")\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    // e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETMEASURMENTCODE) != null
                            && row.getCell(Constant.BULKSHEETMEASURMENTCODE).getStringCellValue().trim() != "") {
                        if (RegexTest.validateName(
                                row.getCell(Constant.BULKSHEETMEASURMENTCODE).getStringCellValue().trim())) {
                        } else {
                            result = false;
                            rowNumberBuilder.append(
                                    "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETMEASURMENTCODE) + ")-\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    // e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETMEASURMENTDECIMAL) != null
                            && row.getCell(Constant.BULKSHEETMEASURMENTDECIMAL).getStringCellValue().trim() != "") {
                        if (RegexTest.validateInterger(
                                row.getCell(Constant.BULKSHEETMEASURMENTDECIMAL).getStringCellValue().trim())) {
                            allowedDigitAfterDecimal = Integer.parseInt(
                                    row.getCell(Constant.BULKSHEETMEASURMENTDECIMAL).getStringCellValue().trim());
                        } else {
                            result = false;
                            rowNumberBuilder.append("(" + i + ","
                                    + Constant.SHEET_NAME.get(Constant.BULKSHEETMEASURMENTDECIMAL) + ")-only digits\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                String brandName = "";
                try {
                    if (row.getCell(Constant.BULKSHEETBRAND) != null
                            && row.getCell(Constant.BULKSHEETBRAND).getStringCellValue().trim() != "") {
                        if (row.getCell(Constant.BULKSHEETBRAND).getStringCellValue().trim().length() <= 50) {
                            brandName = securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETBRAND).getStringCellValue().trim());
                        } else {

                            result = false;
                            rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETBRAND)
                                    + ")-(Brand Name must be less or equal to 50 characters)-\n");
                        }

//
                    } else {
                        result = false;
                        rowNumberBuilder
                                .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETBRAND) + ")-\n");
                    }
//
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETBRANDCODE) != null
                            && row.getCell(Constant.BULKSHEETBRANDCODE).getStringCellValue().trim() != "") {

                        if (row.getCell(Constant.BULKSHEETBRANDCODE).getStringCellValue().trim().length() <= 50) {
                            if (RegexTest.validateName(
                                    row.getCell(Constant.BULKSHEETBRANDCODE).getStringCellValue().trim())) {
                            } else {
                                result = false;
                                rowNumberBuilder.append(
                                        "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETBRANDCODE) + ")-\n");
                            }
                        } else {

                            result = false;
                            rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETBRANDCODE)
                                    + ")-(Brand Code must be less or equal to 50 characters)-\n");
                        }

                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    // e.printStackTrace();
                }

                // 24 is sub brand
                if (row.getCell(Constant.BULKSHEETSUBBRAND) != null
                        && row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim() != "") {
                    if (row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim().length() <= 50) {
                        BrandVo subBrandVo = brandService.findByBrandnameAndCompanyId(
                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim()),
                                Long.parseLong(session.getAttribute("companyId").toString()));
                        if (subBrandVo != null) {

                            if (subBrandVo.getBrandVo() != null) {// means subbrand doesn't have parent means this is
                                // the main brand
                                BrandVo brandVo = brandService.findByBrandnameAndCompanyId(brandName,
                                        Long.parseLong(session.getAttribute("companyId").toString()));

                                List<MainBrandDTO> mainBrandDTOs = brandService.findMainBrandBySubBrandName(
                                        securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim()),
                                        Long.parseLong(session.getAttribute("companyId").toString()));

                                if (brandVo == null && !mainBrandDTOs.isEmpty()) {
                                    result = false;
                                    rowNumberBuilder
                                            .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETBRAND)
                                                    + ")-(Parent Brand Not Found)-");
                                } else if (brandVo != null && !mainBrandDTOs.isEmpty()) {
                                    boolean mainBrandFound = false;
                                    for (int j = 0; j < mainBrandDTOs.size(); j++) {
                                        if (mainBrandDTOs.get(j).getBrandId() == brandVo.getBrandId()) {
                                            mainBrandFound = true;
                                        }
                                    }
                                    if (!mainBrandFound) {
                                        result = false;
                                        rowNumberBuilder.append(
                                                "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBBRAND)
                                                        + ")-(Sub Brand's Parent Brand Not Found)-");
                                    }
                                }
                            } else {
                                result = false;
                                rowNumberBuilder
                                        .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBBRAND)
                                                + ")-(Sub Brand is Main Brand so Can not add as Sub Brand)-");
                            }
                        } else {
                            String subBrandName = row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim();
                            try {
                                if (!brandArray.isEmpty()) {
                                    for (int j = 0; j < brandArray.length(); j++) {
                                        org.json.JSONObject objects = brandArray.optJSONObject(j);
                                        String subBrand = (String) objects.get("sub");
                                        String mainBrand = (String) objects.get("main");
                                        if (StringUtils.equals(subBrand,
                                                row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim())) {
                                            if (!StringUtils.equals(brandName, mainBrand)) {
                                                result = false;
                                                rowNumberBuilder.append("(" + i + ","
                                                        + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBBRAND)
                                                        + ")-(Sub-Brand Can't be Same for Two Different Parent Brand)-");
                                                break;
                                            }
                                        }

                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            try {
                                if (brandlist == null) {
                                    brandlist = new ArrayList<>();
                                }
                                if (!brandlist.isEmpty()) {
                                    if (brandlist.contains(subBrandName) && brandMapJson.has(subBrandName)) {
                                        String subBValue = (String) brandMapJson.get(subBrandName);
                                        if (!StringUtils.equals(subBValue, subBrandName)) {
                                            result = false;
                                            rowNumberBuilder.append("(" + i + ","
                                                    + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBBRAND)
                                                    + ")-(Sub-Brand is Main Brand so cannot added as a Sub-Brand)-");
                                        }
                                    }
                                }
                                brandlist.add(brandName);
                                if (brandMapJson == null) {
                                    brandMapJson = new org.json.JSONObject();
                                }
                                brandMapJson.put(brandName, subBrandName);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        try {
                            org.json.JSONObject brandJson = new org.json.JSONObject();
                            brandJson.put("sub", row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim());
                            brandJson.put("main", brandName);
                            brandArray.put(brandJson);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    } else {

                        result = false;
                        rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETSUBBRAND)
                                + ")-(Sub Brand must be less or equal to 50 characters)-\n");
                    }
                }

                try {
                    if (row.getCell(Constant.BULKSHEETCESS) != null
                            && row.getCell(Constant.BULKSHEETCESS).getStringCellValue().trim() != "") {
                        if (row.getCell(Constant.BULKSHEETCESS).getStringCellValue().trim().equalsIgnoreCase("Yes")
                                || row.getCell(Constant.BULKSHEETCESS).getStringCellValue().trim()
                                .equalsIgnoreCase("No")) {
                        } else {
                            result = false;
                            rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETCESS)
                                    + ")-only Yes or No-\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETCESSRATE) != null
                            && row.getCell(Constant.BULKSHEETCESSRATE).getStringCellValue().trim() != "") {
                        if (RegexTest.validateDouble(
                                row.getCell(Constant.BULKSHEETCESSRATE).getStringCellValue().trim(), decimalNumber)) {
                        } else {
                            result = false;
                            rowNumberBuilder.append(
                                    "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETCESSRATE) + ")-\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETEXPIRATIONDAYS) != null
                            && row.getCell(Constant.BULKSHEETEXPIRATIONDAYS).getStringCellValue().trim() != "") {
                        if (RegexTest.validateInterger(
                                row.getCell(Constant.BULKSHEETEXPIRATIONDAYS).getStringCellValue().trim())) {
                        } else {
                            result = false;
                            rowNumberBuilder.append(
                                    "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETEXPIRATIONDAYS) + ")-\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(Constant.BULKSHEETNETWEIGHT) != null
                            && row.getCell(Constant.BULKSHEETNETWEIGHT).getStringCellValue().trim() != "") {
                        if (RegexTest
                                .validateName(row.getCell(Constant.BULKSHEETNETWEIGHT).getStringCellValue().trim())) {
                        } else {
                            result = false;
                            rowNumberBuilder.append(
                                    "(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETNETWEIGHT) + ")-\n");
                        }
                    } else {
                        // result = true;
                        // rowNumber += "(" + i + ",O)-";
                    }

                } catch (Exception e) {
                    // e.printStackTrace();
                }
                // log.warning("discounttype-------->"+discounttype);

                // log.warning("purchaseprice-------->"+purchaseprice);
                // log.warning("mrp-------->"+mrp);
                // log.warning("discount-------->"+discount);
                if (purchasetaxincluding == 1) {
                    landingCost = purchaseprice;
                    try {
                        purchaseprice = round((purchaseprice / ((purchasetaxRate + 100) / 100)), 2);
                    } catch (Exception e) {

                    }
                } else {
                    landingCost = purchaseprice + ((purchaseprice * purchasetaxRate) / 100);
                }
                // log.warning("landingCost-------->"+landingCost);
                if (mrp >= landingCost && StringUtils.isNotBlank(discounttype)) {
                    // log.info("calll discount:::"+discount+":::"+landingCost);
                    if (discounttype.equalsIgnoreCase("percentage")) {
                        // log.info("mrp:::::::::::::::;"+landingCost+":::::::;"+(mrp-((mrp*discount)/100)));
                        if (landingCost <= (mrp - ((mrp * discount) / 100))) {

                        } else {
                            result = false;
                            rowNumberBuilder.append("(" + i + ")-(sellingprice is smaller than landingcost)-");
                        }
                    } else {
                        // log.info("mrp:::::::::::::::;"+landingCost+":::::::;"+(mrp-((discount))));
                        if (landingCost <= (mrp - ((discount)))) {

                        } else {
                            log.info("noooooooooo");
                            result = false;
                            rowNumberBuilder.append("(" + i + ")-(sellingprice is smaller than landingcost)-");
                        }
                    }
                } else {
                    result = false;
                    rowNumberBuilder.append("(" + i + ")-(Mrp is smaller than landingcost)-");
                }

                // -------po quantity is on------//
                if (poCompanySetting != null && poCompanySetting.getValue() == 1) {
                    try {
                        if (row.getCell(Constant.BULKSHEETPOQTY) != null
                                && row.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim() != "") {
                            // System.err.println("poQuantity" +
                            // row.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim());
                            if (RegexTest.validateInterger(
                                    row.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim())) {

                                int poQty = Integer
                                        .parseInt(row.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim());
                                int stockLimit = Integer.parseInt(
                                        row.getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim());
                                if (poQty <= stockLimit) {
                                    result = false;
                                    rowNumberBuilder
                                            .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPOQTY)
                                                    + ")-PO Quantity  Must be greater than Stock Limit\n");
                                } else {

                                }

                            } else {
                                // System.err.println("error not digit");
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETPOQTY)
                                        + ")-only digits\n");
                            }
                        } else {
                            result = false;
                            // rowNumber += "(" + i + ",O)-";
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        if (row.getCell(Constant.BULKSHEETSTOCKLIMIT) != null
                                && row.getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim() != "") {
                            // System.err.println("StockLimit" +
                            // row.getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim());
                            if (RegexTest.validateInterger(
                                    row.getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim())) {
                            } else {
                                // System.err.println("error not digit");
                                result = false;
                                rowNumberBuilder.append("(" + i + ","
                                        + Constant.SHEET_NAME.get(Constant.BULKSHEETSTOCKLIMIT) + ")-only digits\n");
                            }
                        } else {
                            result = false;
                            // rowNumber += "(" + i + ",O)-";
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    log.warning("SHEETPRODUCTTYPE po----------->" + SHEETPRODUCTTYPE);
                    // log.warning("SHEETWHOLESALEPRICE po----------->"+SHEETWHOLESALEPRICE);
                    // log.warning("SHEETRETAILERPRICE po----------->"+SHEETRETAILERPRICE);
                    // log.warning("SHEETONLINEPRICE po----------->"+SHEETONLINEPRICE);
                    if (productType.getValue() == 1) {
                        try {
                            if (row.getCell(SHEETPRODUCTTYPE) != null
                                    && row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim() != "") {
                                try {
                                    if (!Constant.PRODUCT_TYPE_LIST
                                            .contains(row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim())) {
                                        result = false;
                                        rowNumberBuilder.append("(" + i + ","
                                                + Constant.SHEET_NAME.get(SHEETPRODUCTTYPE)
                                                + ")-(Product Type Must be From [Finished,SemiFinished,Packaging,Raw])-");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETPRODUCTTYPE)
                                        + ")-(Product Type Required)\n");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    if (allPriceShow.getValue() == 1) {
                        double wholesaleprice = 0;
                        double retailerprice = 0;
                        try {
                            if (row.getCell(SHEETWHOLESALEPRICE) != null
                                    && row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(
                                        row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim(), decimalNumber)) {
                                    wholesaleprice = Double
                                            .parseDouble(row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim());
                                    // log.info("wholesaleprice::->>>>>>>>>>>>>"+wholesaleprice);
                                    // log.info("landingCost::->>>>>>>>>>>>>"+landingCost);
                                    // log.info("mrp::->>>>>>>>>>>>>"+mrp);
                                    if (mrp < wholesaleprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                                        + ")- (Mrp is smaller than Wholesale price)-");

                                        // log.info("wholesaleprice::->>>>>>>>>>>>>issueee");
                                    }
                                    if (landingCost > wholesaleprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                                        + ")- (Wholesale price can't be smaller than Landing price)-");

                                        // log.info("wholesaleprice::->>>>>>>>>>>>>issueee");
                                    }
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                            + ")-(Wholesale price Is InValid)-\n");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                        + ")-(Wholesale Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(SHEETRETAILERPRICE) != null
                                    && row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(
                                        row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim(), decimalNumber)) {
                                    retailerprice = Double
                                            .parseDouble(row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim());
                                    // log.info("retailerprice::->>>>>>>>>>>>>"+retailerprice);
                                    // log.info("landingCost::->>>>>>>>>>>>>"+landingCost);
                                    // log.info("mrp::->>>>>>>>>>>>>"+mrp);
                                    if (mrp < retailerprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                                        + ") -( Mrp is smaller than Retailer price)-");
                                    }
                                    if (landingCost > retailerprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                                        + ")- ( landingCost is smaller than Retailer price)-");

                                    }

                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                            + ")-(Retailer price Is  InValid)-");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                        + ")-(Retailer Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(SHEETONLINEPRICE) != null
                                    && row.getCell(SHEETONLINEPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(row.getCell(SHEETONLINEPRICE).getStringCellValue().trim(),
                                        decimalNumber)) {
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETONLINEPRICE)
                                            + ")-(Online price Is  InValid)-");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETONLINEPRICE)
                                        + ")-(Online Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    try {
                        if (row.getCell(SHEETMINQTY) != null
                                && row.getCell(SHEETMINQTY).getStringCellValue().trim() != "") {
                            if (isUmoWiseDecimalRestrictionStopped.getValue() == 0) {
                                if (!productService.validateDigitAfterDecimal(
                                        row.getCell(SHEETMINQTY).getStringCellValue().trim(),
                                        allowedDigitAfterDecimal)) {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETMINQTY)
                                            + ")-(Minimum Qty Is not Valid as per UOM)-");
                                }
                            }

//                               if (RegexTest.validateDouble(row.getCell(SHEETMINQTY).getStringCellValue().trim(),decimalNumber)) {
//                               } else {
//                                   result = false;
//                                   rowNumberBuilder.append("(" + i + ","+Constant.SHEET_NAME.get(SHEETMINQTY)+")-(Minimum Qty Is not Valid)-");
//                               }
                        }
//                           else {
//                               result = false;
//                               rowNumber+= "(" + i + ",AI)-(Minimum Qty Is Required)-";
//                           }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else if (membershipSetting.getValue() == 1) {
                    // log.info("result:::::::::::::::::::::::::::::: "+result);
                    try {
                        if (row.getCell(Constant.BULKSHEETMEMBERSHIP) != null
                                && row.getCell(Constant.BULKSHEETMEMBERSHIP).getStringCellValue().trim() != "") {

                            if (RegexTest.validateDouble(
                                    row.getCell(Constant.BULKSHEETMEMBERSHIP).getStringCellValue().trim(),
                                    decimalNumber)) {

                            } else {
                                // System.err.println("error not digit");
                                result = false;
                                rowNumberBuilder
                                        .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETMEMBERSHIP)
                                                + ")-Membership Margin is InValid\n");
                            }
                        } else {
                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETMEMBERSHIP)
                                            + ")-Membership Margin is requierd.\n");
                            // rowNumber += "(" + i + ",O)-";
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        if (row.getCell(Constant.BULKSHEETMEMBERSHIPTYPE) != null
                                && row.getCell(Constant.BULKSHEETMEMBERSHIPTYPE).getStringCellValue().trim() != "") {

                        } else {
                            result = false;
                            rowNumberBuilder
                                    .append("(" + i + "," + Constant.SHEET_NAME.get(Constant.BULKSHEETMEMBERSHIPTYPE)
                                            + ")-Membership Margin Type is requierd.\n");
                            // rowNumber += "(" + i + ",O)-";
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    log.warning("SHEETPRODUCTTYPE membership----------->" + SHEETPRODUCTTYPE);
                    // log.warning("SHEETWHOLESALEPRICE
                    // membership----------->"+SHEETWHOLESALEPRICE);
                    // log.warning("SHEETRETAILERPRICE membership----------->"+SHEETRETAILERPRICE);
                    // log.warning("SHEETONLINEPRICE membership----------->"+SHEETONLINEPRICE);
                    if (productType.getValue() == 1) {
                        try {
                            if (row.getCell(SHEETPRODUCTTYPE) != null
                                    && row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim() != "") {
                                try {
                                    if (!Constant.PRODUCT_TYPE_LIST
                                            .contains(row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim())) {
                                        result = false;
                                        rowNumberBuilder.append("(" + i + ","
                                                + Constant.SHEET_NAME.get(SHEETPRODUCTTYPE)
                                                + ")-(Product Type Must be From [Finished,SemiFinished,Packaging,Raw])-");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETPRODUCTTYPE)
                                        + ")-(Product Type Required)\n");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    if (allPriceShow.getValue() == 1) {
                        double wholesaleprice = 0;
                        double retailerprice = 0;
                        try {
                            if (row.getCell(SHEETWHOLESALEPRICE) != null
                                    && row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(
                                        row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim(), decimalNumber)) {
                                    wholesaleprice = Double
                                            .parseDouble(row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim());
                                    // log.info("wholesaleprice::->>>>>>>>>>>>>"+wholesaleprice);
                                    // log.info("landingCost::->>>>>>>>>>>>>"+landingCost);
                                    // log.info("mrp::->>>>>>>>>>>>>"+mrp);
                                    if (mrp < wholesaleprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                                        + ")- (Mrp is smaller than Wholesale price)-");
                                        // log.info("wholesaleprice::->>>>>>>>>>>>>issueee");
                                    }
                                    if (landingCost > wholesaleprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                                        + ")- (Wholesale price can't be smaller than Landing price)-");
                                        // log.info("wholesaleprice::->>>>>>>>>>>>>issueee");
                                    }
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                            + ")-(Wholesale price Is  InValid)-\n");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                        + ")-(Wholesale Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(SHEETRETAILERPRICE) != null
                                    && row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(
                                        row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim(), decimalNumber)) {
                                    retailerprice = Double
                                            .parseDouble(row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim());
                                    // log.info("retailerprice::->>>>>>>>>>>>>"+retailerprice);
                                    // log.info("landingCost::->>>>>>>>>>>>>"+landingCost);
                                    // log.info("mrp::->>>>>>>>>>>>>"+mrp);
                                    if (mrp < retailerprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                                        + ") -( Mrp is smaller than Retailer price)-");
                                    }
                                    if (landingCost > retailerprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                                        + ")- ( landingCost is smaller than Retailer price)-");
                                    }
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                            + ")-(Retailer price Is  InValid)-");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                        + ")-(Retailer Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(SHEETONLINEPRICE) != null
                                    && row.getCell(SHEETONLINEPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(row.getCell(SHEETONLINEPRICE).getStringCellValue().trim(),
                                        decimalNumber)) {
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETONLINEPRICE)
                                            + ")-(Online price Is  InValid)-");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETONLINEPRICE)
                                        + ")-(Online Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    // log.info("result:::::::::::::::::::::::::::::: "+result);
                    try {
                        if (row.getCell(SHEETMINQTY) != null
                                && row.getCell(SHEETMINQTY).getStringCellValue().trim() != "") {
                            if (isUmoWiseDecimalRestrictionStopped.getValue() == 0) {
                                if (!productService.validateDigitAfterDecimal(
                                        row.getCell(SHEETMINQTY).getStringCellValue().trim(),
                                        allowedDigitAfterDecimal)) {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETMINQTY)
                                            + ")-(Minimum Qty Is not Valid as per UOM)-");
                                }
                            }
//                           if (RegexTest.validateDouble(row.getCell(SHEETMINQTY).getStringCellValue().trim(),decimalNumber)) {
//                           } else {
//                               result = false;
//                               rowNumberBuilder.append("(" + i + ","+Constant.SHEET_NAME.get(SHEETMINQTY)+")-(Minimum Qty Is not Valid)-");
//                           }
                        }
//                       else {
//                           result = false;
//                           rowNumber+= "(" + i + ",AJ)-(Minimum Qty Is Required)-";
//                       }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                log.warning("plainSheet----------->" + plainSheet);
                if (plainSheet) {
                    log.warning("SHEETPRODUCTTYPE----------->" + SHEETPRODUCTTYPE);
                    // log.warning("SHEETWHOLESALEPRICE----------->"+SHEETWHOLESALEPRICE);
                    // log.warning("SHEETRETAILERPRICE----------->"+SHEETRETAILERPRICE);
                    // log.warning("SHEETONLINEPRICE----------->"+SHEETONLINEPRICE);
                    // log.warning("productType.getValue()----------->"+productType.getValue());
                    // log.warning("allPriceShow.getValue()----------->"+allPriceShow.getValue());
                    if (productType.getValue() == 1) {
                        try {
                            if (row.getCell(SHEETPRODUCTTYPE) != null
                                    && row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim() != "") {
                                try {
                                    if (!Constant.PRODUCT_TYPE_LIST
                                            .contains(row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim())) {
                                        result = false;
                                        rowNumberBuilder.append("(" + i + ","
                                                + Constant.SHEET_NAME.get(SHEETPRODUCTTYPE)
                                                + ")-(Product Type Must be From [Finished,SemiFinished,Packaging,Raw])-");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETPRODUCTTYPE)
                                        + ")-(Product Type Required)\n");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    if (allPriceShow.getValue() == 1) {
                        double wholesaleprice = 0;
                        double retailerprice = 0;
                        try {
                            if (row.getCell(SHEETWHOLESALEPRICE) != null
                                    && row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(
                                        row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim(), decimalNumber)) {
                                    wholesaleprice = Double
                                            .parseDouble(row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim());
                                    // log.info("wholesaleprice::->>>>>>>>>>>>>"+wholesaleprice);
                                    // log.info("landingCost::->>>>>>>>>>>>>"+landingCost);
                                    // log.info("mrp::->>>>>>>>>>>>>"+mrp);
                                    if (mrp < wholesaleprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                                        + ")- (Mrp is smaller than Wholesale price)-");

                                        // log.info("wholesaleprice::->>>>>>>>>>>>>issueee");
                                    }
                                    if (landingCost > wholesaleprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                                        + ")- (Wholesale price can't be smaller than Landing price)-");
                                        // log.info("wholesaleprice::->>>>>>>>>>>>>issueee");
                                    }
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                            + ")-(Wholesale price Is  InValid)-\n");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETWHOLESALEPRICE)
                                        + ")-(Wholesale Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(SHEETRETAILERPRICE) != null
                                    && row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(
                                        row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim(), decimalNumber)) {
                                    retailerprice = Double
                                            .parseDouble(row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim());
                                    // log.info("retailerprice::->>>>>>>>>>>>>"+retailerprice);
                                    // log.info("landingCost::->>>>>>>>>>>>>"+landingCost);
                                    // log.info("mrp::->>>>>>>>>>>>>"+mrp);
                                    if (mrp < retailerprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                                        + ") -( Mrp is smaller than Retailer price)-");
                                    }
                                    if (landingCost > retailerprice) {
                                        result = false;
                                        rowNumberBuilder
                                                .append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                                        + ")- ( landingCost is smaller than Retailer price)-");
                                    }
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                            + ")-(Retailer price Is  InValid)-");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETRETAILERPRICE)
                                        + ")-(Retailer Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(SHEETONLINEPRICE) != null
                                    && row.getCell(SHEETONLINEPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(row.getCell(SHEETONLINEPRICE).getStringCellValue().trim(),
                                        decimalNumber)) {
                                } else {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETONLINEPRICE)
                                            + ")-(Online price Is  InValid)-");
                                }
                            } else {
                                result = false;
                                rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETONLINEPRICE)
                                        + ")-(Online Price Is Required)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    try {
                        if (row.getCell(SHEETMINQTY) != null
                                && row.getCell(SHEETMINQTY).getStringCellValue().trim() != "") {
                            if (isUmoWiseDecimalRestrictionStopped.getValue() == 0) {
                                if (!productService.validateDigitAfterDecimal(
                                        row.getCell(SHEETMINQTY).getStringCellValue().trim(),
                                        allowedDigitAfterDecimal)) {
                                    result = false;
                                    rowNumberBuilder.append("(" + i + "," + Constant.SHEET_NAME.get(SHEETMINQTY)
                                            + ")-(Minimum Qty Is not Valid as per UOM)-");
                                }
                            }
//                           if (RegexTest.validateDouble(row.getCell(SHEETMINQTY).getStringCellValue().trim(),decimalNumber)) {
//                           } else {
//                               result = false;
//                               rowNumberBuilder.append("(" + i + ","+Constant.SHEET_NAME.get(SHEETMINQTY)+")-(Minimum Qty Is not Valid)-");
//                           }
                        }
//                       else {
//                           result = false;
//                           rowNumber+= "(" + i + ",AF)-(Minimum Qty Is Required)-";
//                       }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    log.warning("SHEETPRODUCTTYPE plain sheet false----------->" + SHEETPRODUCTTYPE);
                    // log.warning("SHEETWHOLESALEPRICE plain sheet
                    // false----------->"+SHEETWHOLESALEPRICE);
                    // log.warning("SHEETRETAILERPRICE plain sheet
                    // false----------->"+SHEETRETAILERPRICE);
                    // log.warning("SHEETONLINEPRICE plain sheet
                    // false----------->"+SHEETONLINEPRICE);
                }

                // -------po quantity is on------//
                // log.info("Row No= " + (row.getRowNum() + 1));
                i++;
            }

        }
        rowNumber = rowNumberBuilder.toString();
        workbook.close();
        in.close();

        // log.info("Final Result----------->" + result);
        return result;
    }

    @RequestMapping(value = "/update_bulk_product/upload/excel")
    @ResponseBody
    public String ImportCustomertodbUpdateProducts(HttpSession session, HttpServletRequest request) throws IOException {
        CompanySettingVo productType = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);
        CompanySettingVo allPriceShow = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW);
        CompanySettingVo poCompanySetting = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
        CompanySettingVo membershipSetting = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP);
        String filepath = (String) session.getAttribute("filepath");
        File fb = new File(filepath);
        // log.info("update bulck upload");
        InputStream in = new FileInputStream(fb);

        // Create Workbook instance holding reference to .xlsx file
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        // Get first/desired sheet from the workbook
        XSSFSheet sheet = workbook.getSheetAt(0);
        String taxCode = Constant.GST;
        int taxType = Constant.TAX_TYPE_GST;
        try {
            Map<String, String> gstMap = userRepository
                    .getgstDetails(Long.parseLong(session.getAttribute("companyId").toString()));
            if (gstMap != null && !gstMap.isEmpty()) {
                if (StringUtils.isNotBlank(gstMap.get("tax_type"))
                        && StringUtils.equalsIgnoreCase(gstMap.get("tax_type"), Constant.VAT)) {
                    taxCode = Constant.VAT;
                    taxType = Constant.TAX_TYPE_VAT;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        // Iterate through each rows one by one
        Iterator<Row> rowIterator = sheet.iterator();
        rowIterator.next();
        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            // For each row, iterate through all the columns
            Iterator<Cell> cellIterator = row.cellIterator();

            while (cellIterator.hasNext()) {
                Cell cell = cellIterator.next();
                // Check the cell type and format accordingly
                cell.setCellType(Cell.CELL_TYPE_STRING);
                switch (cell.getCellType()) {
                    case Cell.CELL_TYPE_BOOLEAN:

                        // log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
                        break;
                    case Cell.CELL_TYPE_NUMERIC:

                        break;
                    case Cell.CELL_TYPE_STRING:

                        // list.add(cell.getStringCellValue().trim());
                        break;

                }

            }
            List<CategoryVo> categoryVo = new ArrayList<>();
            List<CategoryVo> subCategoryVo = new ArrayList<>();
            UnitOfMeasurementVo unitOfMeasurementVo = new UnitOfMeasurementVo();
            List<BrandVo> brandVo = new ArrayList<>();
            List<BrandVo> subBrandVo = new ArrayList<>();
            List<DepartmentVo> departmentVo = new ArrayList<>();
            DepartmentVo departmentVo1 = new DepartmentVo();
            TaxVo taxVo = new TaxVo();
            TaxVo purchasetaxVo = new TaxVo();
            log.info("Row No= " + (row.getRowNum() + 1) + " Itemcode:------"
                    + row.getCell(Constant.BULKSHEETITEMCODE).getStringCellValue().trim());
            List<ProductVarientsVo> productVarient = new ArrayList<>();
            productVarient = productService.findByitemCodeIgnoreCaseAndCompanyIdWithoutMerchatType(
                    securityValidation.checkAndReplaceCsvInjectionCharacters(
                            row.getCell(Constant.BULKSHEETITEMCODE).getStringCellValue().trim()),
                    Long.parseLong(session.getAttribute("companyId").toString()));
            // ////log.info("Size:" + productVarient.size());

            int SHEETPRODUCTTYPE = 31;
            int SHEETWHOLESALEPRICE = 32;
            int SHEETRETAILERPRICE = 33;
            int SHEETONLINEPRICE = 34;
            int SHEETMINQTY = 35;
            int SHEETIMAGELINK = 36;
            if (membershipSetting.getValue() == 1) {
                SHEETPRODUCTTYPE = 35;
                SHEETWHOLESALEPRICE = 36;
                SHEETRETAILERPRICE = 37;
                SHEETONLINEPRICE = 38;
                SHEETMINQTY = 39;
                SHEETIMAGELINK = 40;
            }
            if (poCompanySetting.getValue() == 1) {
                SHEETPRODUCTTYPE = 33;
                SHEETWHOLESALEPRICE = 34;
                SHEETRETAILERPRICE = 35;
                SHEETONLINEPRICE = 36;
                SHEETMINQTY = 37;
                SHEETIMAGELINK = 38;
            }
            int purchasetaxincluding = 0;
            if (!CollectionUtils.isEmpty(productVarient)) {
                double margin = 0.0;
                double price = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                        row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim()));
                double purchasePrice = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                        row.getCell(Constant.BULKSHEETPURCHASEPRICE).getStringCellValue().trim()));
                double taxrate = 0, landingcost = 0, purchasetaxRate = 0;
                int taxincluding = 0;
                double mainPurchasePrice = productVarient.get(0).getPurchasePrice();
                double mainPurchaseTaxRate = productVarient.get(0).getProductVo().getPurchaseTaxVo().getTaxRate();
                int mainPurchaseTaxIncluded = productVarient.get(0).getProductVo().getPurchaseTaxIncluded();

                try {

                    productVarient.get(0).getProductVo()
                            .setName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETPRODUCTNAME).getStringCellValue().trim()));
                } catch (Exception e) {
                }
                if (productVarient.get(0).getProductVo().getHaveVariation() == 1) {
                    try {
                        productVarient.get(0).setVarientName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETVARIENTNAME).getStringCellValue().trim()));

                    } catch (Exception e) {

                    }
                }

                // log.warning("productType.getValue()----->"+productType.getValue());
                // log.warning("allPriceShow.getValue()----->"+allPriceShow.getValue());
                try {
                    if (productType.getValue() == 1) {
                        // log.warning("SHEETPRODUCTTYPE----->Value----->"+row.getCell(SHEETPRODUCTTYPE).getStringCellValue());
                        if (row.getCell(SHEETPRODUCTTYPE) != null
                                && row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim() != "") {
                            if (Constant.PRODUCT_TYPE_LIST
                                    .contains(row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim())) {
                                productVarient.get(0).getProductVo()
                                        .setProductType(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(SHEETPRODUCTTYPE).getStringCellValue().trim()));
                            }
                        }
                    } else {
                        productVarient.get(0).getProductVo().setProductType("Finished");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(SHEETMINQTY) != null
                            && row.getCell(SHEETMINQTY).getStringCellValue().trim() != "") {
                        productVarient.get(0)
                                .setMinQty(Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(SHEETMINQTY).getStringCellValue().trim())));
                    } else {
                        productVarient.get(0).setMinQty(0);
                    }
                } catch (Exception e) {
                    productVarient.get(0).setMinQty(0);
                }
                try {
                    if (row.getCell(SHEETONLINEPRICE) != null
                            && row.getCell(SHEETONLINEPRICE).getStringCellValue().trim() != "") {
                        productVarient.get(0).setShopifyPrice(
                                Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(SHEETONLINEPRICE).getStringCellValue().trim())));
                    } else {
                        // productVarient.get(0).setShopifyPrice(0);
                    }
                } catch (Exception e) {
                    // productVarient.get(0).setMinQty(0);
                }

                try {
                    productVarient.get(0).getProductVo()
                            .setDisplayName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETPRINTNAME).getStringCellValue().trim()));

                } catch (Exception e) {

                }
                try {
                    productVarient.get(0).setItemCode(securityValidation.checkAndReplaceCsvInjectionCharacters(
                            row.getCell(Constant.BULKSHEETITEMCODE).getStringCellValue().trim()));

                } catch (Exception e) {
                    productVarient.get(0).setItemCode("");
                }
                try {
                    productVarient.get(0).getProductVo()
                            .setDescription(row.getCell(Constant.BULKSHEETDESCRIPTION).getStringCellValue().trim());
                } catch (Exception e) {
                    productVarient.get(0).getProductVo().setDescription("");
                }
                try {
                    productVarient.get(0).getProductVo().setShortDescription(
                            row.getCell(Constant.BULKSHEETSHORTDESCRIPTION).getStringCellValue().trim());
                } catch (Exception e) {
                    productVarient.get(0).getProductVo().setShortDescription("");
                }
                try {
                    productVarient.get(0).getProductVo()
                            .setIngredients(row.getCell(Constant.BULKSHEETINGREDIENTS).getStringCellValue().trim());
                } catch (Exception e) {
                    productVarient.get(0).getProductVo().setIngredients("");
                }
                try {
                    productVarient.get(0).setPurchasePrice(
                            Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETPURCHASEPRICE).getStringCellValue().trim())));
                } catch (Exception e) {
                    productVarient.get(0).setPurchasePrice(0);
                }

                try {

                    String tax_code = "";
                    if (Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                            row.getCell(Constant.BULKSHEETPURCHASETAXRATE).getStringCellValue().trim())) == 0) {
                        tax_code = (taxCode + "0");
                    }
                    purchasetaxVo = taxService.findByTaxRateAndIsGlobalOrCompanyIdAndTaxTypeAndTaxCode(
                            Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETPURCHASETAXRATE).getStringCellValue().trim())),
                            Long.parseLong(session.getAttribute("companyId").toString()), taxType, tax_code);
                    if (purchasetaxVo == null) {
                        purchasetaxVo = new TaxVo();
                        purchasetaxVo.setTaxName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETPURCHASETAXNAME).getStringCellValue().trim()));
                        purchasetaxVo
                                .setTaxRate(Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETPURCHASETAXRATE).getStringCellValue().trim())));
                        purchasetaxVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        purchasetaxVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        purchasetaxVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        purchasetaxVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));

                        AccountCustomVo accountCustomVo = new AccountCustomVo();
                        accountCustomVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        accountCustomVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        accountCustomVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        accountCustomVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        accountCustomVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                        accountCustomVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                        accountCustomVo
                                .setAccountName(purchasetaxVo.getTaxName() + "(" + purchasetaxVo.getTaxRate() + "%)");

                        AccountGroupVo accountGroupVo = new AccountGroupVo();
                        accountGroupVo.setAccountGroupId(Constant.ACCOUNT_GROUP_DUTIES_AND_TAXES);
                        accountCustomVo.setAccounType(Constant.TAX);
                        accountCustomVo.setGroup(accountGroupVo);
                        accountCustomService.insertAccount(accountCustomVo);
                        purchasetaxVo.setAccountCustomVo(accountCustomVo);
                        taxService.save(purchasetaxVo);

                        productVarient.get(0).getProductVo().setPurchaseTaxVo(purchasetaxVo);
                        purchasetaxRate = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETPURCHASETAXRATE).getStringCellValue().trim()));
                    } else {
                        productVarient.get(0).getProductVo().setPurchaseTaxVo(purchasetaxVo);
                        purchasetaxRate = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETPURCHASETAXRATE).getStringCellValue().trim()));
                    }

                    try {
                        taxrate = productVarient.get(0).getProductVo().getPurchaseTaxVo().getTaxRate();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        taxincluding = productVarient.get(0).getProductVo().getPurchaseTaxIncluded();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        purchasetaxincluding = row.getCell(Constant.BULKSHEETPURCHASETAXINCLUDING).getStringCellValue()
                                .trim().equalsIgnoreCase("Yes") ? 1 : 0;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // log.warning("====================START========================");
                    // log.warning("mainPurchasePrice-------->"+mainPurchasePrice);
                    // log.warning("mainPurchaseTaxrate-------->"+mainPurchaseTaxRate);
                    // log.warning("mainPurchaseTaxIncluded-------->"+mainPurchaseTaxIncluded);

                    // log.warning("purchasetaxincluding-------->"+purchasetaxincluding);
                    // log.warning("purchasePrice-------->"+purchasePrice);
                    // log.warning("purchasetaxRate-------->"+purchasetaxRate);
                    if ((mainPurchasePrice == purchasePrice) && (mainPurchaseTaxIncluded == purchasetaxincluding)
                            && (mainPurchaseTaxRate == purchasetaxRate)) {
                        // log.warning("HERE No Change in Pricing");
//                      if(taxincluding==1) {
//                          landingcost=round(purchasePrice, 2);
//                      }else {
//                          landingcost=round(purchasePrice+((purchasePrice*taxrate)/100),2);
//                      }
//                      productVarient.get(0).setLandingCost(landingcost);
                    } else {
                        // log.warning("HERE Change in Pricing");
                        if (purchasetaxincluding == 1) {
                            landingcost = purchasePrice;
                            try {
                                productVarient.get(0)
                                        .setPurchasePrice(round((purchasePrice / ((purchasetaxRate + 100) / 100)), 2));
                                purchasePrice = productVarient.get(0).getPurchasePrice();
                            } catch (Exception e) {
                                productVarient.get(0).setPurchasePrice(0);
                            }
                        } else {
                            landingcost = round(purchasePrice + ((purchasePrice * purchasetaxRate) / 100), 2);
                        }
                        productVarient.get(0).setLandingCost(landingcost);
                    }

                    // log.warning("=====================END=======================");

                    // log.info("landingcost:::"+landingcost);
                    try {
                        // productVarient.get(0).getProductVo()
                        // .setDiscount(Double.parseDouble(row.getCell(Constant.BULKSHEETDISCOUNT).getStringCellValue().trim()));
                        productVarient.get(0).setDiscount(
                                Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETDISCOUNT).getStringCellValue().trim())));
                    } catch (Exception e) {
                        // productVarient.get(0).getProductVo().setDiscount(0);
                        productVarient.get(0).setDiscount(0);
                    }

                    try {
                        productVarient.get(0)
                                .setMrp(Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim())));
                        // productVarient.get(0).setRetailerPrice(Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim())));
                    } catch (Exception e) {
                        productVarient.get(0).setMrp(0.0);
                        // productVarient.get(0).setRetailerPrice(0.0);
                    }

                    try {
                        // log.info("amount------");
                        if (row.getCell(Constant.BULKSHEETDISCOUNTYTPE).getStringCellValue().trim()
                                .equalsIgnoreCase("percentage")) {
                            // log.info("amount------");
                            // productVarient.get(0).getProductVo().setDiscountType("percentage");
                            productVarient.get(0).setDiscountType("percentage");
                            double sellingPrice = (productVarient.get(0).getMrp()
                                    - (productVarient.get(0).getDiscount() * productVarient.get(0).getMrp()) / 100);

                            productVarient.get(0).setSellingPrice(sellingPrice);
                            if (productVarient.get(0).getRetailerMarginType().equalsIgnoreCase("amount")) {
                                margin = round((sellingPrice - landingcost), 2);
                                productVarient.get(0).setRetailerMargin(margin);
                            } else {
                                margin = round(((sellingPrice * 100 / landingcost) - 100), 2);
                                productVarient.get(0).setRetailerMargin(margin);
                            }
                        } else {
                            // log.info("amount------");
                            // productVarient.get(0).getProductVo().setDiscountType("amount");
                            productVarient.get(0).setDiscountType("amount");
                            productVarient.get(0).setSellingPrice(
                                    productVarient.get(0).getMrp() - productVarient.get(0).getDiscount());
                            double sellingPrice = productVarient.get(0).getMrp() - productVarient.get(0).getDiscount();
                            if (productVarient.get(0).getRetailerMarginType().equalsIgnoreCase("amount")) {
                                margin = round((sellingPrice - landingcost), 2);
                                productVarient.get(0).setRetailerMargin(margin);
                            } else {
                                margin = round(((sellingPrice * 100 / landingcost) - 100), 2);
                                productVarient.get(0).setRetailerMargin(margin);
                            }
                        }
                    } catch (Exception e) {
                        // log.info("amount------");
                        // productVarient.get(0).getProductVo().setDiscountType("percentage");
                        productVarient.get(0).setDiscountType("percentage");
                        productVarient.get(0).setSellingPrice(0);
                    }

                    // log.info("margin----"+margin);

                } catch (Exception e) {
                    productVarient.get(0).setRetailerMargin(0);
                }

                // log.info("margin settttt----"+productVarient.get(0).getRetailerMargin());

//              try {
//
//                  productVarient.get(0)
//                          .setSellingPrice(Double.parseDouble(row.getCell(Constant.BULKSHEETMRP).getStringCellValue().trim()));
//              } catch (Exception e) {
//                  productVarient.get(0).setSellingPrice(0);
//              }

                ///////////////////////////// tax////////////////

                try {
                    String tax_code = "";
                    if (Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                            row.getCell(Constant.BULKSHEETSALESTAXRATE).getStringCellValue().trim())) == 0) {
                        tax_code = (taxCode + "0");
                    }
                    taxVo = taxService.findByTaxRateAndIsGlobalOrCompanyIdAndTaxTypeAndTaxCode(
                            Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETSALESTAXRATE).getStringCellValue().trim())),
                            Long.parseLong(session.getAttribute("companyId").toString()), taxType, tax_code);
                    if (taxVo == null) {
                        taxVo = new TaxVo();
                        taxVo.setTaxName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETSALESTAXNAME).getStringCellValue().trim()));
                        taxVo.setTaxRate(Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETSALESTAXRATE).getStringCellValue().trim())));
                        taxVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        taxVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        taxVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        taxVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        taxService.save(taxVo);
                        productVarient.get(0).getProductVo().setTaxVo(taxVo);
                    } else {
                        productVarient.get(0).getProductVo().setTaxVo(taxVo);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    departmentVo = departmentService.findbyDepartmentNameIgnoreCaseAndCompanyId(
                            securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETDEPARTMENT).getStringCellValue().trim()),
                            Long.parseLong(session.getAttribute("companyId").toString()));
                    if (!(departmentVo.size() > 0)) {
                        departmentVo1 = new DepartmentVo();
                        departmentVo1.setDepartmentName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETDEPARTMENT).getStringCellValue().trim()));
                        departmentVo1.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        departmentVo1.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        departmentVo1.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        departmentVo1.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        departmentVo1.setCreatedOn(CurrentDateTime.getCurrentDate());
                        departmentVo1.setModifiedOn(CurrentDateTime.getCurrentDate());
                        departmentService.save(departmentVo1);
                        productVarient.get(0).getProductVo().getCategoryVo().setDepartmentVo(departmentVo1);
                    } else {
                        productVarient.get(0).getProductVo().getCategoryVo().setDepartmentVo(departmentVo.get(0));
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    categoryVo = categoryService.findByCategoryNameIgnoreCaseAndCompanyIdAndIsDeleted(
                            securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETCATEGORY).getStringCellValue().trim()),
                            Long.parseLong(session.getAttribute("companyId").toString()));
                    if (categoryVo.size() > 0) {
                        categoryVo.get(0).setDepartmentVo(
                                productVarient.get(0).getProductVo().getCategoryVo().getDepartmentVo());
                        categoryService.save(categoryVo.get(0));
                        productVarient.get(0).getProductVo().setCategoryVo(categoryVo.get(0));
                    } else {
                        CategoryVo category1 = new CategoryVo();
                        category1.setCategoryName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETCATEGORY).getStringCellValue().trim()));
                        category1.setCategoryDescription("");
                        category1.setDepartmentVo(
                                productVarient.get(0).getProductVo().getCategoryVo().getDepartmentVo());
                        category1.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        category1.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        category1.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        category1.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        // log.info("category database"+category1.getCategoryName());
                        categoryService.save(category1);
                        productVarient.get(0).getProductVo().setCategoryVo(category1);
                        // log.info("category database"+
                        // productVarient.get(0).getProductVo().getCategoryVo().getCategoryName());
                        // productVo.setCategoryVo(categoryVo);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (row.getCell(Constant.BULKSHEETSUBCATEGORY) != null
                        && row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue().trim() != "") {
                    try {
                        subCategoryVo = categoryService.findByCategoryNameIgnoreCaseAndCompanyIdAndIsDeleted(
                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue().trim()),
                                Long.parseLong(session.getAttribute("companyId").toString()));
                        if (subCategoryVo.size() > 0) {
                            // subCategoryVo.get(0).setDepartmentVo(productVarient.get(0).getProductVo().getCategoryVo().getDepartmentVo());
                            // categoryService.save(subCategoryVo.get(0));
                            productVarient.get(0).getProductVo().setSubCategoryVo(subCategoryVo.get(0));
                        } else {
                            CategoryVo category1 = new CategoryVo();
                            category1.setCategoryName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETSUBCATEGORY).getStringCellValue().trim()));
                            category1.setCategoryDescription("");
                            category1.setDepartmentVo(
                                    productVarient.get(0).getProductVo().getCategoryVo().getDepartmentVo());
                            category1.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            category1.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            category1.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                            category1.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                            category1.setCategoryVo(productVarient.get(0).getProductVo().getCategoryVo());
                            categoryService.save(category1);
                            productVarient.get(0).getProductVo().setSubCategoryVo(category1);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        productVarient.get(0).getProductVo().setSubCategoryVo(null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        productVarient.get(0).getProductVo().setSubCategoryVo(null);
                    }
                }

                try {
                    // //log.info("hsnnnnnnnnnn" +
                    // row.getCell(Constant.BULKSHEETCATEGORY).getStringCellValue().trim());
                    productVarient.get(0).getProductVo()
                            .setHsnCode(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETHSNCODE).getStringCellValue().trim()));
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarient.get(0).getProductVo().setHsnCode("");
                }
                try {
                    productVarient.get(0).getProductVo().setTaxIncluded(row.getCell(Constant.BULKSHEETSALESTAXINCLUDING)
                            .getStringCellValue().trim().equalsIgnoreCase("Yes") ? 1 : 0);
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarient.get(0).getProductVo().setTaxIncluded(0);
                }
                try {
                    productVarient.get(0).getProductVo()
                            .setPurchaseTaxIncluded(row.getCell(Constant.BULKSHEETPURCHASETAXINCLUDING)
                                    .getStringCellValue().trim().equalsIgnoreCase("Yes") ? 1 : 0);
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarient.get(0).getProductVo().setPurchaseTaxIncluded(0);
                }
                try {
                    unitOfMeasurementVo = unitOfMeasurementService.FindByMeasurementCodeAndCompnayId(
                            securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETMEASURMENTCODE).getStringCellValue().trim()),
                            Long.parseLong(session.getAttribute("companyId").toString()));
                    if (unitOfMeasurementVo == null) {
                        unitOfMeasurementVo = new UnitOfMeasurementVo();
                        unitOfMeasurementVo.setMeasurementName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETMEASURMENTNAME).getStringCellValue().trim()));
                        unitOfMeasurementVo.setMeasurementCode(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETMEASURMENTCODE).getStringCellValue().trim()));
                        unitOfMeasurementVo.setNoOfDecimalPlaces(
                                Integer.parseInt(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETMEASURMENTDECIMAL).getStringCellValue().trim())));
                        unitOfMeasurementVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        unitOfMeasurementVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        unitOfMeasurementVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        unitOfMeasurementVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        unitOfMeasurementService.save(unitOfMeasurementVo);
                        productVarient.get(0).getProductVo().setUnitOfMeasurementVo(unitOfMeasurementVo);
                    } else {
                        productVarient.get(0).getProductVo().setUnitOfMeasurementVo(unitOfMeasurementVo);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    brandVo = brandService.findByBrandNameIgnoreCaseAndCompanyIdAndIsDeleted(
                            securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETBRAND).getStringCellValue().trim()),
                            Long.parseLong(session.getAttribute("companyId").toString()), 0);
                    if (!(brandVo.size() > 0)) {
                        BrandVo brandVo1 = new BrandVo();
                        brandVo1.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        brandVo1.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        brandVo1.setBrandName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(Constant.BULKSHEETBRAND).getStringCellValue().trim()));
                        try {
                            brandVo1.setBrandCode(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETBRANDCODE).getStringCellValue().trim()));
                        } catch (Exception e) {
                            e.printStackTrace();

                        }
                        brandVo1.setBrandDescription("");
                        brandVo1.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        brandVo1.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        brandService.save(brandVo1);
                        productVarient.get(0).getProductVo().setBrandVo(brandVo1);
                    } else {
                        productVarient.get(0).getProductVo().setBrandVo(brandVo.get(0));
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (row.getCell(Constant.BULKSHEETSUBBRAND) != null
                        && row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim() != "") {
                    try {
                        subBrandVo = brandService.findByBrandNameIgnoreCaseAndCompanyIdAndIsDeleted(
                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim()),
                                Long.parseLong(session.getAttribute("companyId").toString()), 0);
                        if (!(subBrandVo.size() > 0)) {
                            BrandVo brandVo1 = new BrandVo();
                            brandVo1.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            brandVo1.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            brandVo1.setBrandName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim()));
                            try {
                                brandVo1.setBrandCode(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETSUBBRAND).getStringCellValue().trim()));
                            } catch (Exception e) {
                                e.printStackTrace();

                            }
                            brandVo1.setBrandVo(productVarient.get(0).getProductVo().getBrandVo());
                            brandVo1.setBrandDescription("");
                            brandVo1.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                            brandVo1.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                            brandService.save(brandVo1);
                            productVarient.get(0).getProductVo().setSubBrandVo(brandVo1);
                        } else {
                            productVarient.get(0).getProductVo().setSubBrandVo(subBrandVo.get(0));
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        productVarient.get(0).getProductVo().setSubBrandVo(null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        productVarient.get(0).getProductVo().setSubBrandVo(null);
                    }
                }
                try {
                    productVarient.get(0).getProductVo().setCess(
                            row.getCell(Constant.BULKSHEETCESS).getStringCellValue().trim().equalsIgnoreCase("Yes") ? 1
                                    : 0);
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarient.get(0).getProductVo().setCess(0);
                }
                try {
                    // log.warning("row.getCell(Constant.BULKSHEETCESSRATE).getStringCellValue().trim()------__>"+row.getCell(Constant.BULKSHEETCESSRATE).getStringCellValue().trim());
                    productVarient.get(0).getProductVo()
                            .setCesstax(Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETCESSRATE).getStringCellValue().trim())));
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarient.get(0).getProductVo().setCesstax(0);
                }
                try {
                    productVarient.get(0).getProductVo()
                            .setExpirationdays(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETEXPIRATIONDAYS).getStringCellValue().trim()));
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarient.get(0).getProductVo().setExpirationdays("0");
                }
                try {
                    productVarient.get(0).getProductVo()
                            .setNetweight(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.BULKSHEETNETWEIGHT).getStringCellValue().trim()));
                } catch (Exception e) {
                    e.printStackTrace();
                    productVarient.get(0).getProductVo().setNetweight("0");
                }
                if (row.getCell(SHEETIMAGELINK) != null
                        && row.getCell(SHEETIMAGELINK).getStringCellValue().trim() != null
                        && !row.getCell(SHEETIMAGELINK).getStringCellValue().trim().equals("")) {
                    if (productVarient.get(0).getProductVo().getHaveVariation() == 1) {
                        log.info("===========od==============" + productVarient.get(0).getProductVarientId());
                        productService.updateImageUsingUrl(session.getAttribute("companyId").toString(),
                                String.valueOf(productVarient.get(0).getProductVo().getProductId()),
                                row.getCell(SHEETIMAGELINK).getStringCellValue().trim().toString(),
                                String.valueOf(productVarient.get(0).getProductVarientId()));
                    } else {
                        productService.updateImageUsingUrl(session.getAttribute("companyId").toString(),
                                String.valueOf(productVarient.get(0).getProductVo().getProductId()),
                                row.getCell(SHEETIMAGELINK).getStringCellValue().trim().toString(), String.valueOf(0));
                    }
                }
                // -------po quantity is on------//
                if (poCompanySetting != null) {
                    if (poCompanySetting.getValue() == 1) {
                        // log.info("poCompanysetting is 1 in uploadexcel
                        // bulk"+productVarient.get(0).getProductVo().getProductId());
                        POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(
                                productVarient.get(0).getProductVo().getProductId(),
                                Long.parseLong(session.getAttribute("branchId").toString()));
                        try {
                            // update data in poquantity master table
                            // productVarient.get(0).getProductVo().setPoQuantity(Double.parseDouble(row.getCell(Constant.BULKSHEETNETWEIGHT).getStringCellValue().trim()));
                            if (master != null) {
                                // log.info("update po data");
                                master.setPoQuantity(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim())));
                                master.setStockLimit(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                .getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim())));
                                master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString()));
                                master = poQunatityMasterService.save(master);
                            } else {
                                // log.info("new po data");
                                master = new POQuntityMasterVo();
                                master.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                master.setPoQuantity(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim())));
                                master.setStockLimit(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                .getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim())));
                                master.setProductVo(productVarient.get(0).getProductVo());
                                master.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString()));
                                master = poQunatityMasterService.save(master);
                            }
                            productVarient.get(0).getProductVo().setPoQuantity(
                                    Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim())));
                            productVarient.get(0).getProductVo().setStockLimit(
                                    Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.BULKSHEETSTOCKLIMIT).getStringCellValue().trim())));
                        } catch (Exception e) {
                            e.printStackTrace();
                            // productVarient.get(0).getProductVo().setPoQuantity(0);
                        }
                        try {
                            // productVarient.get(0).getProductVo().setStockLimit(Double.parseDouble(row.getCell(Constant.BULKSHEETPOQTY).getStringCellValue().trim()));;

                        } catch (Exception e) {
                            e.printStackTrace();
                            // productVarient.get(0).getProductVo().setStockLimit(0);
                        }

                    }
                }

                if (membershipSetting.getValue() == 1) {

                    try {
                        productVarient.get(0).setMembershipPrice(0);
                    } catch (Exception e) {
                        e.printStackTrace();
                        productVarient.get(0).setMembershipPrice(0);
                    }

                    try {
                        productVarient.get(0).setMembershipMargin(
                                Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETMEMBERSHIP).getStringCellValue().trim())));
                    } catch (Exception e) {
                        productVarient.get(0).setMembershipMargin(0);
                    }

                    try {
                        productVarient.get(0)
                                .setMembershipMarginType(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETMEMBERSHIPTYPE).getStringCellValue().trim()));
                    } catch (Exception e) {
                        productVarient.get(0).setMembershipMarginType("amount");
                    }

                    try {
                        productVarient.get(0).setRetailerMargin(
                                Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETMARGIN).getStringCellValue().trim())));
                    } catch (Exception e) {
                        productVarient.get(0).setRetailerMargin(0);
                    }

                    try {
                        productVarient.get(0)
                                .setRetailerMarginType(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.BULKSHEETMARGINETYPE).getStringCellValue().trim()));
                    } catch (Exception e) {
                        productVarient.get(0).setRetailerMarginType("amount");
                    }
                }
                if (allPriceShow.getValue() == 1) {
                    double retailerPrice = 0;
                    double wholesalePrice = 0;
                    try {
                        retailerPrice = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(SHEETRETAILERPRICE).getStringCellValue().trim()));
                        retailerPrice = round(retailerPrice, 2);
                        productVarient.get(0).setRetailerPrice(retailerPrice);
                    } catch (Exception e) {
                        productVarient.get(0).setRetailerPrice(0);
                    }
                    productVarient.get(0).setNewretailerMarginType("amount");
                    productVarient.get(0).setNewretailerdiscountType("amount");
                    try {
                        productVarient.get(0)
                                .setNewretailerMargin(round(retailerPrice - productVarient.get(0).getLandingCost(), 2));
                    } catch (Exception e) {
                        e.printStackTrace();
                        productVarient.get(0).setNewretailerMargin(0);
                    }

                    try {
                        productVarient.get(0)
                                .setNewretailerdiscount(round(productVarient.get(0).getMrp() - retailerPrice, 2));
                    } catch (Exception e) {
                        e.printStackTrace();
                        productVarient.get(0).setNewretailerdiscount(0);
                    }

                    try {
                        wholesalePrice = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                row.getCell(SHEETWHOLESALEPRICE).getStringCellValue().trim()));
                        wholesalePrice = round(wholesalePrice, 2);
                        productVarient.get(0).setWholesalerPrice(wholesalePrice);
                    } catch (Exception e) {
                        productVarient.get(0).setWholesalerPrice(0);
                    }

                    productVarient.get(0).setWholesalerMarginType("amount");
                    productVarient.get(0).setWholesalerdiscountType("amount");
                    try {
                        productVarient.get(0)
                                .setWholesalerMargin(round(wholesalePrice - productVarient.get(0).getLandingCost(), 2));
                    } catch (Exception e) {
                        e.printStackTrace();
                        productVarient.get(0).setWholesalerMargin(0);
                    }

                    try {
                        productVarient.get(0)
                                .setWholesalerdiscount(round(productVarient.get(0).getMrp() - wholesalePrice, 2));
                    } catch (Exception e) {
                        e.printStackTrace();
                        productVarient.get(0).setWholesalerdiscount(0);
                    }

                }
            }
            try {
                productVarient.get(0).getProductVo().setMrp(productVarient.get(0).getMrp());
                productVarient.get(0).getProductVo().setSellingPrice(productVarient.get(0).getSellingPrice());

            } catch (Exception e) {
                // TODO: handle exception
            }
            productService.insertProductVariant(productVarient);

            try {
                if (Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 0
                        || Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 1) {
                    typesenseService.createSingleProductInTypesense(productVarient.get(0).getProductVo().getProductId(),
                            productVarient.get(0).getCompanyId());
                }
            } catch (Exception e) {
                // TODO: handle exception
                e.printStackTrace();
            }
//            try {
//              // ////log.info("HERE in trying to update product through update product in bulk");
//
//              wooCommerceService.saveProductInWooCommerce(session, productVarient.get(0).getProductVo());
//          } catch (Exception e) {
//              e.printStackTrace();
//          }
        }
        log.info("*********success****************-");
        return "success";

    }

    @PostMapping(value = "/upload/excel/{flag}")
    @ResponseBody
    public String ImportProducttodb(HttpSession session, HttpServletRequest request, HttpServletResponse response,
                                    @PathVariable("flag") int flag, @RequestParam(value = "filepath") String filepath) throws IOException {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            List<Map<String, String>> list = new ArrayList<Map<String, String>>();
            List<ProductWrongSheetDTO> wrongSheetDTO = (List<ProductWrongSheetDTO>) session.getAttribute("Wrongsheet");
            File fb = new File(filepath);
            InputStream in = new FileInputStream(fb);
            ////////////////
            CompanySettingVo managePoQty = companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
            CompanySettingVo memebership = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP);

            String[] columns1 = {"Departments", "Category", "Sub Category", "Brand", "Sub Brand", "Item Code",
                    "Product Name", "Print Name", "Short Description", "Description", "Measurement Name",
                    "Measurement Code", "Hsn Code", "Sales Tax Name", "Sales Tax Rate", "Purchase Tax Name",
                    "Purchase Tax Rate", "Sales taxIncludeing(Yes/No)", "Purchase taxIncludeing(Yes/No)",
                    "Have Variant (Yes/No)", "Variant Name Seprated By /)", "MRP", "Purchase Price",
                    "Discount Type(amount/percentage) default percentage", "Discount  default Zero", "Qty",
                    "Net Weight", "Ingredients [Seprated by comma (,) ]",
                    "Product Type (Finished,SemiFinished,Packaging, Raw)", "Wholesale Price", "Retailer Price",
                    "Online Price", "Minimum QTY", "Image Link", "Cess(Yes,No)", "Cess Rate", "Stock Limit", "PO Qty",
                    "Manage Multiple Batch(Yes/No)", "Has Expiry(Yes/No)", "Select Expiry Days",
                    "Calculate Expiry On(MFG/EXP)", "EXP/MFG Date(DD-MM-YYYY)", "Is Expiry Product Saleable?(YES/NO)",
                    "Reason"};
            String[] columns2 = {"Departments", "Category", "Sub Category", "Brand", "Sub Brand", "Item Code",
                    "Product Name", "Print Name", "Short Description", "Description", "Measurement Name",
                    "Measurement Code", "Hsn Code", "Sales Tax Name", "Sales Tax Rate", "Purchase Tax Name",
                    "Purchase Tax Rate", "Sales taxIncludeing(Yes/No)", "Purchase taxIncludeing(Yes/No)",
                    "Have Variant (Yes/No)", "Variant Name Seprated By /)", "MRP", "Purchase Price",
                    "Discount Type(amount/percentage) default percentage", "Discount  default Zero", "Qty",
                    "Net Weight", "Ingredients [Seprated by comma (,) ]", "MemberShip Margin", "MemberShip Margin Type",
                    "Normal Margin", "Normal Margin Type", "Product Type (Finished,SemiFinished,Packaging, Raw)",
                    "Wholesale Price", "Retailer Price", "Online Price", "Minimum QTY", "Image Link", "Cess(Yes,No)",
                    "Cess Rate", "Stock Limit", "PO Qty", "Manage Multiple Batch(Yes/No)", "Has Expiry(Yes/No)",
                    "Select Expiry Days", "Calculate Expiry On(MFG/EXP)", "MFG/EXP DATE(DD-MM-YYYY)",
                    "Is Expiry Product Saleable?(YES/NO)", "Reason"};

            Workbook workbooksheet = new XSSFWorkbook();
            Instant instant = Instant.now();
            String filename = "Bug_Product(" + session.getAttribute("companyId").toString() + ")"
                    + instant.getEpochSecond();
            Sheet sheetwrong = workbooksheet.createSheet(filename);
            CompanySettingVo companySettingVo = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Constant.ALLOWPRODUCTDUPLICATIONVALIDATION);
            int decimalNumber = 2;
            try {
                decimalNumber = Integer.parseInt(session.getAttribute("decimalPoint").toString());
            } catch (Exception e) {
                e.printStackTrace();
            }
            String taxCode = Constant.GST;
            int taxType = Constant.TAX_TYPE_GST;
            try {
                Map<String, String> gstMap = userRepository
                        .getgstDetails(Long.parseLong(session.getAttribute("companyId").toString()));
                if (gstMap != null && !gstMap.isEmpty()) {
                    if (StringUtils.isNotBlank(gstMap.get("tax_type"))
                            && StringUtils.equalsIgnoreCase(gstMap.get("tax_type"), Constant.VAT)) {
                        taxCode = Constant.VAT;
                        taxType = Constant.TAX_TYPE_VAT;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            int PRODUCTTYPE = 28;
            int WHOLESALEPRICE = 29;
            int RETAILERPRICE = 30;
            int ONLINEPRICE = 31;
            int MINQTY = 32;
            int IMGLINK = 33;
            int CESS = 34;
            int CESSRATE = 35;
            int STOCKLIMIT = 36;
            int POQTY = 37;
            int ISBATCHMANGE = 38;
            int ISEXPIRY = 39;
            int DAYS = 40;
            int CALCULATIONS = 41;
            int DATE = 42;
            int ISSELL = 43;
            if (memebership.getValue() == 1) {
                PRODUCTTYPE = 32;

                WHOLESALEPRICE = 33;
                RETAILERPRICE = 34;
                ONLINEPRICE = 35;
                MINQTY = 36;
                IMGLINK = 37;
                CESS = 38;
                CESSRATE = 39;
                STOCKLIMIT = 40;
                POQTY = 41;
                ISBATCHMANGE = 42;
                ISEXPIRY = 43;
                DAYS = 44;
                CALCULATIONS = 45;
                DATE = 46;
                ISSELL = 47;
            }
            Font headerFont = workbooksheet.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 14);
            headerFont.setColor(IndexedColors.RED.getIndex());
            CellStyle headerCellStyle = workbooksheet.createCellStyle();
            headerCellStyle.setFont(headerFont);

            int endrowNo = ISSELL + 1;
            int imaeglinkrow = IMGLINK;
            Row headerRow = sheetwrong.createRow(0);
            log.info("Sheet--------" + headerRow);
            log.info("member ship status============================================================================"
                    + memebership.getValue());
            if (memebership.getValue() == 1) {
                for (int i = 0; i < columns2.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(columns2[i]);
                    cell.setCellStyle(headerCellStyle);
                }
            } else {
                for (int i = 0; i < columns1.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(columns1[i]);
                    cell.setCellStyle(headerCellStyle);

                }

            }

            int rowNumWrong = 1;
            ///////////////
            // Create Workbook instance holding reference to .xlsx file
            XSSFWorkbook workbook = new XSSFWorkbook(in);
            // Get first/desired sheet from the workbook
            XSSFSheet sheet = workbook.getSheetAt(0);
            List<Integer> wrongno = new ArrayList<Integer>();
            if (wrongSheetDTO != null) {
                wrongno = wrongSheetDTO.stream().map(ProductWrongSheetDTO::getRowno).collect(Collectors.toList());
            }
            // Iterate through each rows one by one
            Iterator<Row> rowIterator = sheet.iterator();
            rowIterator.next();
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                if (flag == 1) {
                    boolean exist = wrongno.contains(row.getRowNum()) ? true : false;
                    if (exist) {
                        Row rowwrong = sheetwrong.createRow(rowNumWrong++);
                        Iterator<Cell> cellIterator = row.cellIterator();
                        log.info("ROWSS::::" + row.getRowNum());
                        for (int i = 0; i <= endrowNo; i++) {
                            log.info("calllll--------" + i);
                            Cell oldCell = row.getCell(i);
                            Cell newCell = rowwrong.createCell(i);
                            log.info("call reasondata" + i);
                            if (i == (endrowNo - 1)) {
                                oldCell = row.getCell(imaeglinkrow);
                            }
                            if (i == endrowNo) {
                                log.info("call reason");
                                for (int j = 0; j < wrongSheetDTO.size(); j++) {
                                    log.info("call reason" + j);
                                    if (row.getRowNum() == wrongSheetDTO.get(j).getRowno()) {
                                        newCell.setCellValue(wrongSheetDTO.get(j).getReason());
                                    }
                                }

                            }
                            // If the old cell is null jump to next cell
                            if (oldCell == null) {
                                newCell = null;
                                continue;
                            }

                            // Use old cell style
                            // newCell.setCellStyle(oldCell.getCellStyle());

                            // If there is a cell comment, copy
                            // if (newCell.getCellComment() != null) {
                            // newCell.setCellComment(oldCell.getCellComment());
                            // }

                            // If there is a cell hyperlink, copy
                            // if (oldCell.getHyperlink() != null) {
                            // newCell.setHyperlink(oldCell.getHyperlink());
                            // }

                            // Set the cell data type

                            if (i != endrowNo) {

                                newCell.setCellType(oldCell.getCellType());
                                switch (oldCell.getCellType()) {
                                    case Cell.CELL_TYPE_BLANK:
                                        break;
                                    case Cell.CELL_TYPE_BOOLEAN:
                                        newCell.setCellValue(oldCell.getBooleanCellValue());
                                        break;
                                    case Cell.CELL_TYPE_ERROR:
                                        newCell.setCellErrorValue(oldCell.getErrorCellValue());
                                        break;
                                    case Cell.CELL_TYPE_FORMULA:
                                        newCell.setCellFormula(oldCell.getCellFormula());
                                        break;
                                    case Cell.CELL_TYPE_NUMERIC:
                                        newCell.setCellValue(oldCell.getNumericCellValue());
                                        break;
                                    case Cell.CELL_TYPE_STRING:
                                        newCell.setCellValue(oldCell.getRichStringCellValue());
                                        break;
                                }

                            }

//                            row.getCell(i).getCellType()==CELL_TYPE_BLANK
//                            if(row.getCell(i).getStringCellValue()!=null) {
//                                rowwrong.createCell(i).setCellValue("");
//                            }else {
//                                rowwrong.createCell(i).setCellValue(row.getCell(i).getStringCellValue());
//                            }
                        }
                        continue;
                    }
                }
                // For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    // Check the cell type Cell cell = cellIterator.next();

                    cell.setCellType(Cell.CELL_TYPE_STRING);
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_BOOLEAN:

                            log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
                            break;
                        case Cell.CELL_TYPE_NUMERIC:

                            break;
                        case Cell.CELL_TYPE_STRING:

                            // list.add(cell.getStringCellValue().trim());
                            break;

                    }

                }

                if (row.getCell(Constant.SHEETDEPARTMENT) == null) {
                    if (isEmptyRow(row)) {
                        continue;
                    }
                }

                if (isEmptyRow(row)) {
                    log.warning("EMPTY Row No= " + (row.getRowNum() + 1));
                } else {
                    log.warning("Row No= " + (row.getRowNum() + 1));
                    DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    DepartmentVo departmentVo = new DepartmentVo();
                    CategoryVo categoryVo = new CategoryVo();
                    CategoryVo subcategoryVo = new CategoryVo();
                    BrandVo brandVo = new BrandVo();
                    BrandVo subbrandVo = new BrandVo();
                    ProductVo productVo = new ProductVo();
                    TaxVo taxVo = new TaxVo();
                    TaxVo purchasetaxVo = new TaxVo();
                    UnitOfMeasurementVo uomvo = new UnitOfMeasurementVo();
                    List<ProductVarientsVo> b = new ArrayList<>();
                    CompanySettingVo productType = companySettingService.findByCompanyIdAndType(
                            Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);
                    CompanySettingVo allPriceShow = companySettingService.findByCompanyIdAndType(
                            Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW);
                    int productTypeIndex = PRODUCTTYPE;
                    int wholesalePriceIndex = WHOLESALEPRICE;
                    int retailerPriceIndex = RETAILERPRICE;
                    int onlinePriceIndex = ONLINEPRICE;
                    int minQtyIndex = MINQTY;
                    List<ProductVo> productlist = productService.findByNameIgnoreCaseAndCompanyId(
                            securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()),
                            Long.parseLong(session.getAttribute("companyId").toString()));
                    if (companySettingVo != null && companySettingVo.getValue() == 1) {
                        try {
                            if (row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue().trim()
                                    .equalsIgnoreCase("No")) {
                                productlist = new ArrayList<ProductVo>();
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    log.info("Sizew product::::" + productlist.size());
                    log.info("" + (productlist.size() > 0));
                    if (productlist.size() > 0) {
                        productVo = productlist.get(0);
                    }
                    double landingCost = 0, mrp = 0, purchaseprice = 0, purchasetaxRate = 0, discount = 0,
                            sellingprice = 0, margin = 0;
                    String discounttype = null;
                    int purchasetaxincluding = 0;
                    System.out.println("=====" + productlist.isEmpty() + "===");
                    if (productlist.isEmpty()) {
                        log.info("new product");
                        productVo = new ProductVo();
                        productVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        productVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        productVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                        productVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        productVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                        productVo.setCreatedOn(CurrentDateTime.getCurrentDate());

                        departmentVo = departmentService.findbyDepartmentNameAndCompanyId(
                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETDEPARTMENT).getStringCellValue().trim()),
                                Long.parseLong(session.getAttribute("companyId").toString()));
                        if (departmentVo == null) {
                            departmentVo = new DepartmentVo();
                            departmentVo.setDepartmentName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETDEPARTMENT).getStringCellValue().trim()));
                            departmentVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            departmentVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            departmentVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                            departmentVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                            departmentVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                            departmentVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                            departmentService.save(departmentVo);
                        }
                        categoryVo = categoryService.findByCategoryNameAndCompanyId(
                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETCATEGORY).getStringCellValue().trim()),
                                Long.parseLong(session.getAttribute("companyId").toString()));
                        if (categoryVo == null) {
                            categoryVo = new CategoryVo();
                            categoryVo.setCategoryName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETCATEGORY).getStringCellValue().trim()));
                            categoryVo.setCategoryDescription("");
                            categoryVo.setDepartmentVo(departmentVo);
                            categoryVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            categoryVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            categoryVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                            categoryVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                            categoryService.save(categoryVo);
                            productVo.setCategoryVo(categoryVo);
                        } else {
                            productVo.setCategoryVo(categoryVo);
                        }
                        if (row.getCell(Constant.SHEETSUBCATEGORY) != null
                                && row.getCell(Constant.SHEETSUBCATEGORY).getStringCellValue().trim() != "") {
                            subcategoryVo = categoryService.findByCategoryNameAndCompanyId(
                                    securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETSUBCATEGORY).getStringCellValue().trim()),
                                    Long.parseLong(session.getAttribute("companyId").toString()));
                            if (subcategoryVo == null) {
                                subcategoryVo = new CategoryVo();
                                subcategoryVo.setCategoryName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETSUBCATEGORY).getStringCellValue().trim()));
                                subcategoryVo.setCategoryDescription("");
                                subcategoryVo.setDepartmentVo(departmentVo);
                                subcategoryVo.setCategoryVo(categoryVo);
                                subcategoryVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                subcategoryVo
                                        .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                subcategoryVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                subcategoryVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                categoryService.save(subcategoryVo);
                                productVo.setSubCategoryVo(subcategoryVo);
                            } else {
                                productVo.setSubCategoryVo(subcategoryVo);
                            }
                        }

                        if (row.getCell(Constant.SHEETBRAND) != null
                                && row.getCell(Constant.SHEETBRAND).getStringCellValue().trim() != "") {
                            brandVo = brandService.findByBrandnameAndCompanyId(
                                    securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETBRAND).getStringCellValue().trim()),
                                    Long.parseLong(session.getAttribute("companyId").toString()));
                            if (brandVo == null) {
                                brandVo = new BrandVo();
                                brandVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                brandVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                brandVo.setBrandName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETBRAND).getStringCellValue().trim()));
                                brandVo.setBrandDescription("");
                                brandVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                brandVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                brandService.save(brandVo);
                                productVo.setBrandVo(brandVo);
                            } else {
                                productVo.setBrandVo(brandVo);
                            }

                            if (row.getCell(Constant.SHEETSUBBRAND) != null
                                    && row.getCell(Constant.SHEETSUBBRAND).getStringCellValue().trim() != "") {
                                subbrandVo = brandService.findByBrandnameAndCompanyId(
                                        securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETSUBBRAND).getStringCellValue().trim()),
                                        Long.parseLong(session.getAttribute("companyId").toString()));
                                if (subbrandVo == null) {
                                    subbrandVo = new BrandVo();
                                    subbrandVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                    subbrandVo
                                            .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                    subbrandVo.setBrandName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETSUBBRAND).getStringCellValue().trim()));
                                    subbrandVo.setBrandDescription("");
                                    subbrandVo.setBrandVo(brandVo);
                                    subbrandVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                    subbrandVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                    brandService.save(subbrandVo);
                                    productVo.setSubBrandVo(subbrandVo);
                                } else {
                                    productVo.setSubBrandVo(subbrandVo);
                                }
                            }
                        }

                        if (row.getCell(Constant.SHEETSALESTAXRATE) != null
                                && row.getCell(Constant.SHEETSALESTAXRATE).getStringCellValue().trim() != "") {
                            String tax_code = "";
                            if (Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETSALESTAXRATE).getStringCellValue().trim())) == 0) {
                                tax_code = (taxCode + "0");
                            }
                            taxVo = taxService.findByTaxRateAndIsGlobalOrCompanyIdAndTaxTypeAndTaxCode(
                                    Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETSALESTAXRATE).getStringCellValue().trim())),
                                    Long.parseLong(session.getAttribute("companyId").toString()), taxType, tax_code);
                            if (taxVo == null) {
                                taxVo = new TaxVo();
                                taxVo.setTaxName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETSALESTAXNAME).getStringCellValue().trim()));
                                taxVo.setTaxRate(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETSALESTAXRATE).getStringCellValue().trim())));
                                taxVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                taxVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                taxVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                taxVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));

                                AccountCustomVo accountCustomVo = new AccountCustomVo();
                                accountCustomVo
                                        .setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                accountCustomVo
                                        .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                accountCustomVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                accountCustomVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                accountCustomVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                                accountCustomVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                                accountCustomVo.setAccountName(taxVo.getTaxName() + "(" + taxVo.getTaxRate() + "%)");

                                AccountGroupVo accountGroupVo = new AccountGroupVo();

                                accountGroupVo.setAccountGroupId(Constant.ACCOUNT_GROUP_DUTIES_AND_TAXES);
                                accountCustomVo.setAccounType(Constant.TAX);

                                accountCustomVo.setGroup(accountGroupVo);
                                accountCustomService.insertAccount(accountCustomVo);
                                taxVo.setAccountCustomVo(accountCustomVo);
                                taxService.save(taxVo);
                                productVo.setTaxVo(taxVo);
                            } else {
                                productVo.setTaxVo(taxVo);
                            }
                        }
                        if (row.getCell(Constant.SHEETPURCHASETAXRATE) != null
                                && row.getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim() != "") {
                            String tax_code = "";
                            if (Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim())) == 0) {
                                tax_code = (taxCode + "0");
                            }
                            purchasetaxVo = taxService.findByTaxRateAndIsGlobalOrCompanyIdAndTaxTypeAndTaxCode(
                                    Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim())),
                                    Long.parseLong(session.getAttribute("companyId").toString()), taxType, tax_code);
                            if (purchasetaxVo == null) {
                                purchasetaxVo = new TaxVo();
                                purchasetaxVo.setTaxName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETPURCHASETAXNAME).getStringCellValue().trim()));
                                purchasetaxVo.setTaxRate(Double.parseDouble(
                                        row.getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim()));
                                purchasetaxVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                purchasetaxVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                purchasetaxVo
                                        .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                purchasetaxVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));

                                AccountCustomVo accountCustomVo = new AccountCustomVo();
                                accountCustomVo
                                        .setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                accountCustomVo
                                        .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                accountCustomVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                accountCustomVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                accountCustomVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                                accountCustomVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                                accountCustomVo.setAccountName(
                                        purchasetaxVo.getTaxName() + "(" + purchasetaxVo.getTaxRate() + "%)");

                                AccountGroupVo accountGroupVo = new AccountGroupVo();

                                accountGroupVo.setAccountGroupId(Constant.ACCOUNT_GROUP_DUTIES_AND_TAXES);
                                accountCustomVo.setAccounType(Constant.TAX);

                                accountCustomVo.setGroup(accountGroupVo);
                                accountCustomService.insertAccount(accountCustomVo);
                                purchasetaxVo.setAccountCustomVo(accountCustomVo);
                                taxService.save(purchasetaxVo);

                                productVo.setPurchaseTaxVo(purchasetaxVo);
                                purchasetaxRate = Double
                                        .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                .getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim()));
                            } else {
                                productVo.setPurchaseTaxVo(purchasetaxVo);
                                purchasetaxRate = Double
                                        .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                .getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim()));
                            }
                        }
                        if (row.getCell(Constant.SHEETMEASURMENTCODE) != null
                                && row.getCell(Constant.SHEETMEASURMENTCODE).getStringCellValue().trim() != "") {
                            uomvo = unitOfMeasurementService.FindByMeasurementCodeAndCompnayId(
                                    securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETMEASURMENTCODE).getStringCellValue().trim()),
                                    Long.parseLong(session.getAttribute("companyId").toString()));
                            if (uomvo == null) {
                                uomvo = new UnitOfMeasurementVo();
                                uomvo.setMeasurementName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETMEASURMENTNAME).getStringCellValue().trim()));
                                uomvo.setMeasurementCode(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETMEASURMENTCODE).getStringCellValue().trim()));
                                uomvo.setNoOfDecimalPlaces(Integer.parseInt("2"));
                                uomvo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                uomvo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                uomvo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                uomvo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                unitOfMeasurementService.save(uomvo);
                                productVo.setUnitOfMeasurementVo(uomvo);
                            } else {
                                productVo.setUnitOfMeasurementVo(uomvo);
                            }
                        }

                        if (productType.getValue() == 1) {
                            try {
                                if (Constant.PRODUCT_TYPE_LIST
                                        .contains(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(productTypeIndex).getStringCellValue().trim()))) {
                                    productVo.setProductType(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(productTypeIndex).getStringCellValue().trim()));
                                } else {
                                    productVo.setProductType("Finished");
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            productVo.setProductType("Finished");

                        }

                        try {
                            productVo.setName(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                    .getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim().replace("/-", "")));
                        } catch (Exception e) {
                            productVo.setName("");
                        }

                        try {
                            productVo.setDisplayName(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                    .getCell(Constant.SHEETPRINTNAME).getStringCellValue().trim().replace("/-", "")));
                        } catch (Exception e) {
                            productVo.setDisplayName("");
                        }

                        try {
                            productVo.setDescription(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETDESCRIPTION).getStringCellValue().trim()));
                        } catch (Exception e) {
                            // productVo.setDescription("This product ganrate By Uploading Sheet");
                        }
                        try {
                            productVo.setShortDescription(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETSHORTDESCRIPTION).getStringCellValue().trim()));
                        } catch (Exception e) {
                        }
                        try {
                            productVo.setIngredients(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETINGREDIENTS).getStringCellValue().trim()));
                        } catch (Exception e) {
                        }
                        try {
                            productVo.setHsnCode(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                    row.getCell(Constant.SHEETHSNCODE).getStringCellValue().trim()));
                        } catch (Exception e) {
                            productVo.setHsnCode("");
                        }

                        try {
                            if (row.getCell(Constant.SHEETSALESTAXINCLUDING).getStringCellValue().trim()
                                    .equalsIgnoreCase("Yes")) {
                                productVo.setTaxIncluded(1);
                            } else {
                                productVo.setTaxIncluded(0);
                            }

                        } catch (Exception e) {
                            productVo.setTaxIncluded(0);
                        }
                        try {
                            if (row.getCell(Constant.SHEETPURCHASETAXINCLUDING).getStringCellValue().trim()
                                    .equalsIgnoreCase("Yes")) {
                                productVo.setPurchaseTaxIncluded(1);
                                purchasetaxincluding = 1;
                            } else {
                                productVo.setPurchaseTaxIncluded(0);
                                purchasetaxincluding = 0;
                            }

                        } catch (Exception e) {
                            productVo.setTaxIncluded(0);
                        }
                        productVo.setHaveDesignno(0);
                        try {

                            // log.info("Expirationdays" + productVo.getExpirationdays());
                        } catch (Exception e) {

                        }
                        try {
                            if (row.getCell(Constant.SHEETNETWEIGHT).getStringCellValue().trim() != "") {
                                productVo.setNetweight(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETNETWEIGHT).getStringCellValue().trim().toString()));
                            } else {

                            }
                            // log.info("netweight" + productVo.getNetweight());
                        } catch (Exception e) {

                        }
                        int cess = 0;
                        try {
                            if (row.getCell(CESS).getStringCellValue().trim().equalsIgnoreCase("Yes")) {
                                productVo.setCess(1);
                                cess = 1;
                            } else {
                                productVo.setCess(0);
                            }
                        } catch (Exception e) {
                            productVo.setCess(0);
                        }
                        try {
                            if (cess == 1) {
                                productVo.setCesstax(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(CESSRATE).getStringCellValue().trim())));
                            }
                        } catch (Exception e) {
                            productVo.setCesstax(0);
                        }
                        if (managePoQty.getValue() == 1) {
                            try {
                                productVo.setStockLimit(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(STOCKLIMIT).getStringCellValue().trim())));
                            } catch (Exception e) {
                                productVo.setStockLimit(0);
                            }
                            try {
                                log.warning(
                                        "POQTY------------>" + securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(POQTY).getStringCellValue().trim()));
                                productVo.setPoQuantity(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(POQTY).getStringCellValue().trim())));
                            } catch (Exception e) {
                                e.printStackTrace();
                                productVo.setPoQuantity(0);
                            }

                        }

                        try {
                            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                            if (row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue().trim()
                                    .equalsIgnoreCase("Yes")) {

                                productVo.setHaveVariation(1);

                                productVarientsVo.setProductVo(productVo);
                                //// log.info("product name:-------" +
                                //// row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue());

                                if (row.getCell(Constant.SHEETITEMCODE) != null
                                        && row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim() != "") {
                                    b = productService.findByitemCodeIgnoreCaseAndCompanyId(
                                            securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim()),
                                            Long.parseLong(session.getAttribute("companyId").toString()));
                                    if (b.size() == 0) {
                                        try {
                                            productVarientsVo.setItemCode(
                                                    securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                            row.getCell(Constant.SHEETITEMCODE).getStringCellValue()
                                                                    .trim()));

                                        } catch (Exception e) {
                                            productVarientsVo.setItemCode("");
                                        }
                                    } else {
                                        CompanySettingVo duplicateBarcode = companySettingService
                                                .findByCompanyIdAndType(
                                                        Long.parseLong(session.getAttribute("companyId").toString()),
                                                        Constant.MULTIDUPLICATEBARCODE);
                                        if (duplicateBarcode.getValue() == 1) {// means allow to enter duplicate barcode
                                            try {
                                                productVarientsVo.setItemCode(b.get(0).getItemCode());

                                            } catch (Exception e) {

                                            }

                                        } else {// not allow to duplicate barcode
                                            try {
                                                productVarientsVo.setItemCode("");

                                            } catch (Exception e) {

                                            }

                                        }
                                    }

                                } else {
                                    try {
                                        productVarientsVo.setItemCode("");

                                    } catch (Exception e) {

                                    }
                                }
                                /////////// urvich
                                try {
                                    // log.severe("row 23 is
                                    // "+row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue());
                                    if (row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue().trim()
                                            .equalsIgnoreCase("percentage")) {
                                        productVarientsVo.setDiscountType("percentage");
                                        discounttype = "percentage";
                                    } else {
                                        productVarientsVo.setDiscountType("amount");
                                        discounttype = "amount";
                                    }

                                } catch (Exception e) {
                                    productVarientsVo.setDiscountType("percentage");
                                }

                                try {
                                    log.severe("row 24 is " + row.getCell(Constant.SHEETDISCOUNT).getStringCellValue());
                                    productVarientsVo.setDiscount(
                                            Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim())));
                                    discount = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim()));
                                } catch (Exception e) {
                                    log.severe("row 24 is ERROR");
                                    productVarientsVo.setDiscount(0);
                                }
                                /////////////
                                try {
                                    productVarientsVo
                                            .setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                } catch (Exception e) {

                                }
                                try {
                                    productVarientsVo
                                            .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                } catch (Exception e) {
                                    // TODO: handle exception
                                }
                                try {
                                    mrp = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETMRP).getStringCellValue().trim()));
                                    mrp = round(mrp, decimalNumber);
                                    productVarientsVo.setMrp(mrp);

                                } catch (Exception e) {
                                    productVarientsVo.setMrp(0);
                                }

                                try {
                                    purchaseprice = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                    .getCell(Constant.SHEETPURCHASEPRICE).getStringCellValue().trim()));
                                    purchaseprice = round(purchaseprice, decimalNumber);
                                    productVarientsVo.setPurchasePrice(purchaseprice);
                                } catch (Exception e) {
                                    productVarientsVo.setPurchasePrice(0);
                                }
                                log.severe("call discounttype: here :::" + (discounttype) + ":::" + purchaseprice);

                                if (purchasetaxincluding == 1) {
                                    landingCost = purchaseprice;
                                    try {
                                        productVarientsVo.setPurchasePrice(round(
                                                (purchaseprice / ((purchasetaxRate + 100) / 100)), decimalNumber));
                                        purchaseprice = productVarientsVo.getPurchasePrice();
                                    } catch (Exception e) {
                                        productVarientsVo.setPurchasePrice(0);
                                    }
                                } else {
                                    landingCost = round(purchaseprice + ((purchaseprice * purchasetaxRate) / 100),
                                            decimalNumber);
                                }
                                log.severe("landingCost---------->" + landingCost);
                                productVarientsVo.setLandingCost(landingCost);
                                // log.info("call discounttype::::"+(discounttype));
                                productVarientsVo.setRetailerMarginType("amount");
                                if (mrp >= landingCost) {
                                    if (discounttype.equalsIgnoreCase("percentage")) {
                                        if (landingCost <= (mrp - ((mrp * discount) / 100))) {
                                            sellingprice = round((mrp - ((mrp * discount) / 100)), decimalNumber);
                                            productVarientsVo.setSellingPrice(round(sellingprice, decimalNumber));
                                        }
                                    } else {
                                        if (landingCost <= ((mrp - discount))) {
                                            sellingprice = round((mrp - ((discount))), 2);
                                            // log.info("call ::::"+(sellingprice));
                                            productVarientsVo.setSellingPrice(sellingprice);
                                        }
                                    }
                                }

                                productVarientsVo.setRetailerMargin(round(sellingprice - landingCost, decimalNumber));

                                if (memebership.getValue() == 1) {
                                    try {
                                        productVarientsVo.setMembershipPrice(0);
                                    } catch (Exception e) {
                                        productVarientsVo.setMembershipPrice(0);
                                    }

                                    try {
                                        productVarientsVo.setMembershipMargin(Double
                                                .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(Constant.SHEETMEMBERSHIP).getStringCellValue()
                                                                .trim())));
                                    } catch (Exception e) {
                                        productVarientsVo.setMembershipMargin(0);
                                    }
                                    try {
                                        productVarientsVo.setMembershipMarginType(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(Constant.SHEETMEMBERSHIPTYPE).getStringCellValue()
                                                                .trim()));
                                    } catch (Exception e) {
                                        productVarientsVo.setMembershipMarginType("amount");
                                    }
                                    try {
                                        productVarientsVo.setRetailerMargin(Double.parseDouble(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                        .getCell(Constant.SHEETMARGIN).getStringCellValue().trim())));
                                    } catch (Exception e) {
                                        productVarientsVo.setRetailerMargin(0);
                                    }
                                    try {
                                        productVarientsVo.setRetailerMarginType(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue()
                                                                .trim()));
                                    } catch (Exception e) {
                                        productVarientsVo.setRetailerMarginType("amount");
                                    }
                                    double marginmember = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETMARGIN).getStringCellValue().trim()));

//			                                if(row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue().trim().equalsIgnoreCase("percentage")) {
//			                                	sellingprice=round((landingCost+((landingCost*marginmember)/100)),decimalNumber);
//			                                }else {
//			                                	sellingprice=round((landingCost+((marginmember))),decimalNumber);
//			                                }
                                    if (productVarientsVo.getDiscount() == 0) {
                                        sellingprice = productVarientsVo.getMrp();
                                    } else {
                                        if (discounttype.equalsIgnoreCase("percentage")) {
//			                                		sellingprice=productVarientsVo.getMrp()-productVarientsVo.getDiscount();
                                            sellingprice = round((productVarientsVo.getMrp()
                                                            - ((productVarientsVo.getMrp() * productVarientsVo.getDiscount())
                                                            / 100)),
                                                    decimalNumber);
                                        } else {
                                            sellingprice = round(
                                                    (productVarientsVo.getMrp() - productVarientsVo.getDiscount()),
                                                    decimalNumber);
                                        }
                                    }
                                    try {
                                        productVarientsVo.setSellingPrice(sellingprice);
                                    } catch (Exception e) {

                                    }
                                }

                                try {
                                    productVarientsVo.setRetailerPrice(sellingprice);
                                } catch (Exception e) {
                                    productVarientsVo.setRetailerPrice(0);
                                }

                                productVarientsVo.setNewretailerMarginType("amount");
                                productVarientsVo.setNewretailerdiscountType("amount");
                                try {
                                    productVarientsVo.setNewretailerMargin(
                                            round(productVarientsVo.getRetailerPrice() - landingCost, decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setNewretailerMargin(0);
                                }

                                try {
                                    productVarientsVo.setNewretailerdiscount(
                                            round(mrp - productVarientsVo.getRetailerPrice(), decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setNewretailerdiscount(0);
                                }

                                try {
                                    productVarientsVo.setWholesalerPrice(sellingprice);
                                } catch (Exception e) {
                                    productVarientsVo.setWholesalerPrice(0);
                                }

                                productVarientsVo.setWholesalerMarginType("amount");
                                productVarientsVo.setWholesalerdiscountType("amount");
                                try {
                                    productVarientsVo.setWholesalerMargin(
                                            round(productVarientsVo.getWholesalerPrice() - landingCost, decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setWholesalerMargin(0);
                                }

                                try {
                                    productVarientsVo.setWholesalerdiscount(
                                            round(mrp - productVarientsVo.getWholesalerPrice(), decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setWholesalerdiscount(0);
                                }

                                try {
                                    productVarientsVo.setOtherPrice(0);
                                } catch (Exception e) {
                                    productVarientsVo.setOtherPrice(0);
                                }
                                try {
                                    productVarientsVo.setShopifyPrice(sellingprice);
                                } catch (Exception e) {
                                    productVarientsVo.setShopifyPrice(sellingprice);
                                }
                                try {
                                    productVarientsVo.setCompareAtPrice(0);
                                } catch (Exception e) {
                                    productVarientsVo.setCompareAtPrice(0);
                                }
                                try {
                                    productVarientsVo.setWeight(0);
                                } catch (Exception e) {
                                    productVarientsVo.setWeight(0);
                                }
                                try {
                                    productVarientsVo.setMinQty(0);
                                } catch (Exception e) {
                                    productVarientsVo.setMinQty(0);
                                }

                                if (allPriceShow.getValue() == 1) {
                                    double retailerPrice = 0;
                                    double wholesalePrice = 0;
                                    try {
                                        retailerPrice = Double
                                                .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(retailerPriceIndex).getStringCellValue().trim()));
                                        retailerPrice = round(retailerPrice, decimalNumber);
                                        productVarientsVo.setRetailerPrice(retailerPrice);
                                    } catch (Exception e) {
                                        productVarientsVo.setRetailerPrice(0);
                                    }
                                    productVarientsVo.setNewretailerMarginType("amount");
                                    productVarientsVo.setNewretailerdiscountType("amount");
                                    try {
                                        productVarientsVo.setNewretailerMargin(
                                                round(retailerPrice - landingCost, decimalNumber));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        productVarientsVo.setNewretailerMargin(0);
                                    }

                                    try {
                                        productVarientsVo
                                                .setNewretailerdiscount(round(mrp - retailerPrice, decimalNumber));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        productVarientsVo.setNewretailerdiscount(0);
                                    }

                                    try {
                                        wholesalePrice = Double
                                                .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(wholesalePriceIndex).getStringCellValue().trim()));
                                        wholesalePrice = round(wholesalePrice, decimalNumber);
                                        productVarientsVo.setWholesalerPrice(wholesalePrice);
                                    } catch (Exception e) {
                                        productVarientsVo.setWholesalerPrice(0);
                                    }

                                    productVarientsVo.setWholesalerMarginType("amount");
                                    productVarientsVo.setWholesalerdiscountType("amount");
                                    try {
                                        productVarientsVo.setWholesalerMargin(
                                                round(wholesalePrice - landingCost, decimalNumber));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        productVarientsVo.setWholesalerMargin(0);
                                    }

                                    try {
                                        productVarientsVo
                                                .setWholesalerdiscount(round(mrp - wholesalePrice, decimalNumber));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        productVarientsVo.setWholesalerdiscount(0);
                                    }

                                    try {
                                        double onlinePrice = Double
                                                .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(onlinePriceIndex).getStringCellValue().trim()));
                                        onlinePrice = round(onlinePrice, decimalNumber);
                                        productVarientsVo.setShopifyPrice(onlinePrice);
                                    } catch (Exception e) {
                                        productVarientsVo.setShopifyPrice(0);
                                    }
                                } else {

                                }
                                try {
                                    if (row.getCell(minQtyIndex).getStringCellValue().trim() != "") {
                                        productVarientsVo.setMinQty(Double.parseDouble(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                        .getCell(minQtyIndex).getStringCellValue().trim().toString())));
                                    } else {
                                        productVarientsVo.setMinQty(0);
                                    }
                                } catch (Exception e) {
                                    productVarientsVo.setMinQty(0);
                                }

                                try {
                                    if (row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim() != "") {
                                        productVarientsVo.setVarientName(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue()
                                                                .trim().toString()));
                                    }
                                } catch (Exception e) {
                                }
                                productVarientsVo.setInventoryPolicy("yes");
                                List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();
                                productVarientsVos.add(productVarientsVo);
                                productVo.setProductVarientsVos(productVarientsVos);

                            } else {
                                /////////////////////// else part no varint
                                productVo.setHaveVariation(0);

//			                            try {
//			                                if (row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim() != "") {
//			                                    productVarientsVo.setVarientName(securityValidation.checkAndReplaceCsvInjectionCharacters(row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim().toString()));
//			                                }
//			                            } catch (Exception e) {
//			                            }

                                productVarientsVo.setProductVo(productVo);
                                try {
                                    productVarientsVo.setAttributeValue1("");
                                } catch (Exception e) {
                                    productVarientsVo.setAttributeValue1("");
                                }
                                try {
                                    productVarientsVo.setAttributeValue2("");
                                } catch (Exception e) {
                                    productVarientsVo.setAttributeValue2("");
                                }
                                try {
                                    productVarientsVo.setAttributeValue3("");
                                } catch (Exception e) {
                                    productVarientsVo.setAttributeValue3("");
                                }
                                try {
                                    productVarientsVo
                                            .setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                } catch (Exception e) {

                                }
                                try {
                                    productVarientsVo
                                            .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                } catch (Exception e) {
                                    // TODO: handle exception
                                }
                                /////////// urvich
                                try {
                                    // log.severe("row 23 is
                                    // "+row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue());
                                    if (row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue().trim()
                                            .equalsIgnoreCase("percentage")) {
                                        productVarientsVo.setDiscountType("percentage");
                                        discounttype = "percentage";
                                    } else {
                                        productVarientsVo.setDiscountType("amount");
                                        discounttype = "amount";
                                    }

                                } catch (Exception e) {
                                    productVarientsVo.setDiscountType("percentage");
                                }

                                try {
                                    log.severe("row 24 is " + row.getCell(Constant.SHEETDISCOUNT).getStringCellValue());
                                    productVarientsVo.setDiscount(
                                            Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim())));
                                    discount = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim()));
                                } catch (Exception e) {
                                    log.severe("row 24 is ERROR");
                                    productVarientsVo.setDiscount(0);
                                }
                                try {
                                    mrp = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETMRP).getStringCellValue().trim()));
                                    mrp = round(mrp, decimalNumber);
                                    productVarientsVo.setMrp(mrp);
                                } catch (Exception e) {
                                    productVarientsVo.setMrp(0);
                                }
                                try {
                                    // productVarientsVo.setPurchasePrice(Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row.getCell(Constant.SHEETPURCHASEPRICE).getStringCellValue().trim())));
                                    purchaseprice = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                    .getCell(Constant.SHEETPURCHASEPRICE).getStringCellValue().trim()));
                                    purchaseprice = round(purchaseprice, decimalNumber);
                                    productVarientsVo.setPurchasePrice(purchaseprice);
                                } catch (Exception e) {
                                    productVarientsVo.setPurchasePrice(0);
                                }
                                log.info("here call no varient");
                                // log.info("call discounttype: here :::"+(discounttype)+":::"+purchaseprice);
                                try {
                                    if (row.getCell(Constant.SHEETPURCHASETAXINCLUDING).getStringCellValue().trim()
                                            .equalsIgnoreCase("Yes")) {
                                        productVo.setPurchaseTaxIncluded(1);
                                        purchasetaxincluding = 1;
                                    } else {
                                        productVo.setPurchaseTaxIncluded(0);
                                        purchasetaxincluding = 0;
                                    }

                                } catch (Exception e) {
                                    productVo.setTaxIncluded(0);
                                }

                                if (purchasetaxincluding == 1) {
                                    landingCost = purchaseprice;
                                    try {
                                        productVarientsVo.setPurchasePrice(round(
                                                (purchaseprice / ((purchasetaxRate + 100) / 100)), decimalNumber));
                                        purchaseprice = productVarientsVo.getPurchasePrice();
                                    } catch (Exception e) {
                                        productVarientsVo.setPurchasePrice(0);
                                    }
                                } else {
                                    landingCost = round(purchaseprice + ((purchaseprice * purchasetaxRate) / 100),
                                            decimalNumber);
                                }
                                productVarientsVo.setLandingCost(landingCost);
                                // log.info("call discounttype::::"+(discounttype)+":::"+discount);
                                productVarientsVo.setRetailerMarginType("amount");
                                if (mrp >= landingCost) {
                                    if (discounttype.equalsIgnoreCase("percentage")) {
                                        if (landingCost <= (mrp - ((mrp * discount) / 100))) {
                                            sellingprice = round((mrp - ((mrp * discount) / 100)), decimalNumber);
                                            productVarientsVo.setSellingPrice(round(sellingprice, decimalNumber));
                                        }
                                    } else {
                                        if (landingCost <= ((mrp - discount))) {
                                            sellingprice = round((mrp - ((discount))), decimalNumber);
                                            // log.info("call ::::"+(sellingprice));
                                            productVarientsVo.setSellingPrice(sellingprice);
                                        }
                                    }
                                }

                                productVarientsVo.setRetailerMargin(round(sellingprice - landingCost, decimalNumber));

                                if (memebership.getValue() == 1) {
                                    try {
                                        productVarientsVo.setMembershipPrice(0);
                                    } catch (Exception e) {
                                        productVarientsVo.setMembershipPrice(0);
                                    }

                                    try {
                                        productVarientsVo.setMembershipMargin(Double
                                                .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(Constant.SHEETMEMBERSHIP).getStringCellValue()
                                                                .trim())));
                                    } catch (Exception e) {
                                        productVarientsVo.setMembershipMargin(0);
                                    }
                                    try {
                                        productVarientsVo.setMembershipMarginType(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(Constant.SHEETMEMBERSHIPTYPE).getStringCellValue()
                                                                .trim()));
                                    } catch (Exception e) {
                                        productVarientsVo.setMembershipMarginType("amount");
                                    }
                                    try {
                                        productVarientsVo.setRetailerMargin(Double.parseDouble(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                        .getCell(Constant.SHEETMARGIN).getStringCellValue().trim())));
                                    } catch (Exception e) {
                                        productVarientsVo.setRetailerMargin(0);
                                    }
                                    try {
                                        productVarientsVo.setRetailerMarginType(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue()
                                                                .trim()));
                                    } catch (Exception e) {
                                        productVarientsVo.setRetailerMarginType("amount");
                                    }
                                    double marginmember = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETMARGIN).getStringCellValue().trim()));
                                    // log.info("call memebership ::::"+marginmember+":::::"+landingCost);
                                    // if(row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue().trim().equalsIgnoreCase("percentage"))
                                    // {
                                    // sellingprice=round((landingCost+((landingCost*marginmember)/100)),decimalNumber);
                                    // }else {
                                    // sellingprice=round((landingCost+((marginmember))),decimalNumber);
                                    // }
//			                                if(productVarientsVo.getDiscount()==0) {
//			                                	sellingprice=productVarientsVo.getMrp();
//			                                }else {
//			                                	sellingprice=productVarientsVo.getMrp()-productVarientsVo.getDiscount();
//			                                }
                                    if (productVarientsVo.getDiscount() == 0) {
                                        sellingprice = productVarientsVo.getMrp();
                                    } else {
                                        if (discounttype.equalsIgnoreCase("percentage")) {
//			                                		sellingprice=productVarientsVo.getMrp()-productVarientsVo.getDiscount();
                                            sellingprice = round((productVarientsVo.getMrp()
                                                            - ((productVarientsVo.getMrp() * productVarientsVo.getDiscount())
                                                            / 100)),
                                                    decimalNumber);
                                        } else {
                                            sellingprice = round(
                                                    (productVarientsVo.getMrp() - productVarientsVo.getDiscount()),
                                                    decimalNumber);
                                        }
                                    }
                                    try {
                                        productVarientsVo.setSellingPrice(sellingprice);
                                    } catch (Exception e) {

                                    }
                                }
                                try {
                                    productVarientsVo.setRetailerPrice(sellingprice);
                                } catch (Exception e) {
                                    productVarientsVo.setRetailerPrice(0);
                                }
                                productVarientsVo.setNewretailerMarginType("amount");
                                productVarientsVo.setNewretailerdiscountType("amount");
                                try {
                                    productVarientsVo.setNewretailerMargin(
                                            round(productVarientsVo.getRetailerPrice() - landingCost, decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setNewretailerMargin(0);
                                }

                                try {
                                    productVarientsVo.setNewretailerdiscount(
                                            round(mrp - productVarientsVo.getRetailerPrice(), decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setNewretailerdiscount(0);
                                }

                                try {
                                    productVarientsVo.setWholesalerPrice(sellingprice);
                                } catch (Exception e) {
                                    productVarientsVo.setWholesalerPrice(0);
                                }

                                productVarientsVo.setWholesalerMarginType("amount");
                                productVarientsVo.setWholesalerdiscountType("amount");
                                try {
                                    productVarientsVo.setWholesalerMargin(
                                            round(productVarientsVo.getWholesalerPrice() - landingCost, decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setWholesalerMargin(0);
                                }

                                try {
                                    productVarientsVo.setWholesalerdiscount(
                                            round(mrp - productVarientsVo.getWholesalerPrice(), decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setWholesalerdiscount(0);
                                }

                                try {
                                    productVarientsVo.setOtherPrice(sellingprice);
                                } catch (Exception e) {
                                    productVarientsVo.setOtherPrice(0);
                                }
                                try {
                                    productVarientsVo.setShopifyPrice(sellingprice);
                                } catch (Exception e) {
                                    productVarientsVo.setShopifyPrice(0);
                                }
                                try {
                                    productVarientsVo.setCompareAtPrice(0);
                                } catch (Exception e) {
                                    productVarientsVo.setCompareAtPrice(0);
                                }
                                try {
                                    productVarientsVo.setWeight(0);
                                } catch (Exception e) {
                                    productVarientsVo.setWeight(0);
                                }
                                try {
                                    productVarientsVo
                                            .setItemCode(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim()));

                                } catch (Exception e) {
                                    productVarientsVo.setItemCode("");
                                }
                                if (allPriceShow.getValue() == 1) {
                                    double retailerPrice = 0;
                                    double wholesalePrice = 0;
                                    try {
                                        retailerPrice = Double
                                                .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(retailerPriceIndex).getStringCellValue().trim()));
                                        retailerPrice = round(retailerPrice, decimalNumber);
                                        productVarientsVo.setRetailerPrice(retailerPrice);
                                    } catch (Exception e) {
                                        productVarientsVo.setRetailerPrice(0);
                                    }
                                    productVarientsVo.setNewretailerMarginType("amount");
                                    productVarientsVo.setNewretailerdiscountType("amount");
                                    try {
                                        productVarientsVo.setNewretailerMargin(
                                                round(retailerPrice - landingCost, decimalNumber));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        productVarientsVo.setNewretailerMargin(0);
                                    }

                                    try {
                                        productVarientsVo
                                                .setNewretailerdiscount(round(mrp - retailerPrice, decimalNumber));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        productVarientsVo.setNewretailerdiscount(0);
                                    }

                                    try {
                                        wholesalePrice = Double
                                                .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(wholesalePriceIndex).getStringCellValue().trim()));
                                        wholesalePrice = round(wholesalePrice, decimalNumber);
                                        productVarientsVo.setWholesalerPrice(wholesalePrice);
                                    } catch (Exception e) {
                                        productVarientsVo.setWholesalerPrice(0);
                                    }

                                    productVarientsVo.setWholesalerMarginType("amount");
                                    productVarientsVo.setWholesalerdiscountType("amount");
                                    try {
                                        productVarientsVo.setWholesalerMargin(
                                                round(wholesalePrice - landingCost, decimalNumber));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        productVarientsVo.setWholesalerMargin(0);
                                    }

                                    try {
                                        productVarientsVo
                                                .setWholesalerdiscount(round(mrp - wholesalePrice, decimalNumber));
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        productVarientsVo.setWholesalerdiscount(0);
                                    }
                                    try {
                                        double onlinePrice = Double
                                                .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                        row.getCell(onlinePriceIndex).getStringCellValue().trim()));
                                        onlinePrice = round(onlinePrice, decimalNumber);
                                        productVarientsVo.setShopifyPrice(onlinePrice);
                                    } catch (Exception e) {
                                        productVarientsVo.setShopifyPrice(0);
                                    }
                                }
                                try {
                                    if (row.getCell(minQtyIndex).getStringCellValue().trim() != "") {
                                        productVarientsVo.setMinQty(Double.parseDouble(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                        .getCell(minQtyIndex).getStringCellValue().trim().toString())));
                                    } else {
                                        productVarientsVo.setMinQty(0);
                                    }
                                } catch (Exception e) {
                                    productVarientsVo.setMinQty(0);
                                }
                                productVarientsVo.setInventoryPolicy("yes");

                                List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();
                                productVarientsVos.add(productVarientsVo);
                                productVo.setProductVarientsVos(productVarientsVos);

                            }
                            try {
                                productVo.setItemCode(productVo.getProductVarientsVos().get(0).getItemCode());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            try {
                                productVo.setMrp(productVo.getProductVarientsVos().get(0).getMrp());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            try {
                                productVo.setSellingPrice(productVo.getProductVarientsVos().get(0).getSellingPrice());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            // productVo.setItemCode(productVo.getProductVarientsVos().get(0).getItemCode());
                            // productVo.setSellingPrice(productVo.getProductVarientsVos().get(0).getSellingPrice());
                            // productVo.setMrp(productVo.getProductVarientsVos().get(0).getMrp());
                            try {
                                if (row.getCell(ISBATCHMANGE).getStringCellValue().trim().equalsIgnoreCase("yes")) {
                                    productVo.setIsBatchManage(1);
                                } else {
                                    productVo.setIsBatchManage(0);
                                }
                            } catch (Exception e) {

                            }
                            if (productVo.getIsBatchManage() == 1) {
                                try {

                                    if (row.getCell(ISEXPIRY).getStringCellValue().trim().equalsIgnoreCase("yes")) {
                                        System.out.println(row.getCell(ISEXPIRY).getStringCellValue() + "======home==="
                                                + row.getCell(ISEXPIRY).getStringCellValue().trim()
                                                .equalsIgnoreCase("yes"));
                                        productVo.setIsExpiryManage(1);
                                        if (row.getCell(CALCULATIONS).getStringCellValue().equalsIgnoreCase("MFG")) {
                                            productVo.setExpDateType("MFG");
                                        } else {
                                            productVo.setExpDateType("EXP");
                                        }
                                        productVo.setExpirationdays(row.getCell(DAYS).getStringCellValue());
                                        if (row.getCell(CALCULATIONS).getStringCellValue().equalsIgnoreCase("Yes")) {
                                            productVo.setIsExpirySee(1);
                                        } else {
                                            productVo.setIsExpirySee(0);
                                        }
                                    } else {
                                        productVo.setIsExpiryManage(0);
                                    }
                                } catch (Exception e) {

                                }
                                if (productVo.getIsExpiryManage() == 1) {
                                    if (row.getCell(ISSELL).toString().equalsIgnoreCase("yes")) {
                                        productVo.setIsExpirySee(1);
                                    }
                                }
                            }

                            productVo = productService.insertProduct(productVo);
                            if (managePoQty != null && managePoQty.getValue() == 1) {
                                POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(
                                        productVo.getProductId(),
                                        Long.parseLong(session.getAttribute("branchId").toString()));
                                if (master == null) {
                                    master = new POQuntityMasterVo();
                                    master.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                    master.setPoQuantity(productVo.getPoQuantity());
                                    master.setStockLimit(productVo.getStockLimit());
                                    master.setProductVo(productVo);
                                    master.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                    master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString()));
                                } else {
                                    master.setPoQuantity(productVo.getPoQuantity());
                                    master.setStockLimit(productVo.getStockLimit());
                                    master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString()));
                                }
                                master = poQunatityMasterService.save(master);
                            }

                            try {
                                for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
                                    String item_code = productVo.getProductVarientsVos().get(i).getItemCode();
                                    long productVarientId = productVo.getProductVarientsVos().get(i)
                                            .getProductVarientId();
                                    List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                                            .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(
                                                    productVarientId,
                                                    Long.parseLong(session.getAttribute("companyId").toString()), 0, 1);
                                    //// log.warning("productMultiBarcodeVos
                                    //// size=====>"+productMultiBarcodeVos.size());
                                    if (!productMultiBarcodeVos.isEmpty()) {
                                        //// log.warning("======productMultiBarcodeVos is available=====");
                                        ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
                                        productMultiBarcodeVo.setItemCode(item_code);
                                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                                .saveAndFlush(productMultiBarcodeVo);
                                    } else {
                                        //// log.warning("======productMultiBarcodeVos is not available=====");
                                        ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                                        productMultiBarcodeVo.setBranchId(
                                                Long.parseLong(session.getAttribute("branchId").toString()));
                                        productMultiBarcodeVo.setCompanyId(
                                                Long.parseLong(session.getAttribute("companyId").toString()));
                                        productMultiBarcodeVo
                                                .setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                        productMultiBarcodeVo.setCreatedBy(
                                                Long.parseLong(session.getAttribute("userId").toString()));
                                        productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                                        productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                                        productMultiBarcodeVo.setProductVarientId(productVarientId);
                                        productMultiBarcodeVo.setItemCode(item_code);
                                        productMultiBarcodeVo.setIsDefault(1);
                                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                                .saveAndFlush(productMultiBarcodeVo);
                                        //// log.warning("======productMultiBarcodeVo New Created=====");
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            if (row.getCell(IMGLINK) != null && row.getCell(IMGLINK).getStringCellValue().trim() != null
                                    && !row.getCell(IMGLINK).getStringCellValue().trim().equals("")) {
                                if (row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue().trim()
                                        .equalsIgnoreCase("Yes")) {
                                    log.info("===========od==============" + productVarientsVo.getProductVarientId());
                                    productService.updateImageUsingUrl(session.getAttribute("companyId").toString(),
                                            String.valueOf(productVo.getProductId()),
                                            row.getCell(IMGLINK).getStringCellValue().trim().toString(),
                                            String.valueOf(productVarientsVo.getProductVarientId()));
                                } else {
                                    productService.updateImageUsingUrl(session.getAttribute("companyId").toString(),
                                            String.valueOf(productVo.getProductId()),
                                            row.getCell(IMGLINK).getStringCellValue().trim().toString(),
                                            String.valueOf(0));
                                }
                            }
                            Map<String, String> map = new HashMap<>();
                            map.put("productVarientId",
                                    String.valueOf(productVo.getProductVarientsVos().get(0).getProductVarientId()));
                            map.put("purchasePrice",
                                    String.valueOf(productVo.getProductVarientsVos().get(0).getPurchasePrice()));
                            map.put("landingPrice",
                                    String.valueOf(productVo.getProductVarientsVos().get(0).getLandingCost()));
                            map.put("sellingPrice",
                                    String.valueOf(productVo.getProductVarientsVos().get(0).getSellingPrice()));
                            map.put("mrpPrice", String.valueOf(productVo.getProductVarientsVos().get(0).getMrp()));
                            if (productVo.getIsExpiryManage() == 1) {
                                Cell cell = row.getCell(DATE);
                                map.put("date", row.getCell(DATE).getStringCellValue());
                                map.put("days", String.valueOf(productVo.getExpirationdays()));
                                map.put("exptype", String.valueOf(productVo.getExpDateType()));

                            }
                            if (row.getCell(Constant.SHEETQTY) != null
                                    && row.getCell(Constant.SHEETQTY).getStringCellValue().trim() != null
                                    && !row.getCell(Constant.SHEETQTY).getStringCellValue().trim().equals("")) {
                                map.put("qty", securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETQTY).getStringCellValue().trim()));
                            } else {
                                map.put("qty", "0");
                                try {
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                            list.add(map);

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    } else {
                        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                        log.info("call varient::::::::::::");
                        if (row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue().trim()
                                .equalsIgnoreCase("Yes")) {
                            purchasetaxRate = Double
                                    .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim()));
                            try {
                                if (row.getCell(Constant.SHEETPURCHASETAXINCLUDING).getStringCellValue().trim()
                                        .equalsIgnoreCase("Yes")) {
                                    productVo.setPurchaseTaxIncluded(1);
                                    purchasetaxincluding = 1;
                                } else {
                                    productVo.setPurchaseTaxIncluded(0);
                                    purchasetaxincluding = 0;
                                }

                            } catch (Exception e) {
                                productVo.setTaxIncluded(0);
                            }
                            productVo.setHaveVariation(1);
                            log.info("varient add "
                                    + row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim().toString());

                            try {
                                if (row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim() != "") {
                                    productVarientsVo
                                            .setVarientName(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim()
                                                            .toString()));
                                }
                            } catch (Exception e) {
                            }
                            productVarientsVo.setProductVo(productVo);
                            try {
                                productVarientsVo
                                        .setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            } catch (Exception e) {

                            }
                            try {
                                productVarientsVo
                                        .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            } catch (Exception e) {
                                // TODO: handle exception
                            }
                            try {
                                productVarientsVo.setMrp(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETMRP).getStringCellValue().trim())));
                                mrp = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETMRP).getStringCellValue().trim()));
                            } catch (Exception e) {
                                productVarientsVo.setMrp(0);
                            }
                            try {
                                productVarientsVo.setPurchasePrice(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETPURCHASEPRICE).getStringCellValue().trim())));
                                purchaseprice = Double
                                        .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETPURCHASEPRICE).getStringCellValue().trim()));
                                purchaseprice = round(purchaseprice, decimalNumber);
                            } catch (Exception e) {
                                productVarientsVo.setPurchasePrice(0);
                            }
                            try {
                                // log.severe("row 23 is
                                // "+row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue());
                                if (row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue().trim()
                                        .equalsIgnoreCase("percentage")) {
                                    productVarientsVo.setDiscountType("percentage");
                                    discounttype = "percentage";
                                } else {
                                    productVarientsVo.setDiscountType("amount");
                                    discounttype = "amount";
                                }

                            } catch (Exception e) {
                                productVarientsVo.setDiscountType("percentage");
                            }
                            try {
                                log.severe("variation row 24 is "
                                        + row.getCell(Constant.SHEETDISCOUNT).getStringCellValue());
                                productVarientsVo.setDiscount(
                                        Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim())));
                                discount = Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim()));
                            } catch (Exception e) {
                                log.severe("variation row 24 is ERROR");
                                productVarientsVo.setDiscount(0);
                            }
//	                    try {
//	                        //log.severe("row 24 is "+row.getCell(Constant.SHEETDISCOUNT).getStringCellValue());
//	                        productVarientsVo.setDiscount(Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim())));
//	                        discount=Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim()));
//	                    } catch (Exception e) {
//	                        productVarientsVo.setDiscount(0);
//	                    }
                            log.info("here call no varient");
                            // log.info("call discounttype: here :::"+(discounttype)+":::"+purchaseprice);

                            if (purchasetaxincluding == 1) {
                                landingCost = purchaseprice;
                                try {
                                    productVarientsVo.setPurchasePrice(
                                            round((purchaseprice / ((purchasetaxRate + 100) / 100)), decimalNumber));
                                    purchaseprice = productVarientsVo.getPurchasePrice();
                                } catch (Exception e) {
                                    productVarientsVo.setPurchasePrice(0);
                                }
                            } else {
                                landingCost = round(purchaseprice + ((purchaseprice * purchasetaxRate) / 100),
                                        decimalNumber);
                            }
                            productVarientsVo.setLandingCost(landingCost);
                            // log.info("call discounttype::::"+(discounttype)+":::"+discount);
                            productVarientsVo.setRetailerMarginType("amount");
                            if (mrp >= landingCost) {
                                if (discounttype.equalsIgnoreCase("percentage")) {
                                    if (landingCost <= (mrp - ((mrp * discount) / 100))) {
                                        sellingprice = round((mrp - ((mrp * discount) / 100)), decimalNumber);
                                        productVarientsVo.setSellingPrice(round(sellingprice, decimalNumber));
                                    }
                                } else {
                                    if (landingCost <= ((mrp - discount))) {
                                        sellingprice = round((mrp - ((discount))), decimalNumber);
                                        // log.info("call ::::"+(sellingprice));
                                        productVarientsVo.setSellingPrice(sellingprice);
                                    }
                                }
                            }

                            productVarientsVo.setRetailerMargin(round(sellingprice - landingCost, decimalNumber));

                            if (memebership.getValue() == 1) {
                                try {
                                    productVarientsVo.setMembershipPrice(0);
                                } catch (Exception e) {
                                    productVarientsVo.setMembershipPrice(0);
                                }

                                try {
                                    productVarientsVo.setMembershipMargin(Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                    .getCell(Constant.SHEETMEMBERSHIP).getStringCellValue().trim())));
                                } catch (Exception e) {
                                    productVarientsVo.setMembershipMargin(0);
                                }
                                try {
                                    productVarientsVo.setMembershipMarginType(
                                            securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETMEMBERSHIPTYPE).getStringCellValue()
                                                            .trim()));
                                } catch (Exception e) {
                                    productVarientsVo.setMembershipMarginType("amount");
                                }
                                try {
                                    productVarientsVo.setRetailerMargin(
                                            Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(Constant.SHEETMARGIN).getStringCellValue().trim())));
                                } catch (Exception e) {
                                    productVarientsVo.setRetailerMargin(0);
                                }
                                try {
                                    productVarientsVo.setRetailerMarginType(
                                            securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                    .getCell(Constant.SHEETMARGINETYPE).getStringCellValue().trim()));
                                } catch (Exception e) {
                                    productVarientsVo.setRetailerMarginType("amount");
                                }
                                double marginmember = Double
                                        .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETMARGIN).getStringCellValue().trim()));
                                // log.info("call memebership ::::"+marginmember+":::::"+landingCost);
//	                      if(row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue().trim().equalsIgnoreCase("percentage")) {
//	                      	sellingprice=round((landingCost+((landingCost*marginmember)/100)),decimalNumber);
//	                      }else {
//	                      	sellingprice=round((landingCost+((marginmember))),decimalNumber);
//	                      }
//	                      try {
//	                         productVarientsVo.setDiscountType("amount");
//	                      } catch (Exception e) {
//	                          productVarientsVo.setDiscountType("amount");
//	                      }
//
//
//	                      productVarientsVo.setDiscount(0);

                                if (productVarientsVo.getDiscount() == 0) {
                                    sellingprice = productVarientsVo.getMrp();
                                } else {
                                    if (discounttype.equalsIgnoreCase("percentage")) {
//                          		sellingprice=productVarientsVo.getMrp()-productVarientsVo.getDiscount();
                                        sellingprice = round((productVarientsVo.getMrp()
                                                        - ((productVarientsVo.getMrp() * productVarientsVo.getDiscount())
                                                        / 100)),
                                                decimalNumber);
                                    } else {
                                        sellingprice = round(
                                                (productVarientsVo.getMrp() - productVarientsVo.getDiscount()),
                                                decimalNumber);
                                    }
                                }
                                try {
                                    productVarientsVo.setSellingPrice(sellingprice);
                                } catch (Exception e) {

                                }
                            }
                            try {
                                productVarientsVo.setRetailerPrice(sellingprice);
                            } catch (Exception e) {
                                productVarientsVo.setRetailerPrice(0);
                            }
                            try {
                                productVarientsVo.setWholesalerPrice(sellingprice);
                            } catch (Exception e) {
                                productVarientsVo.setWholesalerPrice(0);
                            }
                            try {
                                productVarientsVo.setOtherPrice(sellingprice);
                            } catch (Exception e) {
                                productVarientsVo.setOtherPrice(0);
                            }
                            try {
                                productVarientsVo.setShopifyPrice(sellingprice);
                            } catch (Exception e) {
                                productVarientsVo.setShopifyPrice(0);
                            }
                            try {
                                productVarientsVo.setCompareAtPrice(0);
                            } catch (Exception e) {
                                productVarientsVo.setCompareAtPrice(0);
                            }
                            try {
                                productVarientsVo.setWeight(0);
                            } catch (Exception e) {
                                productVarientsVo.setWeight(0);
                            }

                            try {
                                if (row.getCell(minQtyIndex).getStringCellValue().trim() != "") {
                                    productVarientsVo.setMinQty(
                                            Double.parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(minQtyIndex).getStringCellValue().trim().toString())));
                                } else {
                                    productVarientsVo.setMinQty(0);
                                }
                            } catch (Exception e) {
                                productVarientsVo.setMinQty(0);
                            }
                            if (allPriceShow.getValue() == 1) {
                                double retailerPrice = 0;
                                double wholesalePrice = 0;
                                try {
                                    retailerPrice = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(retailerPriceIndex).getStringCellValue().trim()));
                                    retailerPrice = round(retailerPrice, decimalNumber);
                                    productVarientsVo.setRetailerPrice(retailerPrice);
                                } catch (Exception e) {
                                    productVarientsVo.setRetailerPrice(0);
                                }
                                productVarientsVo.setNewretailerMarginType("amount");
                                productVarientsVo.setNewretailerdiscountType("amount");
                                try {
                                    productVarientsVo
                                            .setNewretailerMargin(round(retailerPrice - landingCost, decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setNewretailerMargin(0);
                                }

                                try {
                                    productVarientsVo.setNewretailerdiscount(round(mrp - retailerPrice, decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setNewretailerdiscount(0);
                                }

                                try {
                                    wholesalePrice = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(wholesalePriceIndex).getStringCellValue().trim()));
                                    wholesalePrice = round(wholesalePrice, decimalNumber);
                                    productVarientsVo.setWholesalerPrice(wholesalePrice);
                                } catch (Exception e) {
                                    productVarientsVo.setWholesalerPrice(0);
                                }

                                productVarientsVo.setWholesalerMarginType("amount");
                                productVarientsVo.setWholesalerdiscountType("amount");
                                try {
                                    productVarientsVo
                                            .setWholesalerMargin(round(wholesalePrice - landingCost, decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setWholesalerMargin(0);
                                }

                                try {
                                    productVarientsVo.setWholesalerdiscount(round(mrp - wholesalePrice, decimalNumber));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    productVarientsVo.setWholesalerdiscount(0);
                                }
                                try {
                                    double onlinePrice = Double
                                            .parseDouble(securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                    row.getCell(onlinePriceIndex).getStringCellValue().trim()));
                                    onlinePrice = round(onlinePrice, decimalNumber);
                                    productVarientsVo.setShopifyPrice(onlinePrice);
                                } catch (Exception e) {
                                    productVarientsVo.setShopifyPrice(0);
                                }
                            }
                            if (row.getCell(Constant.SHEETITEMCODE) != null
                                    && row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim() != "") {
                                b = productService.findByitemCodeIgnoreCaseAndCompanyId(
                                        securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim()),
                                        Long.parseLong(session.getAttribute("companyId").toString()));
                                if (b.size() == 0) {
                                    try {
                                        productVarientsVo.setItemCode(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                        .getCell(Constant.SHEETITEMCODE).getStringCellValue().trim()));

                                    } catch (Exception e) {
                                        productVarientsVo.setItemCode("");
                                    }
                                } else {
                                    try {
                                        productVarientsVo.setItemCode(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                        .getCell(Constant.SHEETITEMCODE).getStringCellValue().trim()));

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }

                            } else {
                                try {
                                    productVarientsVo.setItemCode("");

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                            List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();
                            ProductVarientsVo varientVo = productService.insertProductVarient(productVarientsVo);
                            log.warning("HERE AFTER SAVE varientVo id is =========>" + varientVo.getProductVarientId());
                            productVarientsVo.setProductVarientId(varientVo.getProductVarientId());
                            productVarientsVos.add(productVarientsVo);
                            productVo.setProductVarientsVos(productVarientsVos);

                            try {
                                productVo.setItemCode(productVo.getProductVarientsVos().get(0).getItemCode());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            try {
                                productVo.setSellingPrice(productVo.getProductVarientsVos().get(0).getSellingPrice());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            try {
                                productVo.setMrp(productVo.getProductVarientsVos().get(0).getMrp());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            productVo = productService.insertProduct(productVo);
                            log.warning("HERE Product SAVE");
                            if (managePoQty != null && managePoQty.getValue() == 1) {
                                POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(
                                        productVo.getProductId(),
                                        Long.parseLong(session.getAttribute("branchId").toString()));
                                if (master == null) {
                                    master = new POQuntityMasterVo();
                                    master.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                    master.setPoQuantity(productVo.getPoQuantity());
                                    master.setStockLimit(productVo.getStockLimit());
                                    master.setProductVo(productVo);
                                    master.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                    master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString()));
                                } else {
                                    master.setPoQuantity(productVo.getPoQuantity());
                                    master.setStockLimit(productVo.getStockLimit());
                                    master.setAlterBy(Long.parseLong(session.getAttribute("branchId").toString()));
                                }
                                master = poQunatityMasterService.save(master);
                            }
                            try {
                                for (int i = 0; i < productVo.getProductVarientsVos().size(); i++) {
                                    String item_code = productVo.getProductVarientsVos().get(i).getItemCode();
                                    long productVarientId = productVo.getProductVarientsVos().get(i)
                                            .getProductVarientId();
                                    List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                                            .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(
                                                    productVarientId,
                                                    Long.parseLong(session.getAttribute("companyId").toString()), 0, 1);
                                    //// log.warning("productMultiBarcodeVos
                                    //// size=====>"+productMultiBarcodeVos.size());
                                    if (!productMultiBarcodeVos.isEmpty()) {
                                        //// log.warning("======productMultiBarcodeVos is available=====");
                                        ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
                                        productMultiBarcodeVo.setItemCode(item_code);
                                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                                .saveAndFlush(productMultiBarcodeVo);
                                    } else {
                                        //// log.warning("======productMultiBarcodeVos is not available=====");
                                        ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                                        productMultiBarcodeVo.setBranchId(
                                                Long.parseLong(session.getAttribute("branchId").toString()));
                                        productMultiBarcodeVo.setCompanyId(
                                                Long.parseLong(session.getAttribute("companyId").toString()));
                                        productMultiBarcodeVo
                                                .setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                        productMultiBarcodeVo.setCreatedBy(
                                                Long.parseLong(session.getAttribute("userId").toString()));
                                        productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                                        productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                                        productMultiBarcodeVo.setProductVarientId(productVarientId);
                                        productMultiBarcodeVo.setItemCode(item_code);
                                        productMultiBarcodeVo.setIsDefault(1);
                                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                                .saveAndFlush(productMultiBarcodeVo);
                                        //// log.warning("======productMultiBarcodeVo New Created=====");
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            Map<String, String> map = new HashMap<>();
                            log.warning(
                                    "pv Id ------>" + productVo.getProductVarientsVos().get(0).getProductVarientId());
                            map.put("productVarientId",
                                    String.valueOf(productVo.getProductVarientsVos().get(0).getProductVarientId()));
                            map.put("purchasePrice",
                                    String.valueOf(productVo.getProductVarientsVos().get(0).getPurchasePrice()));
                            map.put("landingPrice",
                                    String.valueOf(productVo.getProductVarientsVos().get(0).getLandingCost()));
                            map.put("sellingPrice",
                                    String.valueOf(productVo.getProductVarientsVos().get(0).getSellingPrice()));
                            map.put("mrpPrice", String.valueOf(productVo.getProductVarientsVos().get(0).getMrp()));
                            System.out.println("======================productVo.getIsExpiryManage()=========="
                                    + productVo.getIsExpiryManage());
                            if (productVo.getIsExpiryManage() == 1) {
                                Cell cell = row.getCell(DATE);
                                String dateValue = cell.getStringCellValue();
                                map.put("date", String.valueOf(row.getCell(DATE)));
                                map.put("days", String.valueOf(productVo.getExpirationdays()));
                                map.put("exptype", String.valueOf(productVo.getExpDateType()));
                            }

                            if (row.getCell(Constant.SHEETQTY) != null
                                    && row.getCell(Constant.SHEETQTY).getStringCellValue().trim() != null
                                    && !row.getCell(Constant.SHEETQTY).getStringCellValue().trim().equals("")) {
                                map.put("qty", securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETQTY).getStringCellValue().trim()));
                            } else {
                                map.put("qty", "0");
                            }
                            list.add(map);

                            // list.add(productVo.getProductVarientsVos().get(0));
                        }
                        if (row.getCell(IMGLINK) != null && row.getCell(IMGLINK).getStringCellValue().trim() != null
                                && !row.getCell(IMGLINK).getStringCellValue().trim().equals("")) {
                            if (row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue().trim()
                                    .equalsIgnoreCase("Yes")) {
                                productService.updateImageUsingUrl(session.getAttribute("companyId").toString(),
                                        String.valueOf(productVo.getProductId()),
                                        row.getCell(IMGLINK).getStringCellValue().trim().toString(),
                                        String.valueOf(productVo.getProductVarientsVos().get(0).getProductVarientId()));
                                log.info("==========od===============" + productVarientsVo.getProductVarientId());
                            } else {
                                productService.updateImageUsingUrl(session.getAttribute("companyId").toString(),
                                        String.valueOf(productVo.getProductId()),
                                        row.getCell(IMGLINK).getStringCellValue().trim().toString(), String.valueOf(0));
                            }
                        }
                    }
                    try {
                        if (Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 0
                                || Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 1) {
                            typesenseService.createSingleProductInTypesense(productVo.getProductId(),
                                    Long.parseLong(session.getAttribute("companyId").toString()));
                        }
                    } catch (Exception e) {
                        // TODO: handle exception
                        e.printStackTrace();
                    }
                }

            }

            List<Long> branchIdList = userRepository
                    .getbranchList(Long.parseLong(session.getAttribute("companyId").toString()));
            // log.warning("list------->"+list.size());
            // log.warning("list : "+list);
            for (int i = 0; i < list.size(); i++) {
                log.info("==========call loop " + i + "========");
                log.info("productVarientId =======>" + list.get(i).get("productVarientId"));
                log.info("Qty ========>" + list.get(i).get("qty"));
                ProductVarientsVo productVarientsVoqty = new ProductVarientsVo();
                productVarientsVoqty.setProductVarientId(Long.parseLong(list.get(i).get("productVarientId")));
                double landingcost = 0.0;
                double sellingPrice = 0.0;
                double mrpPrice = 0.0;

                if (list.get(i).get("landingPrice") != null) {
                    landingcost = Double.parseDouble(list.get(i).get("landingPrice"));
                }
                if (list.get(i).get("sellingPrice") != null) {
                    sellingPrice = Double.parseDouble(list.get(i).get("sellingPrice"));
                }
                if (list.get(i).get("mrpPrice") != null) {
                    mrpPrice = Double.parseDouble(list.get(i).get("mrpPrice"));
                }
                // }
                // if(c.size() > 0) {
                // if(false) {
                boolean ownBranch = false;
                if (!"0".equals(list.get(i).get("qty").toString())) {
                    log.info("======call save stock======");
                    List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();

                    StockTransactionVo stockTransactionVo = new StockTransactionVo();

                    stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                    stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                    stockTransactionVo.setDescription("Opening Stock");
                    stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                    stockTransactionVo.setInQuantity(Double.parseDouble(securityValidation
                            .checkAndReplaceCsvInjectionCharacters(list.get(i).get("qty").toString())));

                    stockTransactionVo.setProductPrice(Double.parseDouble(list.get(i).get("purchasePrice")));

                    stockTransactionVo.setBatchNo(
                            "B" + list.get(i).get("productVarientId") + new DecimalFormat("#.###").format(landingcost)
                                    + new DecimalFormat("#.###").format(mrpPrice));
                    stockTransactionVo.setMrp(mrpPrice);
                    stockTransactionVo.setLandingCost(landingcost);
                    stockTransactionVo.setSellingPrice(sellingPrice);

                    stockTransactionVo.setProductVarientsVo(productVarientsVoqty);

                    DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");

                    try {
                        stockTransactionVo.setStockTransactionDate(
                                dateFormat3.parse(session.getAttribute("firstDateFinancialYear").toString()));
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }

                    int isExpired = productRepository
                            .findExpiryStatusOnVarientId(Long.valueOf(list.get(i).get("productVarientId")));

                    System.out.println("=====here====" + isExpired + "=====" + list.get(i).get("date") + "========"
                            + "BranchID========" + Long.parseLong(session.getAttribute("branchId").toString()));
                    SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                    String strDate = "";
                    if (isExpired == 1) {
                        try {
                            Calendar c = Calendar.getInstance();
                            SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                            String dateString = list.get(i).get("date");
                            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                            LocalDate localDate = LocalDate.parse(dateString, inputFormatter);
                            Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
                            System.out.println(date + "===================");

                            c.setTime(date);

                            if (list.get(i).get("exptype").equalsIgnoreCase("MFG")) {

                                stockTransactionVo.setManufactureDate(c.getTime());
                                c.add(Calendar.DATE, Integer.parseInt(list.get(i).get("days")));
                                stockTransactionVo.setExpirationDate(c.getTime());
                                strDate = formatter.format(c.getTime());
                            } else {
                                stockTransactionVo.setExpirationDate(c.getTime());
                                strDate = formatter.format(c.getTime());
                                c.add(Calendar.DATE, Integer.parseInt(list.get(i).get("days")) * -1);
                                stockTransactionVo.setManufactureDate(c.getTime());

                            }
//								log.warning("strDate >> : "+strDate);

//								log.warning("Batch Before  >> : " +stockTransactionVo.getBatchNo());
                            stockTransactionVo.setBatchNo(stockTransactionVo.getBatchNo() + strDate);
//								log.warning("Batch After  >> : " +stockTransactionVo.getBatchNo());
                        } catch (Exception ex) {
                            Calendar c = Calendar.getInstance();
                            SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                            // String dateString=list.get(i).get("date"); // Remove this line
                            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                            LocalDate localDate = LocalDate.now(); // Use current date here
                            Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
                            System.out.println(date + "===================");
                            c.setTime(date);

                            if (list.get(i).get("exptype").equalsIgnoreCase("MFG")) {
                                stockTransactionVo.setManufactureDate(c.getTime());
                                c.add(Calendar.DATE, Integer.parseInt(list.get(i).get("days")));
                                stockTransactionVo.setExpirationDate(c.getTime());
                                strDate = formatter.format(c.getTime());
                            } else {
                                stockTransactionVo.setExpirationDate(c.getTime());
                                strDate = formatter.format(c.getTime());
                                c.add(Calendar.DATE, Integer.parseInt(list.get(i).get("days")) * -1);
                                stockTransactionVo.setManufactureDate(c.getTime());
                            }

//				          		log.warning("strDate >> : "+strDate);

//								log.warning("Batch Before  >> : " +stockTransactionVo.getBatchNo());
                            stockTransactionVo.setBatchNo(stockTransactionVo.getBatchNo() + strDate);
//								log.warning("Batch After  >> : " +stockTransactionVo.getBatchNo());
                        }

                        stockTransactionVo.setExpirationManage(1);
                    }

                    stockTransactionVo.setType("new");
                    stockTransactionVo.setTypeId(productVarientsVoqty.getProductVarientId());
                    stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());

                    if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                        stockTransactionVos.add(stockTransactionVo);
                    }

                    stockTransactionService.saveOpeningStock(stockTransactionVos);

                    try {
                        wooService.updateProductStockInWooCommerce(stockTransactionVos);
                        shopifyService.updateStockInShopify(stockTransactionVos, session);
                    } catch (Exception e) {
                        // e.printStackTrace();
                        // TODO: handle exception
                    }
                    ownBranch = true;
                }

                try {
                    List<StockMasterVo> masterVos = new ArrayList<StockMasterVo>();
                    for (int st = 0; st < branchIdList.size(); st++) {
                        if (ownBranch && branchIdList.get(st) == Long
                                .parseLong(session.getAttribute("branchId").toString())) {

                        } else {
                            StockMasterVo stockMasterVo = new StockMasterVo();
                            stockMasterVo.setBatchNo("B" + list.get(i).get("productVarientId")
                                    + new DecimalFormat("#.###").format(landingcost)
                                    + new DecimalFormat("#.###").format(mrpPrice));
                            stockMasterVo.setBranchId(Long.parseLong("" + branchIdList.get(st)));
                            stockMasterVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            stockMasterVo.setCreatedOn(new Date());
                            stockMasterVo.setExpirationDays(0);
                            stockMasterVo.setIsDisable(0);
                            stockMasterVo.setLandingCost(landingcost);
                            stockMasterVo.setModified_on(new Date());
                            stockMasterVo.setMrp(mrpPrice);
                            stockMasterVo.setProductVarientsVo(productVarientsVoqty);
                            stockMasterVo.setPurchasePrice(Double.parseDouble(list.get(i).get("purchasePrice")));
                            stockMasterVo.setQuantity(0);
                            stockMasterVo.setSellingPrice(sellingPrice);
                            stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString());
                            int isExpired = productRepository
                                    .findExpiryStatusOnVarientId(Long.valueOf(list.get(i).get("productVarientId")));

                            System.out.println("=====here====" + isExpired + "=====" + list.get(i).get("date")
                                    + "========" + "========" + "BranchID========"
                                    + Long.parseLong(session.getAttribute("branchId").toString()));
                            if (isExpired == 1) {
                                SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                                String strDate = "";
                                try {
                                    Calendar c = Calendar.getInstance();
                                    SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                                    String dateString = list.get(i).get("date");
                                    DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                                    LocalDate localDate = LocalDate.parse(dateString, inputFormatter);
                                    Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
                                    System.out.println(date + "===================");
                                    c.setTime(date);
                                    if (list.get(i).get("exptype").equalsIgnoreCase("MFG")) {

                                        stockMasterVo.setManufactureDate(c.getTime());
                                        c.add(Calendar.DATE, Integer.parseInt(list.get(i).get("days")));
                                        stockMasterVo.setExpirationDate(c.getTime());
                                        strDate = formatter.format(c.getTime());
                                    } else {
                                        stockMasterVo.setExpirationDate(c.getTime());
                                        strDate = formatter.format(c.getTime());
                                        c.add(Calendar.DATE, Integer.parseInt(list.get(i).get("days")) * -1);
                                        stockMasterVo.setManufactureDate(c.getTime());

                                    }
//											log.warning("strDate >> : "+strDate);

//											log.warning("Batch Before  >> : " +stockMasterVo.getBatchNo());
                                    stockMasterVo.setBatchNo(stockMasterVo.getBatchNo() + strDate);
//											log.warning("Batch After  >> : " +stockMasterVo.getBatchNo());
                                    System.out.println(stockMasterVo.getManufactureDate() + "===");
                                } catch (Exception ex) {
                                    Calendar c = Calendar.getInstance();
                                    SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                                    // String dateString=list.get(i).get("date"); // Remove this line
                                    DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                                    LocalDate localDate = LocalDate.now(); // Use current date here
                                    Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
                                    System.out.println(date + "===================");
                                    c.setTime(date);

                                    if (list.get(i).get("exptype").equalsIgnoreCase("MFG")) {
                                        stockMasterVo.setManufactureDate(c.getTime());
                                        c.add(Calendar.DATE, Integer.parseInt(list.get(i).get("days")));
                                        stockMasterVo.setExpirationDate(c.getTime());
                                        strDate = formatter.format(c.getTime());
                                    } else {
                                        stockMasterVo.setExpirationDate(c.getTime());
                                        strDate = formatter.format(c.getTime());
                                        c.add(Calendar.DATE, Integer.parseInt(list.get(i).get("days")) * -1);
                                        stockMasterVo.setManufactureDate(c.getTime());
                                    }
//											log.warning("strDate >> : "+strDate);

//											log.warning("Batch Before  >> : " +stockMasterVo.getBatchNo());
                                    stockMasterVo.setBatchNo(stockMasterVo.getBatchNo() + strDate);
//											log.warning("Batch After  >> : " +stockMasterVo.getBatchNo());
                                }
                            }
                            masterVos.add(stockMasterVo);
                        }

                    }
                    stockMasterService.saveAll(masterVos);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

            productSheetService.productsheetLog(list, session);
            productService.updateVarientNameBlankWithoutVariationproduct(
                    Long.parseLong(session.getAttribute("companyId").toString()));
            in.close();
            String filepath1 = "";
            if (flag == 1) {
                String tmpdir = System.getProperty("java.io.tmpdir");
                // FileOutputStream fileOut = new FileOutputStream(tmpdir + "/" + filename +
                // ".xlsx");

                FileOutputStream fileOut = new FileOutputStream(request.getServletContext().getRealPath("/") + "pospdf"
                        + System.getProperty("file.separator") + filename + ".xlsx");
                workbooksheet.write(fileOut);

                log.info("Excel complete-----");
                String filePathToBeServed = request.getServletContext().getRealPath("/") + "pospdf"
                        + System.getProperty("file.separator") + filename + ".xlsx"; // complete file name with path;
                filepath1 = filename + ".xlsx";
                File fileToDownload = new File(filePathToBeServed);
                if (fileToDownload.exists()) {

                }
                InputStream inputStream = new FileInputStream(fileToDownload);
                log.info("Sheet--------" + fileToDownload.getAbsolutePath());
                // response.setContentType("application/force-download");
                // response.setHeader("Content-Disposition", "attachment; filename=" + filename
                // + ".xlsx");
                // IOUtils.copy(inputStream, response.getOutputStream());
                // response.flushBuffer();
                inputStream.close();
                fileOut.close();
                workbooksheet.close();
            }

            log.info("*************************-");
            return "{ \"valid\": true,\"path\":\"" + filepath1 + "\" }";
        } else {
            return "redirect:/accessdenied";
        }
    }

    @RequestMapping(value = "/upload/excel/multibarcode")
    @ResponseBody
    public String uploadMultiBarcodeThroughSheet(HttpSession session, HttpServletRequest request) throws IOException {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {

            CompanySettingVo multibarcodeSetting = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIBARCODE);
            if (multibarcodeSetting.getValue() == 1) {
                long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
                String clusterId = session.getAttribute("clusterId").toString();
                String filepath = (String) session.getAttribute("filepath");
                File fb = new File(filepath);
                InputStream in = new FileInputStream(fb);

                List<String> itemcodelist = new ArrayList<>();

                // Create Workbook instance holding reference to .xlsx file
                XSSFWorkbook workbook = new XSSFWorkbook(in);
                // Get first/desired sheet from the workbook
                XSSFSheet sheet = workbook.getSheetAt(0);

                // Iterate through each rows one by one
                Iterator<Row> rowIterator = sheet.iterator();
                rowIterator.next();
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();
                    // For each row, iterate through all the columns
                    Iterator<Cell> cellIterator = row.cellIterator();

                    while (cellIterator.hasNext()) {
                        Cell cell = cellIterator.next();
                        // Check the cell type and format accordingly
                        cell.setCellType(Cell.CELL_TYPE_STRING);
                        switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_BOOLEAN:

                                log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
                                break;
                            case Cell.CELL_TYPE_NUMERIC:

                                break;
                            case Cell.CELL_TYPE_STRING:

                                // list.add(cell.getStringCellValue().trim());
                                break;

                        }

                    }

//      	                itemcodelist = productService.findAllItemcode(Long.parseLong(session.getAttribute("companyId").toString()));

                    if (row.getCell(0) != null && row.getCell(0).getStringCellValue().trim() != "") {
                        String itemCode = row.getCell(0).getStringCellValue().trim();
                        List<ProductVarientsVo> productVarient = new ArrayList<>();
                        productVarient = productService.findByitemCodeIgnoreCaseAndCompanyIdWithoutMerchatType(
                                securityValidation.checkAndReplaceCsvInjectionCharacters(itemCode.trim()),
                                Long.parseLong(session.getAttribute("companyId").toString()));
                        // log.info("----------productVarient
                        // size------------->:"+productVarient.size());
                        if (productVarient.size() > 0) {
                            // log.info("----------Product ItemCode Found------------- : " + itemCode);
                            try {

                                String item_code = productVarient.get(0).getItemCode();
                                long productVarientId = productVarient.get(0).getProductVarientId();
                                List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                                        .findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(productVarientId,
                                                Long.parseLong(session.getAttribute("companyId").toString()), 0, 1);
                                // log.warning("productMultiBarcodeVos size=====>" +
                                // productMultiBarcodeVos.size());
                                if (!productMultiBarcodeVos.isEmpty()) {
                                    // log.warning("======productMultiBarcodeVos is available=====");
//									ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
//									productMultiBarcodeVo.setItemCode(item_code);
//									ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
//											.saveAndFlush(productMultiBarcodeVo);
                                } else {
                                    // log.warning("======productMultiBarcodeVos is not available=====");
                                    ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                                    productMultiBarcodeVo
                                            .setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                                    productMultiBarcodeVo
                                            .setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                                    productMultiBarcodeVo
                                            .setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                    productMultiBarcodeVo
                                            .setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                                    productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                                    productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                                    productMultiBarcodeVo.setProductVarientId(productVarientId);
                                    productMultiBarcodeVo.setItemCode(item_code);
                                    productMultiBarcodeVo.setIsDefault(1);
                                    ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                            .saveAndFlush(productMultiBarcodeVo);
                                    // log.warning("======productMultiBarcodeVo New Created=====");
                                }

                                if (row.getCell(1) != null && row.getCell(1).getStringCellValue().trim() != "") {
                                    String multiItemCode = row.getCell(1).getStringCellValue().trim();
                                    List<ProductMultiBarcodeVo> multiBarcodeVos = productMultiBarcodeRepository
                                            .findByProductVariantIdAndItemCode(productVarientId, multiItemCode);
                                    // log.warning("multiBarcodeVos size=====>" + multiBarcodeVos.size());
                                    if (!multiBarcodeVos.isEmpty()) {
                                        // log.warning("======multiBarcodeVos is available=====");
//										ProductMultiBarcodeVo productMultiBarcodeVo = productMultiBarcodeVos.get(0);
//										productMultiBarcodeVo.setItemCode(multiItemCode);
//										ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository.saveAndFlush(productMultiBarcodeVo);
                                    } else {
                                        // log.warning("======multiBarcodeVos is not available=====");
                                        ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                                        productMultiBarcodeVo.setBranchId(
                                                Long.parseLong(session.getAttribute("branchId").toString()));
                                        productMultiBarcodeVo.setCompanyId(
                                                Long.parseLong(session.getAttribute("companyId").toString()));
                                        productMultiBarcodeVo
                                                .setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                                        productMultiBarcodeVo.setCreatedBy(
                                                Long.parseLong(session.getAttribute("userId").toString()));
                                        productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                                        productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                                        productMultiBarcodeVo.setProductVarientId(productVarientId);
                                        productMultiBarcodeVo.setItemCode(multiItemCode);
                                        ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                                                .saveAndFlush(productMultiBarcodeVo);
                                        // log.warning("======multiBarcodeVos New Created=====");

                                    }

                                }

                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        } else {
                            // log.info("----------Product ItemCode Not Found------------- : " + itemCode);
                        }
                    }
                }
                in.close();

                log.info("*************************-");
                return "success";
            } else {
                return "multibarcodenot";
            }

        } else {
            return "redirect:/accessdenied";
        }

    }

    // @RequestMapping(value = "/upload/excel2")
//	@ResponseBody
//	public String ImportKalapi(HttpSession session, HttpServletRequest request) throws IOException {
//		if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
//			String filepath = (String) session.getAttribute("filepath");
//			File fb = new File(filepath);
//			InputStream in = new FileInputStream(fb);
//
//			List<String> itemcodelist = new ArrayList<>();
//
//			// Create Workbook instance holding reference to .xlsx file
//			XSSFWorkbook workbook = new XSSFWorkbook(in);
//			// Get first/desired sheet from the workbook
//			XSSFSheet sheet = workbook.getSheetAt(0);
//
//			// Iterate through each rows one by one
//			Iterator<Row> rowIterator = sheet.iterator();
//			rowIterator.next();
//			while (rowIterator.hasNext()) {
//				Row row = rowIterator.next();
//				// For each row, iterate through all the columns
//				Iterator<Cell> cellIterator = row.cellIterator();
//
//				while (cellIterator.hasNext()) {
//					Cell cell = cellIterator.next();
//					// Check the cell type and format accordingly
//					cell.setCellType(Cell.CELL_TYPE_STRING);
//					switch (cell.getCellType()) {
//					case Cell.CELL_TYPE_BOOLEAN:
//
//						log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
//						break;
//					case Cell.CELL_TYPE_NUMERIC:
//
//						break;
//					case Cell.CELL_TYPE_STRING:
//
//						// list.add(cell.getStringCellValue().trim());
//						break;
//
//					}
//
//				}
//
//				/*
//				 * log.info("Row No= " + (row.getRowNum() + 1));
//				 *
//				 * ProductVo productVo = new ProductVo();
//				 *
//				 * List<ProductVarientsVo> b = new ArrayList<>();
//				 *
//				 * b= productService.findByitemCodeIgnoreCaseAndCompanyId(row.getCell(0).
//				 * getStringCellValue().trim(),
//				 * Long.parseLong(session.getAttribute("companyId").toString()));
//				 */
//
////	                itemcodelist = productService.findAllItemcode(Long.parseLong(session.getAttribute("companyId").toString()));
//				String itemCode = row.getCell(0).getStringCellValue().trim();
//
//				ProductVarientsVo productVarientsVo = productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(
//						itemCode, Long.parseLong(session.getAttribute("companyId").toString()), 0);
//
//				if (productVarientsVo != null) {
//
//					log.info(
//							"-------------------------Product ItemCode Found--------------------- : " + itemCode);
//					if(productVarientsVo.getMrp()<Double.parseDouble(row.getCell(1).getStringCellValue().trim())) {
//						log.info("-------------------------Product ItemCode Not Updated --------------------- : " + itemCode);
//					}else {
//						productVarientsVo.setDiscountType("amount");
//						productVarientsVo.setDiscount(productVarientsVo.getMrp()-Double.parseDouble(row.getCell(1).getStringCellValue().trim()));
//						productVarientsVo.setRetailerMarginType("amount");
//						productVarientsVo.setRetailerMargin(Double.parseDouble(new DecimalFormat("#.##").format(Double.parseDouble(row.getCell(1).getStringCellValue().trim())-productVarientsVo.getLandingCost())));
//						productVarientsVo.setSellingPrice(Double.parseDouble(row.getCell(1).getStringCellValue().trim()));
//					}
//					//TaxVo taxVo1 = taxService.findByTaxRateAndCompanyId(taxRate,
////							Long.parseLong(session.getAttribute("companyId").toString()));
////					if (taxVo1 != null) {
////						productVarientsVo.getProductVo().setPurchaseTaxVo(taxVo1);
////					} else {
////
////						TaxVo taxVo = new TaxVo();
////						taxVo.setTaxName(row.getCell(3).getStringCellValue().trim());
////						taxVo.setTaxRate(Double.parseDouble(row.getCell(4).getStringCellValue()));
////						taxVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
////						taxVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
////						taxVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
////						taxVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
////
////						AccountCustomVo accountCustomVo = new AccountCustomVo();
////						accountCustomVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
////						accountCustomVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
////						accountCustomVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
////						accountCustomVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
////						accountCustomVo.setModifiedOn(CurrentDateTime.getCurrentDate());
////						accountCustomVo.setCreatedOn(CurrentDateTime.getCurrentDate());
////						accountCustomVo.setAccountName(taxVo.getTaxName() + "(" + taxVo.getTaxRate() + "%)");
////
////						AccountGroupVo accountGroupVo = new AccountGroupVo();
////
////						accountGroupVo.setAccountGroupId(Constant.ACCOUNT_GROUP_DUTIES_AND_TAXES);
////						accountCustomVo.setAccounType(Constant.TAX);
////
////						accountCustomVo.setGroup(accountGroupVo);
////						accountCustomService.insertAccount(accountCustomVo);
////						taxVo.setAccountCustomVo(accountCustomVo);
////						taxService.save(taxVo);
////						productVarientsVo.getProductVo().setTaxVo(taxVo);
////					}
//					productVariantRepository.save(productVarientsVo);
//
//				} else {
//					log.info(
//							"-------------------------Product ItemCode Not Found--------------------- : " + itemCode);
//				}
//			}
//			in.close();
//
//			log.info("*************************-");
//			return "success";
//
//		} else
//
//		{
//			return "redirect:/accessdenied";
//		}
//
//	}
    boolean isEmptyRow(Row row) {
        boolean isEmptyRow = true;
        for (int cellNum = 0; cellNum < row.getLastCellNum(); cellNum++) {
            Cell cell = row.getCell(cellNum);
            // log.info("-->>>>>"+cell);
            // log.info("-->>>>>"+(cell==null));
            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK && StringUtils.isNotBlank(cell.toString())) {
                isEmptyRow = false;
            }
        }
        return isEmptyRow;
    }

    public ProductSheetUploadFinalDTO checkSheet(HttpServletRequest request, HttpServletResponse response,
                                                 HttpSession session, String filepath) throws IOException {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        StringBuilder rowNumberBuilder = new StringBuilder();
        CompanySettingVo limit = companySettingService.findByCompanyIdAndType(0, Constant.SHEETLIMIT);
        CompanySettingVo isUmoWiseDecimalRestrictionStopped = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.STOPUMOWISEDECIMAL);
        Multimap<String, String> nameanditemcodeList = ArrayListMultimap.create();
        String name = "";
        boolean result = true;
        List<String> itemcodelist = new ArrayList<>();
        List<String> productNamelist = new ArrayList<>();
        List<String> variationNoList = null;
        Map<String, Long> resultMap = new HashMap<>();

        List<String> categorylist = null;
        List<String> brandlist = null;

        org.json.JSONArray categoryArray = new org.json.JSONArray();
        org.json.JSONArray brandArray = new org.json.JSONArray();

        org.json.JSONObject categoryMapJson = null;
        org.json.JSONObject brandMapJson = null;

        // filepath = (String) session.getAttribute("filepath");

        File fb = new File(filepath);
        InputStream in = new FileInputStream(fb);
        // Create Workbook instance holding reference to .xlsx file
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        // Get first/desired sheet from the workbook
        XSSFSheet sheet = workbook.getSheetAt(0);
        // Iterate through each rows one by one
        CompanySettingVo duplicateBarcode = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIDUPLICATEBARCODE);
        CompanySettingVo fatoorahSettingVo = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.FATOORAHQRCODE);
        CompanySettingVo memberShip = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.MEMBERSHIP);
        int PRODUCTTYPE = 28;
        int WHOLESALEPRICE = 29;
        int RETAILERPRICE = 30;
        int ONLINEPRICE = 31;
        int MINQTY = 32;
        int IMGLINK = 33;
        int CESS = 34;
        int CESSRATE = 35;
        int STOCKLIMIT = 36;
        int POQTY = 37;
        int ISBATCHMANGE = 38;
        int ISEXPIRY = 39;
        int DAYS = 40;
        int CALCULATIONS = 41;
        int DATE = 42;
        int ISSELL = 43;
        String CELL_PRODUCTTYPE = "AF";
        String CELL_WHOLESALEPRICE = "AG";
        String CELL_RETAILERPRICE = "AH";
        String CELL_ONLINEPRICE = "AI";
        String CELL_MINQTY = "AJ";
        String CELL_IMGLINK = "AK";
        String CELL_CESS = "AL";
        String CELL_CESSRATE = "AM";
        String CELL_STOCKLIMIT = "AN";
        String CELL_POQTY = "AO";
        String CELL_ISBATCHMANGE = "AP";
        String CELL_ISEXPIRY = "AQ";
        String CELL_DAYS = "AR";
        String CELL_CALCULATIONS = "AS";
        String CELL_DATE = "AT";
        String CELL_ISSELL = "AU";
        if (memberShip.getValue() == 1) {
            PRODUCTTYPE = 32;
            WHOLESALEPRICE = 33;
            RETAILERPRICE = 34;
            ONLINEPRICE = 35;
            MINQTY = 36;
            IMGLINK = 37;
            CESS = 38;
            CESSRATE = 39;
            STOCKLIMIT = 40;
            POQTY = 41;
            ISBATCHMANGE = 42;
            ISEXPIRY = 43;
            DAYS = 44;
            CALCULATIONS = 45;
            DATE = 46;
            ISSELL = 47;
            CELL_PRODUCTTYPE = "AG";
            CELL_WHOLESALEPRICE = "AH";
            CELL_RETAILERPRICE = "AI";
            CELL_ONLINEPRICE = "AJ";
            CELL_MINQTY = "AK";
            CELL_IMGLINK = "AL";
            CELL_CESS = "AM";
            CELL_CESSRATE = "AN";
            CELL_STOCKLIMIT = "AO";
            CELL_POQTY = "AP";
            CELL_ISBATCHMANGE = "AQ";
            CELL_ISEXPIRY = "AR";
            CELL_DAYS = "AS";
            CELL_CALCULATIONS = "AT";
            CELL_DATE = "AU";
            CELL_ISSELL = "AV";
        }

        itemcodelist = productService.findAllItemcode(Long.parseLong(session.getAttribute("companyId").toString()),
                merchantTypeId, clusterId);

        CompanySettingVo companySettingVo = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()),
                Constant.ALLOWPRODUCTDUPLICATIONVALIDATION);
        CompanySettingVo productType = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);
        CompanySettingVo allPriceShow = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLPRICESHOW);
        CompanySettingVo managePoQty = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
        int emptyRowCount = 0;
        int decimalNumber = 2;
        try {
            decimalNumber = Integer.parseInt(session.getAttribute("decimalPoint").toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        DataFormatter formatter = new DataFormatter();

        Iterator<Row> rowIterator = sheet.iterator();
        long rowTotal = sheet.getLastRowNum();
        int count = 0;
        // rowTotal =rowTotal-1;

        totalRow = rowTotal;
        log.info("rowTotal" + rowTotal + "===================================");
        Row row1 = rowIterator.next();

        List<ProductWrongSheetDTO> wrongSheetDTO = new ArrayList<ProductWrongSheetDTO>();
        if (rowTotal > limit.getValue()) {
            result = false;
            rowNumber = "Only " + limit.getValue() + " product can be upload at a time";
            return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal), wrongSheetDTO.size(),
                    "Only " + limit.getValue() + " product can be upload at a time", false);
        }
        if (row1.getCell(Constant.SHEETPRODUCTNAME) != null
                && row1.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim() != "") {

            if (!row1.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim().equals("Product Name")) {
                result = false;
                rowNumber += "Column not found. Please download the new demo sheet";
                return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal),
                        wrongSheetDTO.size(), "Column not found. Please download the new demo sheet", false);
            }
        } else {
            result = false;
            rowNumber += "Column not found. Please download the new demo sheet";
            return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal), wrongSheetDTO.size(),
                    "Column not found. Please download the new demo sheet", false);
        }

        if (memberShip.getValue() == 1) {
            if (row1.getCell(Constant.SHEETMEMBERSHIP) != null
                    && row1.getCell(Constant.SHEETMEMBERSHIP).getStringCellValue().trim() != "") {

                if (!row1.getCell(Constant.SHEETMEMBERSHIP).getStringCellValue().trim().equals("MemberShip Margin")) {
                    result = false;
                    rowNumber += "Column not found. Please download the new demo Sheet.";
                    return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal),
                            wrongSheetDTO.size(), "Column not found. Please download the new demo Sheet.", false);
                }
            } else {
                result = false;
                rowNumber += "Column not found. Please download the new demo Sheet.";
                return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal),
                        wrongSheetDTO.size(), "Column not found. Please download the new demo Sheet.", false);
            }
        } else {
            System.out.println(row1.getCell(WHOLESALEPRICE).getStringCellValue().trim() + "=======");
            if (row1.getCell(WHOLESALEPRICE) != null
                    && row1.getCell(WHOLESALEPRICE).getStringCellValue().trim() != "") {

                if (!row1.getCell(WHOLESALEPRICE).getStringCellValue().trim().equals("Wholesale Price")) {
                    result = false;
                    rowNumber += "Column not found. Please download the new demo sheet.";
                    return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal),
                            wrongSheetDTO.size(), "Column not found. Please download the new demo sheet.", false);
                }
            } else {
                result = false;
                rowNumber += "Column not found. Please download the new demo sheet.";
                return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal),
                        wrongSheetDTO.size(), "Column not found. Please download the new demo sheet.", false);
            }
        }

        if (result == true) {
            int i = 2;
            int blankrowcount = 0;
            while (rowIterator.hasNext()) {
                double landingCost = 0, mrp = 0, purchaseprice = 0, purchasetaxRate = 0, discount = 0, sellingprice = 0,
                        margin = 0;
                String discounttype = null;
                int purchasetaxincluding = 0;
                Boolean checkIssue = false;
                UnitOfMeasurementVo unitOfMeasurementVo = null;
                int allowedDecimalAsPerUMO = 2;
                StringBuilder reasonBuilder = new StringBuilder();
                Row row = rowIterator.next();
                // For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();

                    cell.setCellValue(formatter.formatCellValue(cell));
                    cell.setCellType(Cell.CELL_TYPE_STRING);

                }

                if (row.getCell(Constant.SHEETDEPARTMENT) == null) {
                    if (isEmptyRow(row)) {
                        if (emptyRowCount >= 5) {
                            break;
                        }
                        emptyRowCount = emptyRowCount + 1;
                    }
                }

                if (isEmptyRow(row)) {
                    log.warning("HERE Empty Row");
                } else {
                    emptyRowCount = 0;

                    List<Integer> productList = new ArrayList<Integer>();
                    /*----------------------------------------------------------*/
                    // ////log.info("productnnnnnnnnnnnnnnnnnnnnnnnn:"+row.getCell(6).getStringCellValue());
                    if (row.getCell(Constant.SHEETPRODUCTNAME) != null
                            && row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim() != "") {
                        productList = productService.findByProductNameAndCompanyIdAndIsDeleted(
                                row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim(),
                                Long.parseLong(session.getAttribute("companyId").toString()), 0);
                        count = productService.getCountByProductNameAndCompanyIdAndIsDeleted(
                                row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim(),
                                Long.parseLong(session.getAttribute("companyId").toString()), 0);

                        // log.warning("productList------->"+productList.size());
                        // log.warning("count------->"+count);

                        if (productList.size() > 0) {
                            if (productList.size() > 1) {
                                if (companySettingVo != null && companySettingVo.getValue() == 1) {

                                } else {
                                    checkIssue = true;
                                    result = false;
                                    reasonBuilder.append("(Same name product already exist)-");
                                    rowNumberBuilder.append("(" + i + ",Same name product already exist)-");
                                }
                            } else {
                                // log.info("productList.get(0:::::::::"+productList.get(0));
                                if (productList.get(0) == 0) {
                                    if (companySettingVo != null && companySettingVo.getValue() == 1) {
                                    } else {
                                        checkIssue = true;
                                        result = false;
                                        reasonBuilder.append("(Same name product already exist)-");
                                        rowNumberBuilder.append("(" + i + ",Same name product already exist)-");

                                    }
                                } else {
                                    try {
                                        if (row.getCell(Constant.SHEETHAVEVARIENT) != null
                                                && row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue()
                                                .trim() != ""
                                                && row.getCell(Constant.SHEETHAVEVARIENT).toString()
                                                .equalsIgnoreCase("No")) {
                                            result = false;
                                            checkIssue = true;
                                            reasonBuilder.append("(Same name product already exist)-");
                                            rowNumberBuilder.append("(" + i + ",Same name product already exist)-");
                                        } else if (row.getCell(Constant.SHEETHAVEVARIENT) != null
                                                && row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue()
                                                .trim() != ""
                                                && row.getCell(Constant.SHEETHAVEVARIENT).toString()
                                                .equalsIgnoreCase("Yes")) {
                                            // result = true;
                                            // rowNumber += "(" + i + ",Pls This Product Add Menual )-";
                                        }
                                    } catch (Exception e) {
                                    }
                                }
                            }
                        }
                    } else {
                        result = false;
                        // rowNumber += "(" + i + ",G)-";
                        checkIssue = true;
                        // reason+= "(Product Name Is Required)-";
                    }

                    List<String> productTypesList = new ArrayList<String>(
                            Arrays.asList(Constant.Finished, Constant.SemiFinished, Constant.Raw, Constant.Packaging));

                    try {
                        if (row.getCell(Constant.SHEETDEPARTMENT) != null
                                && row.getCell(Constant.SHEETDEPARTMENT).getStringCellValue().trim() != "") {
                            if (row.getCell(Constant.SHEETDEPARTMENT).getStringCellValue().trim().length() <= 50) {

                            } else {
                                checkIssue = true;
                                result = false;
                                reasonBuilder.append("(Department Name must be less or equal to 50 characters)-");
                                rowNumberBuilder.append("(" + i + ",A)-");
                            }

                        } else {
                            checkIssue = true;
                            result = false;
                            reasonBuilder.append("(Department Name Required)-");
                            rowNumberBuilder.append("(" + i + ",A)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // ---------------------------------------------------------------------------------

                    /*-------------------Employee name--------------------------------------*/
                    String categoryName = "";
                    try {
                        if (row.getCell(Constant.SHEETCATEGORY) != null
                                && row.getCell(Constant.SHEETCATEGORY).getStringCellValue().trim() != "") {
                            if (row.getCell(Constant.SHEETCATEGORY).getStringCellValue().trim().length() <= 50) {
                                categoryName = securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETCATEGORY).getStringCellValue().trim());
                            } else {
                                checkIssue = true;
                                result = false;
                                reasonBuilder.append("(Category Name must be less or equal to 50 characters)-");
                                rowNumberBuilder.append("(" + i + ",B)-");
                            }
                        } else {
                            checkIssue = true;
                            result = false;
                            reasonBuilder.append("(Category name Required)-");
                            rowNumberBuilder.append("(" + i + ",B)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        if (row.getCell(Constant.SHEETSUBCATEGORY) != null
                                && row.getCell(Constant.SHEETSUBCATEGORY).getStringCellValue().trim() != "") {
                            if (row.getCell(Constant.SHEETSUBCATEGORY).getStringCellValue().trim().length() <= 50) {
                                CategoryVo subCategoryVo = categoryService.findByCategoryNameAndCompanyId(
                                        securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETSUBCATEGORY).getStringCellValue().trim()),
                                        Long.parseLong(session.getAttribute("companyId").toString()));
                                if (subCategoryVo != null) {

                                    if (subCategoryVo.getCategoryVo() != null) {// means subcategory doesn't have parent
                                        // means this is the main category
                                        CategoryVo categoryVo = categoryService.findByCategoryNameAndCompanyId(
                                                categoryName,
                                                Long.parseLong(session.getAttribute("companyId").toString()));

                                        List<MainCategoryDTO> mainCategoryDTOs = categoryService
                                                .findMainCategoryBySubCategoryName(
                                                        securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                                row.getCell(Constant.SHEETSUBCATEGORY)
                                                                        .getStringCellValue().trim()),
                                                        Long.parseLong(session.getAttribute("companyId").toString()));

                                        if (categoryVo == null && !mainCategoryDTOs.isEmpty()) {
                                            checkIssue = true;
                                            result = false;
                                            reasonBuilder.append("(Parent Category Not Found)-");
                                            rowNumberBuilder.append("(" + i + ",C)-");
                                        } else if (categoryVo != null && !mainCategoryDTOs.isEmpty()) {
                                            boolean mainCategoryFound = false;
                                            for (int j = 0; j < mainCategoryDTOs.size(); j++) {
                                                if (mainCategoryDTOs.get(j).getCategoryId() == categoryVo
                                                        .getCategoryId()) {
                                                    mainCategoryFound = true;
                                                }
                                            }
                                            if (!mainCategoryFound) {
                                                checkIssue = true;
                                                result = false;
                                                reasonBuilder.append("(Sub Category's Parent Category Not Found)-");
                                                rowNumberBuilder.append("(" + i + ",C)-");
                                            }
                                        }
                                    } else {
                                        checkIssue = true;
                                        result = false;
                                        reasonBuilder.append(
                                                "(Sub Category is Main Category so Can not add as Sub Category)-");
                                        rowNumberBuilder.append("(" + i + ",C)-");
                                    }
                                } else {
                                    String subCategoryName = row.getCell(Constant.SHEETSUBCATEGORY).getStringCellValue()
                                            .trim();
                                    try {
                                        if (!categoryArray.isEmpty()) {
                                            for (int j = 0; j < categoryArray.length(); j++) {
                                                org.json.JSONObject objects = categoryArray.optJSONObject(j);
                                                String subCat = (String) objects.get("sub");
                                                String cat = (String) objects.get("main");
                                                if (StringUtils.equals(subCat, subCategoryName)) {
                                                    if (!StringUtils.equals(categoryName, cat)) {
                                                        checkIssue = true;
                                                        result = false;
                                                        reasonBuilder.append(
                                                                "(Sub-Category Can't be Same for Two Different Parent Category)-");
                                                        rowNumberBuilder.append("(" + i + ",C)-");
                                                        break;
                                                    }
                                                }

                                            }
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    try {
                                        if (categorylist == null) {
                                            categorylist = new ArrayList<>();
                                        }
                                        if (!categorylist.isEmpty()) {
                                            if (categorylist.contains(subCategoryName)
                                                    && categoryMapJson.has(subCategoryName)) {
                                                String subCateValue = (String) categoryMapJson.get(subCategoryName);
                                                if (!StringUtils.equals(subCateValue, subCategoryName)) {
                                                    checkIssue = true;
                                                    result = false;
                                                    reasonBuilder.append(
                                                            "(Sub-Category is Main Category so cannot added as a Sub-Category)-");
                                                    rowNumberBuilder.append("(" + i + ",C)-");
                                                }
                                            }
                                        }
                                        categorylist.add(categoryName);
                                        if (categoryMapJson == null) {
                                            categoryMapJson = new org.json.JSONObject();
                                        }
                                        categoryMapJson.put(categoryName, subCategoryName);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                }
                                try {
                                    org.json.JSONObject categoryJson = new org.json.JSONObject();
                                    categoryJson.put("sub",
                                            row.getCell(Constant.SHEETSUBCATEGORY).getStringCellValue().trim());
                                    categoryJson.put("main", categoryName);
                                    categoryArray.put(categoryJson);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                            } else {
                                checkIssue = true;
                                result = false;
                                reasonBuilder.append("(Sub Category Name must be less or equal to 50 characters)-");
                                rowNumberBuilder.append("(" + i + ",C)-");
                            }
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    String brandName = "";
                    try {
                        if (row.getCell(Constant.SHEETBRAND) != null
                                && row.getCell(Constant.SHEETBRAND).getStringCellValue().trim() != "") {
                            if (row.getCell(Constant.SHEETBRAND).getStringCellValue().trim().length() <= 50) {
                                brandName = securityValidation.checkAndReplaceCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETBRAND).getStringCellValue().trim());
                            } else {
                                checkIssue = true;
                                result = false;
                                reasonBuilder.append("(Brand Name must be less or equal to 50 characters)-");
                                rowNumberBuilder.append("(" + i + ",D)-");
                            }
                        } else {
                            checkIssue = true;
                            result = false;
                            reasonBuilder.append("(Brand name Required)-");
                            rowNumberBuilder.append("(" + i + ",D)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        if (row.getCell(Constant.SHEETSUBBRAND) != null
                                && row.getCell(Constant.SHEETSUBBRAND).getStringCellValue().trim() != "") {
                            if (row.getCell(Constant.SHEETSUBBRAND).getStringCellValue().trim().length() <= 50) {
                                BrandVo subBrandVo = brandService.findByBrandnameAndCompanyId(
                                        securityValidation.checkAndReplaceCsvInjectionCharacters(
                                                row.getCell(Constant.SHEETSUBBRAND).getStringCellValue().trim()),
                                        Long.parseLong(session.getAttribute("companyId").toString()));
                                if (subBrandVo != null) {

                                    if (subBrandVo.getBrandVo() != null) {// means subbrand doesn't have parent means
                                        // this is the main brand
                                        BrandVo brandVo = brandService.findByBrandnameAndCompanyId(brandName,
                                                Long.parseLong(session.getAttribute("companyId").toString()));

                                        List<MainBrandDTO> mainBrandDTOs = brandService.findMainBrandBySubBrandName(
                                                securityValidation.checkAndReplaceCsvInjectionCharacters(row
                                                        .getCell(Constant.SHEETSUBBRAND).getStringCellValue().trim()),
                                                Long.parseLong(session.getAttribute("companyId").toString()));

                                        if (brandVo == null && !mainBrandDTOs.isEmpty()) {
                                            checkIssue = true;
                                            result = false;
                                            reasonBuilder.append("(Parent Brand Not Found)-");
                                            rowNumberBuilder.append("(" + i + ",E)-");
                                        } else if (brandVo != null && !mainBrandDTOs.isEmpty()) {
                                            boolean mainBrandFound = false;
                                            for (int j = 0; j < mainBrandDTOs.size(); j++) {
                                                if (mainBrandDTOs.get(j).getBrandId() == brandVo.getBrandId()) {
                                                    mainBrandFound = true;
                                                }
                                            }
                                            if (!mainBrandFound) {
                                                checkIssue = true;
                                                result = false;
                                                reasonBuilder.append("(Sub Brand's Parent Brand Not Found)-");
                                                rowNumberBuilder.append("(" + i + ",E)-");
                                            }
                                        }
                                    } else {
                                        checkIssue = true;
                                        result = false;
                                        reasonBuilder.append("(Sub Brand is Main Brand so Can not add as Sub Brand)-");
                                        rowNumberBuilder.append("(" + i + ",E)-");
                                    }
                                } else {
                                    String subBrandName = row.getCell(Constant.SHEETSUBBRAND).getStringCellValue()
                                            .trim();
                                    try {
                                        if (!brandArray.isEmpty()) {
                                            for (int j = 0; j < brandArray.length(); j++) {
                                                org.json.JSONObject objects = brandArray.optJSONObject(j);
                                                String subBrand = (String) objects.get("sub");
                                                String mainBrand = (String) objects.get("main");
                                                if (StringUtils.equals(subBrand, row.getCell(Constant.SHEETSUBBRAND)
                                                        .getStringCellValue().trim())) {
                                                    if (!StringUtils.equals(brandName, mainBrand)) {
                                                        checkIssue = true;
                                                        result = false;
                                                        reasonBuilder.append(
                                                                "(Sub-Brand Can't be Same for Two Different Parent Brand)-");
                                                        rowNumberBuilder.append("(" + i + ",E)-");
                                                        break;
                                                    }
                                                }

                                            }
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    try {
                                        if (brandlist == null) {
                                            brandlist = new ArrayList<>();
                                        }
                                        if (!brandlist.isEmpty()) {
                                            if (brandlist.contains(subBrandName) && brandMapJson.has(subBrandName)) {
                                                String subBValue = (String) brandMapJson.get(subBrandName);
                                                if (!StringUtils.equals(subBValue, subBrandName)) {
                                                    checkIssue = true;
                                                    result = false;
                                                    reasonBuilder.append(
                                                            "(Sub-Brand is Main Brand so cannot added as a Sub-Brand)-");
                                                    rowNumberBuilder.append("(" + i + ",E)-");
                                                }
                                            }
                                        }
                                        brandlist.add(brandName);
                                        if (brandMapJson == null) {
                                            brandMapJson = new org.json.JSONObject();
                                        }
                                        brandMapJson.put(brandName, subBrandName);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                                try {
                                    org.json.JSONObject brandJson = new org.json.JSONObject();
                                    brandJson.put("sub",
                                            row.getCell(Constant.SHEETSUBBRAND).getStringCellValue().trim());
                                    brandJson.put("main", brandName);
                                    brandArray.put(brandJson);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            } else {
                                checkIssue = true;
                                result = false;
                                reasonBuilder.append("(Sub Brand Name must be less or equal to 50 characters)-");
                                rowNumberBuilder.append("(" + i + ",E)-");
                            }
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {

                        if (row.getCell(Constant.SHEETITEMCODE) != null
                                && row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim() != "") {
                            if (RegexTest.validateItemCode(
                                    row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim())) {
                                if (securityValidation.checkAndCsvInjectionCharacters(
                                        row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim())) {
                                    checkIssue = true;
                                    result = false;
                                    reasonBuilder.append("(Itemcode Not Valid)-");
                                    rowNumberBuilder.append("(" + i + ",F)-Item Code Not Valid");
                                } else {
                                    if (duplicateBarcode.getValue() == 1) {// means allow to enter duplicate barcode

                                    } else {// not allow to duplicate barcode
                                        boolean exist = itemcodelist.contains(
                                                row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim()) ? true
                                                : false;
                                        if (exist) {
                                            checkIssue = true;
                                            result = false;
                                            reasonBuilder.append("(Itemcode repeat)-");
                                            rowNumberBuilder.append("(" + i + ",F)-Item Code Is repeat");
                                        }
                                    }
                                }
                            } else {
                                checkIssue = true;
                                result = false;
                                reasonBuilder.append("(Itemcode Not Valid)-");
                                rowNumberBuilder.append("(" + i + ",F)-Item Code Not Valid");
                            }
                            itemcodelist.add(row.getCell(Constant.SHEETITEMCODE).getStringCellValue().trim());

                        } else {
                            checkIssue = true;
                            result = false;
                            reasonBuilder.append("(Itemcode Required)-");
                            rowNumberBuilder.append("(" + i + ",F)-Item Code Is Required");
                        }

                    } catch (Exception e) {
                        checkIssue = true;
                        result = false;
                        reasonBuilder.append("(Itemcode Required)-");
                        rowNumberBuilder.append("(" + i + ",F)-Item Code Is Required");
                        e.printStackTrace();
                    }

                    if (fatoorahSettingVo.getValue() == 1) {
                        // log.warning("HERE--FATOORAHQRCODE------is--ON");
                        try {
                            if (row.getCell(Constant.SHEETPRODUCTNAME) != null
                                    && row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim() != "") {
                                productNamelist.add(row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim());
                                if (row.getCell(Constant.SHEETHAVEVARIENT) != null
                                        && row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue().trim() != ""
                                        && row.getCell(Constant.SHEETHAVEVARIENT).toString().equalsIgnoreCase("No")) {
                                    // log.warning("HAVEVARIENT------->No");
                                    if (companySettingVo != null && companySettingVo.getValue() == 1) {
                                    } else {
                                        if ((count + Collections.frequency(productNamelist,
                                                row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue()
                                                        .trim())) > 100) {
                                            result = false;
                                            checkIssue = true;
                                            reasonBuilder.append("(Only 100 variants allowed in "
                                                    + row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()
                                                    + ")-");
                                            rowNumberBuilder.append("(" + i + ",G)-");
                                        }
                                    }

                                } else if (row.getCell(Constant.SHEETHAVEVARIENT) != null
                                        && row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue().trim() != ""
                                        && row.getCell(Constant.SHEETHAVEVARIENT).toString().equalsIgnoreCase("Yes")) {
                                    // log.warning("HAVEVARIENT------->Yes");
                                    if ((count + Collections.frequency(productNamelist, row
                                            .getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim())) > 100) {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(Only 100 variants allowed in "
                                                + row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()
                                                + ")-");
                                        rowNumberBuilder.append("(" + i + ",G)-");
                                    }
                                }

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Product Name Is Required)-");
                                rowNumberBuilder.append("(" + i + ",G)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(Constant.SHEETPRINTNAME) != null
                                    && row.getCell(Constant.SHEETPRINTNAME).getStringCellValue().trim() != "") {

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Print Name Is Required)-");
                                rowNumberBuilder.append("(" + i + ",H)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    } else {
                        // log.warning("HERE--FATOORAHQRCODE------is--OFF");
                        try {
                            if (row.getCell(Constant.SHEETPRODUCTNAME) != null
                                    && row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim() != "") {
                                if (row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim().length() < 101) {
                                    if (RegexTest.validateName(
                                            row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim())) {
                                        if (companySettingVo != null && companySettingVo.getValue() == 1) {
                                        } else {
                                            boolean exist = productNamelist.contains(
                                                    row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim())
                                                    ? true
                                                    : false;
                                            if (variationNoList == null) {
                                                variationNoList = new ArrayList<>();
                                            }
                                            if (exist && row.getCell(Constant.SHEETHAVEVARIENT) != null
                                                    && row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue()
                                                    .trim() != ""
                                                    && row.getCell(Constant.SHEETHAVEVARIENT).toString()
                                                    .equalsIgnoreCase("No")) {
                                                result = false;
                                                checkIssue = true;
                                                reasonBuilder.append("(Product Name Is repeat)-");
                                                rowNumberBuilder.append("(" + i + ",G)-Product Name Is repeat");
                                            } else {
                                                if (!isCellValueBlank(row.getCell(Constant.SHEETHAVEVARIENT))
                                                        && row.getCell(Constant.SHEETHAVEVARIENT).toString()
                                                        .equalsIgnoreCase("Yes")) {
                                                    if (variationNoList.contains(row.getCell(Constant.SHEETPRODUCTNAME)
                                                            .getStringCellValue().trim())) {
                                                        result = false;
                                                        checkIssue = true;
                                                        reasonBuilder.append(
                                                                "(Product Name Is repeat with diffrent variation product)-");
                                                        rowNumberBuilder.append("(" + i
                                                                + ",G)-Product Name Is repeat with diffrent variation product");
                                                    }
                                                }
                                            }
                                            if (!isCellValueBlank(row.getCell(Constant.SHEETHAVEVARIENT))
                                                    && row.getCell(Constant.SHEETHAVEVARIENT).toString()
                                                    .equalsIgnoreCase("No")) {
                                                variationNoList.add(row.getCell(Constant.SHEETPRODUCTNAME)
                                                        .getStringCellValue().trim());

                                            }
                                        }
                                        // if
                                        // (row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim().length()
                                        // > 50) {
                                        // result = false;
                                        // rowNumber += "(" + i + ",G)-The product name must be less than 50
                                        // characters";
                                        // checkIssue=true;
                                        // reason+= "(product name must be less than 50 characters)-";
                                        // }

                                        productNamelist.add(
                                                row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim());

                                        if (row.getCell(Constant.SHEETHAVEVARIENT) != null
                                                && row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue()
                                                .trim() != ""
                                                && row.getCell(Constant.SHEETHAVEVARIENT).toString()
                                                .equalsIgnoreCase("No")) {
                                            // log.warning("HAVEVARIENT------->No");
                                            if (companySettingVo != null && companySettingVo.getValue() == 1) {
                                            } else {
                                                // log.info("before work-------------------->
                                                // "+row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()+"
                                                // "+count+" "+Collections.frequency(productNamelist,
                                                // row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()));
                                                if ((count + Collections.frequency(productNamelist,
                                                        row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue()
                                                                .trim())) > 100) {
                                                    // log.info("work-------------------->
                                                    // "+row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()+"
                                                    // "+productList.size()+" "+Collections.frequency(productNamelist,
                                                    // row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()));
                                                    result = false;
                                                    checkIssue = true;
                                                    reasonBuilder.append("(Only 100 variants allowed in "
                                                            + row.getCell(Constant.SHEETPRODUCTNAME)
                                                            .getStringCellValue().trim()
                                                            + ")-");
                                                    rowNumberBuilder.append("(" + i + ",G)-");
                                                }
                                            }

                                        } else if (row.getCell(Constant.SHEETHAVEVARIENT) != null
                                                && row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue()
                                                .trim() != ""
                                                && row.getCell(Constant.SHEETHAVEVARIENT).toString()
                                                .equalsIgnoreCase("Yes")) {
                                            // log.warning("HAVEVARIENT------->Yes");
                                            // log.info("before work-------------------->
                                            // "+row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()+"
                                            // "+count+" "+Collections.frequency(productNamelist,
                                            // row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()));
                                            if ((count + Collections.frequency(productNamelist,
                                                    row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue()
                                                            .trim())) > 100) {
                                                // log.info("work-------------------->
                                                // "+row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()+"
                                                // "+productList.size()+" "+Collections.frequency(productNamelist,
                                                // row.getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()));
                                                result = false;
                                                checkIssue = true;
                                                reasonBuilder.append("(Only 100 variants allowed in " + row
                                                        .getCell(Constant.SHEETPRODUCTNAME).getStringCellValue().trim()
                                                        + ")-");
                                                rowNumberBuilder.append("(" + i + ",G)-");
                                            }
                                        }

                                    } else {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(Product Name Is not valid)-");
                                        rowNumberBuilder.append("(" + i + ",G)-");
                                    }
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(Product Name must be less than 100 characters)-");
                                    rowNumberBuilder.append("(" + i + ",G)-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Product Name Is Required)-");
                                rowNumberBuilder.append("(" + i + ",G)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(Constant.SHEETPRINTNAME) != null
                                    && row.getCell(Constant.SHEETPRINTNAME).getStringCellValue().trim() != "") {
                                if (row.getCell(Constant.SHEETPRINTNAME).getStringCellValue().trim().length() < 101) {
                                    if (RegexTest.validateName(
                                            row.getCell(Constant.SHEETPRINTNAME).getStringCellValue().trim())) {
                                    } else {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(Print Name Is not valid)-");
                                        rowNumberBuilder.append("(" + i + ",H)-");
                                    }
                                    // if (row.getCell(Constant.SHEETPRINTNAME).getStringCellValue().trim().length()
                                    // > 50) {
                                    // result = false;
                                    // rowNumber += "(" + i + ",G)-The Print name must be less than 50 characters";
                                    // log.info("The Print name must be less than 50 characters");
                                    // checkIssue=true;
                                    // reason+= "(Print name must be less than 50 characters)-";
                                    // }
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(Print Name must be less than 100 characters)-");
                                    rowNumberBuilder.append("(" + i + ",H)-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Print Name Is Required)-");
                                rowNumberBuilder.append("(" + i + ",H)-");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    // ---------------------------------------------------------------------------------

                    try {
                        if (row.getCell(Constant.SHEETMEASURMENTNAME) != null
                                && row.getCell(Constant.SHEETMEASURMENTNAME).getStringCellValue().trim() != "") {

                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Measurement Name Is Required)-");
                            rowNumberBuilder.append("(" + i + ",K)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETMEASURMENTCODE) != null
                                && row.getCell(Constant.SHEETMEASURMENTCODE).getStringCellValue().trim() != "") {
                            unitOfMeasurementVo = unitOfMeasurementService.FindByMeasurementCodeAndCompnayId(
                                    securityValidation.checkAndReplaceCsvInjectionCharacters(
                                            row.getCell(Constant.SHEETMEASURMENTCODE).getStringCellValue().trim()),
                                    Long.parseLong(session.getAttribute("companyId").toString()));
                            if (unitOfMeasurementVo != null) {
                                allowedDecimalAsPerUMO = unitOfMeasurementVo.getNoOfDecimalPlaces();
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Measurement Code Is Required)-");
                            rowNumberBuilder.append("(" + i + ",L)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETHSNCODE) != null
                                && row.getCell(Constant.SHEETHSNCODE).getStringCellValue().trim() != "") {

                            if (RegexTest
                                    .validateHSNCODE(row.getCell(Constant.SHEETHSNCODE).getStringCellValue().trim())) {
                                if (row.getCell(Constant.SHEETHSNCODE).getStringCellValue().trim().length() > 8 || row
                                        .getCell(Constant.SHEETHSNCODE).getStringCellValue().trim().length() < 4) {

                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(HSN Code must be of 4-8 Digits )-");
                                    rowNumberBuilder.append("(" + i + ",M)-");
                                } else {

                                }
                            } else {

                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(HSN Code must be of 4-8 Digits only)-");
                                rowNumberBuilder.append("(" + i + ",M)-");
                            }

                        } else {

                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETSALESTAXNAME) != null
                                && row.getCell(Constant.SHEETSALESTAXNAME).getStringCellValue().trim() != "") {

                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Sales Tax Name Is Required)-");
                            rowNumberBuilder.append("(" + i + ",N)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETSALESTAXRATE) != null
                                && row.getCell(Constant.SHEETSALESTAXRATE).getStringCellValue().trim() != "") {
                            if (RegexTest.validateDouble(
                                    row.getCell(Constant.SHEETSALESTAXRATE).getStringCellValue().trim(),
                                    decimalNumber)) {
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Sales Tax Rate not valid)-");
                                rowNumberBuilder.append("(" + i + ",O)-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Sales Tax Rate Is Required)-");
                            rowNumberBuilder.append("(" + i + ",O)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETPURCHASETAXNAME) != null
                                && row.getCell(Constant.SHEETPURCHASETAXNAME).getStringCellValue().trim() != "") {

                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Purchase Tax Name Is Required)-");
                            rowNumberBuilder.append("(" + i + ",P)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETPURCHASETAXRATE) != null
                                && row.getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim() != "") {
                            if (RegexTest.validateDouble(
                                    row.getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim(),
                                    decimalNumber)) {
                                try {
                                    purchasetaxRate = Double.parseDouble(
                                            row.getCell(Constant.SHEETPURCHASETAXRATE).getStringCellValue().trim());
                                } catch (NumberFormatException e) {
                                    purchasetaxRate = 0;
                                    e.printStackTrace();
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Purchase Tax Rate not valid)-");
                                rowNumberBuilder.append("(" + i + ",Q)-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Purchase Tax Rate Is Required)-");
                            rowNumberBuilder.append("(" + i + ",Q)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETSALESTAXINCLUDING) != null
                                && row.getCell(Constant.SHEETSALESTAXINCLUDING).getStringCellValue().trim() != "") {
                            if (row.getCell(Constant.SHEETSALESTAXINCLUDING).toString().equalsIgnoreCase("Yes")
                                    || row.getCell(Constant.SHEETSALESTAXINCLUDING).toString().equalsIgnoreCase("No")) {

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Sales Tax Including Is not valid)-");
                                rowNumberBuilder.append("(" + i + ",R)-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Sales Tax Including Is Required)-");
                            rowNumberBuilder.append("(" + i + ",R)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        if (row.getCell(Constant.SHEETPURCHASETAXINCLUDING) != null
                                && row.getCell(Constant.SHEETPURCHASETAXINCLUDING).getStringCellValue().trim() != "") {
                            if (row.getCell(Constant.SHEETPURCHASETAXINCLUDING).toString().equalsIgnoreCase("Yes")
                                    || row.getCell(Constant.SHEETPURCHASETAXINCLUDING).toString()
                                    .equalsIgnoreCase("No")) {
                                try {
                                    if (row.getCell(Constant.SHEETPURCHASETAXINCLUDING).toString()
                                            .equalsIgnoreCase("Yes")) {
                                        purchasetaxincluding = 1;
                                    } else {
                                        purchasetaxincluding = 0;
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Purchase Tax Including Is not valid)-");
                                rowNumberBuilder.append("(" + i + ",S)-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Purchase Tax Including Is Required)-");
                            rowNumberBuilder.append("(" + i + ",S)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    try {
//                        if (row.getCell(Constant.SHEETDESIGNNO) != null && row.getCell(Constant.SHEETDESIGNNO).getStringCellValue().trim() != "") {
//                            if (row.getCell(Constant.SHEETDESIGNNO).toString().equalsIgnoreCase("Yes")
//                                    || row.getCell(Constant.SHEETDESIGNNO).toString().equalsIgnoreCase("No")) {
//
//                            } else {
//                                result = false;
//                                rowNumber += "(" + i + ",S)-";
//                                checkIssue=true;
//                            	reason+= "(Design no Tax Including Is not valid)-";
//                            }
//                        } else {
//                            result = false;
//                            rowNumber += "(" + i + ",S)-";
//                            checkIssue=true;
//                        	reason+= "(Design no Tax Including Is required)-";
//                        }
//
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }

                    try {
                        if (row.getCell(Constant.SHEETHAVEVARIENT) != null
                                && row.getCell(Constant.SHEETHAVEVARIENT).getStringCellValue().trim() != "") {
                            if (row.getCell(Constant.SHEETHAVEVARIENT).toString().equalsIgnoreCase("Yes")
                                    || row.getCell(Constant.SHEETHAVEVARIENT).toString().equalsIgnoreCase("No")) {

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Have Variant Is not valid)-");
                                rowNumberBuilder.append("(" + i + ",T)-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Have Variant Is required)-");
                            rowNumberBuilder.append("(" + i + ",T)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETHAVEVARIENT).toString().equalsIgnoreCase("Yes"))
                            if (row.getCell(Constant.SHEETVARIENTNAME) != null
                                    && row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim() != "") {

                                if (row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim().length() <= 62) {
                                    log.warning("HERE VarientName validation checking");
                                    if (RegexTest.validateVarientName(
                                            row.getCell(Constant.SHEETVARIENTNAME).getStringCellValue().trim())) {
                                        log.warning("HERE VarientName validation checking---------->VALID");
                                    } else {
                                        log.warning("HERE VarientName validation checking---------->IN-VALID");
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append(
                                                "(The varient name can only consist of alphabetical, number,back slash and underscore)-");
                                        rowNumberBuilder.append("(" + i + ",U)-");
                                    }
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(varient Name must be less or equal to 62 characters)-");
                                    rowNumberBuilder.append("(" + i + ",U)-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Varient name Is required)-");
                                rowNumberBuilder.append("(" + i + ",U)-");
                            }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETMRP) != null
                                && row.getCell(Constant.SHEETMRP).getStringCellValue().trim() != "") {
                            // log.info("MRP->>>>>>>>>>>>>>>>>>>>>>>>"+row.getCell(Constant.SHEETMRP).getStringCellValue().trim());
                            // log.info(("")+RegexTest.validateDouble(row.getCell(Constant.SHEETMRP).getStringCellValue().trim(),decimalNumber));

                            if (RegexTest.validateDouble(row.getCell(Constant.SHEETMRP).getStringCellValue().trim(),
                                    decimalNumber)) {
                                mrp = Double.parseDouble(row.getCell(Constant.SHEETMRP).getStringCellValue().trim());
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(MRP Is  Invalid)-");
                                rowNumberBuilder.append("(" + i + ",V)-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(MRP Is Required)-");
                            rowNumberBuilder.append("(" + i + ",V)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        if (row.getCell(Constant.SHEETPURCHASEPRICE) != null
                                && row.getCell(Constant.SHEETPURCHASEPRICE).getStringCellValue().trim() != "") {
                            if (RegexTest.validateDouble(
                                    row.getCell(Constant.SHEETPURCHASEPRICE).getStringCellValue().trim(),
                                    decimalNumber)) {
                                purchaseprice = Double.parseDouble(
                                        row.getCell(Constant.SHEETPURCHASEPRICE).getStringCellValue().trim());
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Purchase Price Is  Invalid)-");
                                rowNumberBuilder.append("(" + i + ",W)-");
                                // log.info("Purchase Price Is Invalid 111->>"+i);
                                // log.info("pricesss->>"+row.getCell(Constant.SHEETPURCHASEPRICE).getNumericCellValue());
                                // log.info("decimalNumber->>>"+decimalNumber);

                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Purchase Price Is Required)-");
                            rowNumberBuilder.append("(" + i + ",W)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETDISCOUNTYTPE) != null
                                && row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue().trim() != "") {
                            if ("percentage".equalsIgnoreCase(
                                    row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue().trim())
                                    || "amount".equalsIgnoreCase(
                                    row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue().trim())) {
                                discounttype = row.getCell(Constant.SHEETDISCOUNTYTPE).getStringCellValue().trim();
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Discount Type Is not valid)-");
                                rowNumberBuilder.append("(" + i + ",X)-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Discount Type Is Required)-");
                            rowNumberBuilder.append("(" + i + ",X)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETDISCOUNT) != null
                                && row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim() != "") {
                            if (RegexTest.validateDouble(
                                    row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim(), decimalNumber)) {
                                try {
                                    discount = Double.parseDouble(
                                            row.getCell(Constant.SHEETDISCOUNT).getStringCellValue().trim());
                                } catch (Exception e) {
                                    // TODO: handle exception
                                    discount = 0;
                                }

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Discount Is not valid)-");
                                rowNumberBuilder.append("(" + i + ",Y)-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Discount Is Required)-");
                            rowNumberBuilder.append("(" + i + ",Y)-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        if (row.getCell(Constant.SHEETQTY) != null
                                && row.getCell(Constant.SHEETQTY).getStringCellValue().trim() != "") {
                            if (isUmoWiseDecimalRestrictionStopped.getValue() == 0) {
                                if (!productService.validateDigitAfterDecimal(
                                        row.getCell(Constant.SHEETQTY).getStringCellValue().trim(),
                                        allowedDecimalAsPerUMO)) {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(Invalid number of decimal places in qty)-");
                                    rowNumberBuilder.append("(" + i + ",Z)-");
                                }
                            }
//                            if (RegexTest.validateDouble(row.getCell(Constant.SHEETQTY).getStringCellValue().trim(), decimalNumber)) {
//                            } else {
//                                result = false;
//                                checkIssue = true;
//                                reasonBuilder.append("(Qty Is not valid)-");
//                                rowNumberBuilder.append("(" + i + ",Z)-");
//                            }
                        } else { // result=false;
                            // rowNumber+="("+i+",AA)-";
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (row.getCell(Constant.SHEETNETWEIGHT) != null
                                && row.getCell(Constant.SHEETNETWEIGHT).getStringCellValue().trim() != "") {
                            if (RegexTest.validateName(row.getCell(Constant.SHEETNETWEIGHT).getStringCellValue().trim()
                                    .replace("/-", ""))) {
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Net Weight Is not valid)-");
                                rowNumberBuilder.append("(" + i + ",AB)-");
                            }
                        } else { // result=false;
                            // rowNumber+="("+i+",AA)-";
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    if (purchasetaxincluding == 1) {
                        landingCost = purchaseprice;
                        try {
                            purchaseprice = round((purchaseprice / ((purchasetaxRate + 100) / 100)), decimalNumber);
                        } catch (Exception e) {

                        }
                    } else {
                        landingCost = purchaseprice + ((purchaseprice * purchasetaxRate) / 100);
                    }
                    if (mrp >= landingCost && StringUtils.isNotBlank(discounttype)) {
                        // log.info("calll discount:::"+discount+":::"+landingCost);
                        if (discounttype.equalsIgnoreCase("percentage")) {
                            // log.info("mrp:::::::::::::::;"+landingCost+":::::::;"+(mrp-((mrp*discount)/100)));
                            if (landingCost <= (mrp - ((mrp * discount) / 100))) {

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(" + i + ")-(sellingprice is smaller than landingcost)-");
                            }
                        } else {
                            // log.info("mrp:::::::::::::::;"+landingCost+":::::::;"+(mrp-((discount))));
                            if (landingCost <= (mrp - ((discount)))) {

                            } else {
                                log.info("noooooooooo");
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(" + i + ")-(sellingprice is smaller than landingcost)-");
                            }
                        }
                    } else {
                        result = false;
                        checkIssue = true;
                        reasonBuilder.append("(" + i + ")-(Mrp is smaller than landingcost)-");
                    }

                    log.info(memberShip.getValue() + "=======================");
                    if (memberShip.getValue() == 1) {
                        log.info("enter======Value");
                        String retailermargine = "";
                        double retailermarginemembership = 0;
                        try {
                            if (row.getCell(Constant.SHEETMEMBERSHIP) != null
                                    && row.getCell(Constant.SHEETMEMBERSHIP).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(
                                        row.getCell(Constant.SHEETMEMBERSHIP).getStringCellValue().trim(),
                                        decimalNumber)) {
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(MemberShip margin Is  InValid)-");
                                    rowNumberBuilder.append("(" + i + ",AD)-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(MemberShip margin Is Required)-");
                                rowNumberBuilder.append("(" + i + ",AD)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(Constant.SHEETMEMBERSHIPTYPE) != null
                                    && row.getCell(Constant.SHEETMEMBERSHIPTYPE).getStringCellValue().trim() != "") {
                                if ("percentage".equalsIgnoreCase(
                                        row.getCell(Constant.SHEETMEMBERSHIPTYPE).getStringCellValue().trim())
                                        || "amount".equalsIgnoreCase(row.getCell(Constant.SHEETMEMBERSHIPTYPE)
                                        .getStringCellValue().trim())) {
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(Margin Type  Is not valid)-");
                                    rowNumberBuilder.append("(" + i + ",AE)-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Margin Type Is Required)-");
                                rowNumberBuilder.append("(" + i + ",AE)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            if (row.getCell(Constant.SHEETMARGIN) != null
                                    && row.getCell(Constant.SHEETMARGIN).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(
                                        row.getCell(Constant.SHEETMARGIN).getStringCellValue().trim(), decimalNumber)) {
                                    retailermarginemembership = Double
                                            .parseDouble(row.getCell(Constant.SHEETMARGIN).getStringCellValue().trim());
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(Normal Margin Is Invalid)-");
                                    rowNumberBuilder.append("(" + i + ",AF)-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Normal Margin Is Required)-");
                                rowNumberBuilder.append("(" + i + ",AF)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(Constant.SHEETMARGINETYPE) != null
                                    && row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue().trim() != "") {
                                if ("percentage".equalsIgnoreCase(
                                        row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue().trim())
                                        || "amount".equalsIgnoreCase(
                                        row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue().trim())) {
                                    retailermargine = row.getCell(Constant.SHEETMARGINETYPE).getStringCellValue()
                                            .trim();
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(Normal Margin Type  Is not valid)-");
                                    rowNumberBuilder.append("(" + i + ",AG)-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Normal Margin Type Is Required)-");
                                rowNumberBuilder.append("(" + i + ",AG)-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        if (purchasetaxincluding == 1) {
                            landingCost = purchaseprice;
                            try {
                                purchaseprice = round((purchaseprice / ((purchasetaxRate + 100) / 100)), decimalNumber);
                            } catch (Exception e) {

                            }
                        } else {
                            landingCost = purchaseprice + ((purchaseprice * purchasetaxRate) / 100);
                        }
                        if (mrp >= landingCost) {
                            // log.info("calll discount:::"+discount+":::"+landingCost);
                            if (retailermargine.equalsIgnoreCase("percentage")) {

                                if (mrp >= (landingCost + ((landingCost * retailermarginemembership) / 100))) {

                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(" + i + ")-(sellingprice is smaller than Mrp)-");
                                }
                            } else {

                                if (mrp >= (landingCost + ((retailermarginemembership)))) {
                                } else {

                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(" + i + ")-(sellingprice is smaller than Mrp)-");
                                }
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(" + i + ")-(Mrp is smaller than landingcost)-");
                        }
                    }
                    if (productType.getValue() == 1) {

                        try {
                            if (row.getCell(PRODUCTTYPE) != null
                                    && row.getCell(PRODUCTTYPE).getStringCellValue().trim() != "") {
                                try {
                                    if (!Constant.PRODUCT_TYPE_LIST
                                            .contains(row.getCell(PRODUCTTYPE).getStringCellValue().trim())) {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append(
                                                "(Product Type Must be From [Finished,SemiFinished,Packaging,Raw])-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_PRODUCTTYPE + ")-");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Product Type Required)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_PRODUCTTYPE + ")-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    log.info(allPriceShow.getValue() + "==============allPriceShow  value is here");
                    if (allPriceShow.getValue() == 1) {
                        double wholesaleprice = 0;
                        double retailerprice = 0;

                        try {
                            log.info("===========" + row.getCell(WHOLESALEPRICE) + "========"
                                    + row.getCell(Constant.SHEETMRP));
                            if (row.getCell(WHOLESALEPRICE) != null
                                    && row.getCell(WHOLESALEPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(row.getCell(WHOLESALEPRICE).getStringCellValue().trim(),
                                        decimalNumber)) {
                                    wholesaleprice = Double
                                            .parseDouble(row.getCell(RETAILERPRICE).getStringCellValue().trim());
                                    // log.info("wholesaleprice::->>>>>>>>>>>>>"+wholesaleprice);
                                    if (mrp < wholesaleprice) {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(" + i + ")-( Mrp is smaller than Wholesale price)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_WHOLESALEPRICE + ")-");
                                    }
                                    if (landingCost > wholesaleprice) {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder
                                                .append("(" + i + ")-( Wholesale price is smaller than LandingCost )-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_WHOLESALEPRICE + ")-");
                                        // log.info("wholesaleprice::->>>>>>>>>>>>>issueee");
                                    }
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(" + i + ")-(Wholesale price Is InValid)-");
                                    rowNumberBuilder.append("(" + i + "," + CELL_WHOLESALEPRICE + ")-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(" + i + ")-(Wholesale Price Is Required)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_WHOLESALEPRICE + ")-");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            if (row.getCell(RETAILERPRICE) != null
                                    && row.getCell(RETAILERPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(row.getCell(RETAILERPRICE).getStringCellValue().trim(),
                                        decimalNumber)) {
                                    retailerprice = Double
                                            .parseDouble(row.getCell(RETAILERPRICE).getStringCellValue().trim());
                                    if (mrp < retailerprice) {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(" + i + ")-( Mrp is smaller than Retailer price)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_RETAILERPRICE + ")-");
                                    }
                                    if (landingCost > retailerprice) {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder
                                                .append("(" + i + ")-(Retailer price is smaller than landingCost)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_RETAILERPRICE + ")-");
                                    }

                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(" + i + ")-(Retailer price Is  InValid)-");
                                    rowNumberBuilder.append("(" + i + "," + CELL_RETAILERPRICE + ")-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(" + i + ")-(Retailer Price Is Required)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_RETAILERPRICE + ")-");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        try {
                            if (row.getCell(ONLINEPRICE) != null
                                    && row.getCell(ONLINEPRICE).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(row.getCell(ONLINEPRICE).getStringCellValue().trim(),
                                        decimalNumber)) {
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(" + i + ")-(Online price Is InValid)-");
                                    rowNumberBuilder.append("(" + i + "," + CELL_ONLINEPRICE + ")-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(" + i + ")-(Online Price Is Required)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_ONLINEPRICE + ")-");
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    try {
                        if (row.getCell(MINQTY) != null && row.getCell(MINQTY).getStringCellValue().trim() != "") {
                            if (isUmoWiseDecimalRestrictionStopped.getValue() == 0) {
                                if (!productService.validateDigitAfterDecimal(
                                        row.getCell(MINQTY).getStringCellValue().trim(), allowedDecimalAsPerUMO)) {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(Invalid number of decimal places in qty)-");
                                    rowNumberBuilder.append("(" + i + "," + CELL_MINQTY + ")-");
                                }
                            }
//                            if (RegexTest.validateDouble(row.getCell(MINQTY).getStringCellValue().trim(), decimalNumber)) {
//                            } else {
//                                result = false;
//                                checkIssue = true;
//                                reasonBuilder.append("(" + i + ")-(Minimum Qty Is not valid)-");
//                                rowNumberBuilder.append("(" +  + "," + CELL_MINQTY + ")-");
//                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (!isCellValueBlank(row.getCell(CESS))) {
                            if (row.getCell(CESS).toString().equalsIgnoreCase("Yes")
                                    || row.getCell(CESS).toString().equalsIgnoreCase("No")) {

                                if (row.getCell(CESS).toString().equalsIgnoreCase("Yes")) {
                                    try {

                                        if (!isCellValueBlank(row.getCell(CESSRATE))) {
                                            if (RegexTest.validateDouble(
                                                    row.getCell(CESSRATE).getStringCellValue().trim(), decimalNumber)) {
                                            } else {
                                                result = false;
                                                checkIssue = true;
                                                reasonBuilder.append("(" + i + ")-(Cess Rate Is not valid)-");
                                                rowNumberBuilder.append("(" + i + "," + CELL_CESSRATE + ")-");
                                            }
                                        } else {
                                            result = false;
                                            checkIssue = true;
                                            reasonBuilder.append("(Cess Rate Is required)-");
                                            rowNumberBuilder.append("(" + i + "," + CELL_CESSRATE + ")-");
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Cess Is not valid)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_CESS + ")-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Cess Is required)-");
                            rowNumberBuilder.append("(" + i + "," + CELL_CESS + ")-");
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        if (managePoQty.getValue() == 1) {
                            double stockLimit = 0;
                            if (!isCellValueBlank(row.getCell(STOCKLIMIT))) {
                                if (RegexTest.validateDouble(row.getCell(STOCKLIMIT).getStringCellValue().trim(),
                                        decimalNumber)) {
                                    stockLimit = Double
                                            .parseDouble(row.getCell(STOCKLIMIT).getStringCellValue().trim());
                                } else {
                                    result = false;
                                    checkIssue = true;
                                    reasonBuilder.append("(" + i + ")-(Stock Limit Is not valid)-");
                                    rowNumberBuilder.append("(" + i + "," + CELL_STOCKLIMIT + ")-");
                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Stock Limit Is required)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_STOCKLIMIT + ")-");
                            }

                            if (!isCellValueBlank(row.getCell(POQTY))) {
                                if (isUmoWiseDecimalRestrictionStopped.getValue() == 0) {
                                    if (!productService.validateDigitAfterDecimal(
                                            row.getCell(MINQTY).getStringCellValue().trim(), allowedDecimalAsPerUMO)) {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(Invalid number of decimal places in qty)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_MINQTY + ")-");
                                    } else {
                                        if (Double.parseDouble(
                                                row.getCell(POQTY).getStringCellValue().trim()) <= stockLimit) {
                                            result = false;
                                            checkIssue = true;
                                            reasonBuilder.append(
                                                    "(" + i + ")-(The PO Qty Must Be Greater Than Stock Limit)-");
                                            rowNumberBuilder.append("(" + i + "," + CELL_POQTY + ")-");
                                        }
                                    }
                                } else {
                                    if (Double.parseDouble(
                                            row.getCell(POQTY).getStringCellValue().trim()) <= stockLimit) {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder
                                                .append("(" + i + ")-(The PO Qty Must Be Greater Than Stock Limit)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_POQTY + ")-");
                                    }
                                }

//                                if (RegexTest.validateDouble(row.getCell(POQTY).getStringCellValue().trim(), decimalNumber)) {
//                                    if (Double.parseDouble(row.getCell(POQTY).getStringCellValue().trim()) <= stockLimit) {
//                                        result = false;
//                                        checkIssue = true;
//                                        reasonBuilder.append("(" + i + ")-(The PO Qty Must Be Greater Than Stock Limit)-");
//                                        rowNumberBuilder.append("(" + i + "," + CELL_POQTY + ")-");
//                                    }
//                                } else {
//                                    result = false;
//                                    checkIssue = true;
//                                    reasonBuilder.append("(" + i + ")-(PO Qty Is not valid)-");
//                                    rowNumberBuilder.append("(" + i + "," + CELL_POQTY + ")-");
//                                }
                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(PO Qty Is required)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_POQTY + ")-");
                            }

                        } else {

                        }
                        if (!isCellValueBlank(row.getCell(ISBATCHMANGE))) {
                            if (row.getCell(ISBATCHMANGE).toString().equalsIgnoreCase("Yes")
                                    || row.getCell(ISBATCHMANGE).toString().equalsIgnoreCase("No")) {

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(Batch Management is not valid)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_POQTY + ")-");
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            reasonBuilder.append("(Batch Management is required)-");
                            rowNumberBuilder.append("(" + i + "," + CELL_POQTY + ")-");
                        }

                        if (!isCellValueBlank(row.getCell(ISEXPIRY))) {
                            if (row.getCell(ISEXPIRY).toString().equalsIgnoreCase("Yes")
                                    || row.getCell(ISEXPIRY).toString().equalsIgnoreCase("No")) {
                                if (row.getCell(ISEXPIRY).toString().equalsIgnoreCase("Yes")) {
                                    if (!isCellValueBlank(row.getCell(DAYS))) {
                                        if (row.getCell(DAYS).toString().matches("-?\\d+(\\.\\d+)?")) {
                                            if (Integer.parseInt(row.getCell(DAYS).toString()) < 0) {
                                                result = false;
                                                checkIssue = true;
                                                reasonBuilder.append("(EXPIRY DAYS Required Greaterthan zero)-");
                                                rowNumberBuilder.append("(" + i + "," + CELL_DAYS + ")-");
                                            }
                                        } else {
                                            result = false;
                                            checkIssue = true;
                                            reasonBuilder.append("(EXPIRY DAYS Is not valid)-");
                                            rowNumberBuilder.append("(" + i + "," + CELL_DAYS + ")-");
                                        }
                                    } else {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(EXPIRY DAYS Is required)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_DAYS + ")-");
                                    }
                                    if (!isCellValueBlank(row.getCell(CALCULATIONS))) {
                                        if (row.getCell(CALCULATIONS).toString().equalsIgnoreCase("Mfg")
                                                || row.getCell(CALCULATIONS).toString().equalsIgnoreCase("EXP")) {

                                        } else {
                                            result = false;
                                            checkIssue = true;
                                            reasonBuilder.append("(Expiry Date Type Is not valid)-");
                                            rowNumberBuilder.append("(" + i + "," + CELL_CALCULATIONS + ")-");
                                        }
                                    } else {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(Expiry Date Type Is required)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_CALCULATIONS + ")-");
                                    }
                                    if (!isCellValueBlank(row.getCell(ISSELL))) {
                                        if (row.getCell(ISSELL).toString().equalsIgnoreCase("yes")
                                                || row.getCell(ISSELL).toString().equalsIgnoreCase("no")) {

                                        } else {
                                            result = false;
                                            checkIssue = true;
                                            reasonBuilder.append("(saleable details Is not valid)-");
                                            rowNumberBuilder.append("(" + i + "," + CELL_CALCULATIONS + ")-");
                                        }
                                    } else {
                                        result = false;
                                        checkIssue = true;
                                        reasonBuilder.append("(saleable details Type Is required)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_CALCULATIONS + ")-");
                                    }
                                    try {
                                        if (row.getCell(DATE) != null
                                                && row.getCell(DATE).getStringCellValue().trim() != "") {
                                            if (!row.getCell(DATE).getStringCellValue().trim()
                                                    .matches("\\d{2}-\\d{2}-\\d{4}")) {
                                                checkIssue = true;
                                                reasonBuilder.append("(Expiry Date format is invalid)-");
                                                rowNumberBuilder.append("(" + i + "," + CELL_DATE + ")-");
                                                result = false;
                                            }
                                            String value = row.getCell(DATE).getStringCellValue().trim();
                                            log.info(value.substring(0, 2) + "========================");
                                            log.info("Date is Invalide" + value);
                                            Date date1 = new SimpleDateFormat("dd-MM-yyyy").parse(value);
                                            LocalDate currentdate = LocalDate.now();
                                            int currentYear = currentdate.getYear();
                                            if (Integer.parseInt(value.substring(0, 2)) > 31) {

                                                checkIssue = true;
                                                reasonBuilder.append("(Date is not valid)-");
                                                rowNumberBuilder.append("(" + i + "," + CELL_DATE + ")-");
                                                result = false;
                                            }
                                            if (Integer.parseInt(value.substring(3, 5)) > 12) {
                                                checkIssue = true;
                                                reasonBuilder.append("(Date is not valid)-");
                                                rowNumberBuilder.append("(" + i + "," + CELL_DATE + ")-");
                                                result = false;
                                            }
                                            if (currentYear < Integer.parseInt(value.substring(6, value.length()))) {
                                                checkIssue = true;
                                                reasonBuilder.append("(Date is not valid)-");
                                                rowNumberBuilder.append("(" + i + "," + CELL_DATE + ")-");
                                                result = false;
                                            }
                                        } else {
                                            checkIssue = true;
                                            reasonBuilder.append("(Date is required)-");
                                            rowNumberBuilder.append("(" + i + "," + CELL_DATE + ")-");
                                            result = false;
                                        }

                                    } catch (Exception e) {
                                        checkIssue = true;
                                        reasonBuilder.append(
                                                "(please check date formate also check date in excel write as Text)-");
                                        rowNumberBuilder.append("(" + i + "," + CELL_DATE + ")-");
                                        result = false;
                                        e.printStackTrace();
                                    }

                                    System.out.println(row.getCell(CALCULATIONS).toString() + "=====doen====");
                                }

                            } else {
                                result = false;
                                checkIssue = true;
                                reasonBuilder.append("(EXPIRY MANAGEMT Is not valid)-");
                                rowNumberBuilder.append("(" + i + "," + CELL_ISEXPIRY + ")-");
                            }
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    // rowTotal=rowTotal-1;
                    log.info("Row No= " + (row.getRowNum() + 1));
                    if (checkIssue) {
                        wrongSheetDTO.add(new ProductWrongSheetDTO(reasonBuilder.toString(), row.getRowNum(), i));
                    }
                }
                i++;
            }
            rowNumber = rowNumberBuilder.toString();
        }
        workbook.close();
        in.close();
        session.setAttribute("Wrongsheet", wrongSheetDTO);
        log.info("Final Result----------->" + result);
        return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal), wrongSheetDTO.size(),
                "All Data Not Valid", true, filepath);
    }

    @PostMapping("/checkitemcode")
    @ResponseBody
    public String checkItemcode(@RequestParam Map<String, String> allRequestParam,
                                @RequestParam(defaultValue = "0", value = "productVariantId") long productvarintid, HttpSession session) {
        List<ProductVarientsVo> b = new ArrayList<>();
        String itemcode = allRequestParam.get(allRequestParam.keySet().stream().filter(s -> s.endsWith("itemCode"))
                .collect(Collectors.toSet()).iterator().next());

        if (productvarintid == 0) {
            //// System.err.println("-----*******checkitemcode
            //// NEWWW**********------------------" + itemcode);
            b = productService.findByitemCodeIgnoreCaseAndCompanyId(itemcode,
                    Long.parseLong(session.getAttribute("companyId").toString()));
        } else {
            //// System.err.println("-----*******checkitemcode
            //// UPADETEEE**********------------------" + itemcode);
            b = productService.findByitemCodeIgnoreCaseAndCompanyIdAndProductVarientIdNot(itemcode,
                    Long.parseLong(session.getAttribute("companyId").toString()), productvarintid);
        }

        if (b.size() == 0) {
            return "{ \"valid\": true }";
        } else {
            return "{ \"valid\": false }";
        }
    }

    @PostMapping("/top10productforpos")
    @ResponseBody
    public List<Map<String, String>> top10productforpos(HttpSession session,
                                                        @RequestParam Map<String, String> allRequestParams) throws ParseException {
        Date startDate = null, endDate = null;
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        // System.err.println("{}(@){}");
        Calendar calendar = Calendar.getInstance();
        int limit = 10;
        calendar.setTime(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
        // calendar.add(Calendar.YEAR, -1);
        startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());

        calendar.setTime(dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));
        // calendar.add(Calendar.YEAR, -1);
        endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        if (allRequestParams.get("limit") != null && allRequestParams.get("limit") != "") {
            limit = Integer.parseInt(allRequestParams.get("limit").toString());
        }

        return salesService.getBestSellingProduct(Long.parseLong(session.getAttribute("branchId").toString()),
                startDate, endDate, limit);

    }

    @PostMapping("/pos/count/json")
    @ResponseBody
    public long posforprodyuctCountJSON(@RequestParam Map<String, String> allRequestParams, HttpSession session)
            throws ParseException {

        String category = allRequestParams.get("catgory").toString();
        String brand = allRequestParams.get("brand").toString();
        long companyid = Long.parseLong(session.getAttribute("companyId").toString());

        if (category.equals("0") && brand.equals("0")) {
            log.info("no category no brand");
            return productVariantRepository.countByProductVoCompanyIdAndProductVoIsDeleted(companyid, 0);
        } else if (!category.equals("0") && brand.equals("0")) {
            log.info(" category no brand");
            return productVariantRepository.countByProductVoCategoryVoCategoryIdAndCompanyIdAndProductVoIsDeleted(
                    Long.parseLong(category), companyid, 0);
        } else if (category.equals("0") && !brand.equals("0")) {
            log.info("no category  brand");
            return productVariantRepository.countByProductVoBrandVoBrandIdAndCompanyIdAndProductVoIsDeleted(
                    Long.parseLong(brand), companyid, 0);
        } else {
            log.info("category  brand");
            return productVariantRepository
                    .countByProductVoCategoryVoCategoryIdOrProductVoBrandVoBrandIdAndCompanyIdAndProductVoIsDeleted(
                            Long.parseLong(category), Long.parseLong(brand), companyid, 0);
        }

    }

    @PostMapping("/pos/search/json")
    @ResponseBody
    public JSONArray posforprodyuctSearchJSON(@RequestParam Map<String, String> allRequestParams, HttpSession session)
            throws ParseException {
        JSONArray jsonArray = new JSONArray();

        // log.info("--=-=-=-=-"+allRequestParams.get("q").toString());

        List<ProductVarientsVo> productVariantVos = productService.findProductVariantforpos(
                allRequestParams.get("catgory").toString(), allRequestParams.get("brand").toString(),
                Long.parseLong(session.getAttribute("companyId").toString()),
                Integer.parseInt(allRequestParams.get("limit").toString()),
                Integer.parseInt(allRequestParams.get("exclude").toString()));
        Date startDate, endDate;

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
        endDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());

        log.info("Product SIZE::--" + productVariantVos.size());

        productVariantVos.forEach(p -> {

            jsonObject = new JSONObject();
            jsonObject.put("name",
                    p.getProductVo().getName() + (p.getVarientName() == null ? "" : " " + p.getVarientName()));

            try {
                String s = productService.getDefaultImageSrcByProductId(p.getProductVo().getProductId(),
                        FILE_UPLOAD_SERVER);
                jsonObject.put("src", s);
            } catch (Exception e) {
                jsonObject.put("src", "");
            }

            /*
             * jsonObject.put("avl_qty",stockTransactionService.getVariantQty(
             * Long.parseLong(session.getAttribute("branchId").toString()),
             * p.getProductVarientId(), startDate, endDate,
             * session.getAttribute("financialYear").toString()));
             */

            jsonObject.put("product_varient_id", p.getProductVarientId());
            jsonObject.put("retailer_price", p.getRetailerPrice());
            jsonArray.add(jsonObject);

        });

        return jsonArray;
    }

    @GetMapping("/select/json")
    @ResponseBody
    public ProductDTO productMultiSelectJSON(@RequestParam Map<String, String> allRequestParams, HttpSession session) {
        List<ProductSelectItemDTO> productVos = productService.findCustomProductVariantsWithPackageselect(
                allRequestParams.get("q"), Long.parseLong(session.getAttribute("companyId").toString()));

        return new ProductDTO(productVos.size(), true, productVos);

    }

    @GetMapping("/get/json")
    @ResponseBody
    public ProductDTO productNameMultiSelectJSON(@RequestParam Map<String, String> allRequestParams,
                                                 HttpSession session) {
        List<ProductSelectItemDTO> productVos = productService.findCustomProductWithPackageselect(
                allRequestParams.get("q"), Long.parseLong(session.getAttribute("companyId").toString()),
                Long.parseLong(session.getAttribute("merchantTypeId").toString()),
                session.getAttribute("clusterId").toString());

        return new ProductDTO(productVos.size(), true, productVos);

    }

    @PostMapping("/list/bytype/json")
    @ResponseBody
    public String variantByProductTypeSelectJSON(@RequestParam Map<String, String> allRequestParams,
                                                 HttpSession session) throws ParseException {
        JSONArray jsonArray = new JSONArray();
        double qty = 0;
        // log.info("contactId==="+allRequestParams.get("contactId"));
        CompanySettingVo companySettingVo = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWSUPPLIERWISEPRODUCTMAPPING);
        // List<ProductVarientsVo> productVariantVos=new ArrayList();
        List<Map<String, String>> list = new ArrayList<Map<String, String>>();
        long contactId = 0;
        if (companySettingVo.getValue() == 1 && allRequestParams.get("contactId") != null) {
            list = productService.getContactwiseProductNew(Long.parseLong(allRequestParams.get("contactId")),
                    allRequestParams.get("q"), Long.parseLong(session.getAttribute("branchId").toString()));
        } else {
            List<String> productTypes = new ArrayList<>();
            if (StringUtils.equalsIgnoreCase(allRequestParams.get("isRaw"), "1")) {
                productTypes.add(Constant.Raw);
                productTypes.add(Constant.Packaging);
                productTypes.add(Constant.SemiFinished);
            } else {
                productTypes.add(Constant.Finished);
                productTypes.add(Constant.SemiFinished);
            }
            list = productService.findProductVariantsWithPackageNewAndProductType(allRequestParams.get("q"),
                    Long.parseLong(session.getAttribute("companyId").toString()), productTypes);
        }
        log.info("DATTTTTT" + list.size());
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        Date startDate, endDate;

        startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
        endDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());
        int allowNegativeStock = 0;
        allowNegativeStock = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLOWNEGATIVESTOCK).getValue();
        for (int i = 0; i < list.size(); i++) {
            JSONObject json1 = new JSONObject();
            // qty=stockTransactionService.getVariantQty(
            // Long.parseLong(session.getAttribute("branchId").toString()),
            // Long.parseLong(""+list.get(i).get("product_varient_id")), startDate, endDate,
            // session.getAttribute("financialYear").toString());

            try {
                json1.put("id", list.get(i).get("product_varient_id"));
                json1.put("value", list.get(i).get("name") + " "
                        + (list.get(i).get("varient_name") == null ? "" : list.get(i).get("varient_name")));
                json1.put("name", list.get(i).get("name") + " "
                        + (list.get(i).get("varient_name") == null ? "" : list.get(i).get("varient_name")));
                json1.put("mrp", list.get(i).get("mrp").toString());
                json1.put("qty", "-");
                json1.put("other", list.get(i).get("mrp").toString() + "-" + "");
                try {

                    json1.put("allowNegativeStock", allowNegativeStock);
                    // System.err.println("allonegativestock.value in poening stock is
                    // :"+allowNegativeStock);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            jsonArray.add(json1);

        }

        return jsonArray.toString();
    }

    @PostMapping("/list/json")
    @ResponseBody
    public String variantforPOSMultiSelectJSON(@RequestParam Map<String, String> allRequestParams, HttpSession session)
            throws ParseException {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        JSONArray jsonArray = new JSONArray();
        double qty = 0;
        // log.info("contactId==="+allRequestParams.get("contactId"));
        CompanySettingVo companySettingVo = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWSUPPLIERWISEPRODUCTMAPPING);
        // List<ProductVarientsVo> productVariantVos=new ArrayList();
        List<Map<String, String>> list = new ArrayList<Map<String, String>>();
        long contactId = 0;
        if (companySettingVo.getValue() == 1 && allRequestParams.get("contactId") != null) {
            list = productService.getContactwiseProductNew(Long.parseLong(allRequestParams.get("contactId")),
                    allRequestParams.get("q"), Long.parseLong(session.getAttribute("branchId").toString()));
        } else {
            list = productService.findProductVariantsWithPackageNew(allRequestParams.get("q"),
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
        }
        log.info("DATTTTTT" + list.size());
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        Date startDate, endDate;

        startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
        endDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());
        int allowNegativeStock = 0;
        allowNegativeStock = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.ALLOWNEGATIVESTOCK).getValue();
        for (int i = 0; i < list.size(); i++) {
            JSONObject json1 = new JSONObject();
            // qty=stockTransactionService.getVariantQty(
            // Long.parseLong(session.getAttribute("branchId").toString()),
            // Long.parseLong(""+list.get(i).get("product_varient_id")), startDate, endDate,
            // session.getAttribute("financialYear").toString());

            try {
                json1.put("id", list.get(i).get("product_varient_id"));
                json1.put("value", list.get(i).get("name") + " "
                        + (list.get(i).get("varient_name") == null ? "" : list.get(i).get("varient_name")));
                json1.put("name", list.get(i).get("name") + " "
                        + (list.get(i).get("varient_name") == null ? "" : list.get(i).get("varient_name")));
                json1.put("mrp", list.get(i).get("mrp").toString());
                json1.put("qty", "-");
                json1.put("other", list.get(i).get("mrp").toString() + "-" + "");
                try {

                    json1.put("allowNegativeStock", allowNegativeStock);
                    // System.err.println("allonegativestock.value in poening stock is
                    // :"+allowNegativeStock);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            jsonArray.add(json1);

        }

        return jsonArray.toString();
    }

    @PostMapping("/purchase/prices/json")
    @ResponseBody
    public String varientPriceSelectJSON(@RequestParam("productVarientId") long productVarientId, HttpSession session)
            throws ParseException {
        JSONArray jsonArray = new JSONArray();
        double qty = 0;
        List<StockMasterVo> stockMasterVos = stockMasterRepository
                .findByProductVarientsVoProductVarientIdAndBranchIdAndYearInterval(productVarientId,
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        session.getAttribute("financialYear").toString());

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        Date startDate, endDate;

        stockMasterVos.forEach(stockmasterVo -> {
            JSONObject json1 = new JSONObject();

            try {
                json1.put("id", stockmasterVo.getStockId());
                json1.put("batchNo", stockmasterVo.getBatchNo());
                json1.put("qty", stockmasterVo.getQuantity());
                int index = ("B" + stockmasterVo.getProductVarientsVo().getProductVarientId()).length();
                json1.put("purchasePrice", stockmasterVo.getPurchasePrice());
                json1.put("landingCost", stockmasterVo.getLandingCost());
                json1.put("mrp", stockmasterVo.getMrp());
            } catch (Exception e) {

            }
            jsonArray.add(json1);
        });

        // log.info("---------------" + jsonArray.toString());
        return jsonArray.toString();
    }

    @PostMapping("/articlecode/json")
    @ResponseBody
    public JSONArray articalJSON(@RequestParam("brand") String brandId, @RequestParam("category") String categoryId,
                                 @RequestParam(defaultValue = "", value = "variation") String variant, HttpSession session) {
        JSONArray jsonArray = new JSONArray();
        List<ProductVo> productVos = new ArrayList<>();
        try {
            if (StringUtils.isNotEmpty(brandId) && StringUtils.isNotEmpty(categoryId)) {
                if (variant.equals("")) {
                    log.info("7777777777777777777777777777777");
                    productVos = productService.findByCategoryVoCategoryIdAndBrandVoBrandIdAndCompanyId(
                            Long.parseLong(categoryId), Long.parseLong(brandId),
                            Long.parseLong(session.getAttribute("companyId").toString()));
                } else {
                    productVos = productService.findByCategoryVoCategoryIdOrBrandVoBrandIdAndCompanyIdStockTransfer(
                            Long.parseLong(categoryId), Long.parseLong(brandId),
                            Long.parseLong(session.getAttribute("companyId").toString()), variant.toString());
                }

                productVos.forEach(p -> {
                    JSONObject json1 = new JSONObject();
                    try {
                        json1.put("id", p.getProductId());
                        json1.put("value", p.getName());
                    } catch (Exception e) {

                    }
                    jsonArray.add(json1);
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return jsonArray;
    }

    @PostMapping("/articlecode/json/variant")
    @ResponseBody
    public JSONArray articalJSON2(@RequestParam("brand") String brandId, @RequestParam("category") String categoryId,
                                  @RequestParam("variant") String variant, HttpSession session) {
        jsonArray2 = new JSONArray();

        List<ProductVo> productVos = productService.findByCategoryVoCategoryIdOrBrandVoBrandIdAndCompanyIdStockTransfer(
                Long.parseLong(categoryId), Long.parseLong(brandId),
                Long.parseLong(session.getAttribute("companyId").toString()), variant.toString());
        log.info("yehhhhhhhhhhhhhhhhhhhhhh");

        productVos.forEach(p -> {
            JSONObject json1 = new JSONObject();
            try {
                json1.put("id", p.getProductId());
                json1.put("value", p.getName());
            } catch (Exception e) {

            }
            jsonArray2.add(json1);
        });

        return jsonArray2;
    }

    @RequestMapping("/{id}/stocktransaction/datatable")
    @ResponseBody
    public DataTablesOutput<StockTransactionVo> stocktransaction(@PathVariable("id") long id, HttpSession session,
                                                                 @Valid DataTablesInput input, @RequestParam Map<String, String> allRequestParams)
            throws NumberFormatException, JsonProcessingException {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        String financialYear = session.getAttribute("financialYear").toString();

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        Specification<StockTransactionVo> specification = new Specification<StockTransactionVo>() {

            @Override
            public Predicate toPredicate(Root<StockTransactionVo> root, CriteriaQuery<?> query,
                                         CriteriaBuilder criteriaBuilder) {
                List<Predicate> predicates = new ArrayList<Predicate>();

                predicates.add(criteriaBuilder.equal(root.get("yearInterval"),
                        session.getAttribute("financialYear").toString()));
                predicates.add(criteriaBuilder.equal(root.get("branchId"), branchId));
                predicates.add(
                        criteriaBuilder.equal(root.get("productVarientsVo").get("productVo").get("productId"), id));
                query.orderBy(criteriaBuilder.asc(root.get("stockTransactionId")),
                        criteriaBuilder.asc(root.get("stockTransactionDate")));

                try {
                    predicates.add(criteriaBuilder.between(root.get("stockTransactionDate"),
                            dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()),
                            dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString())));
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
            }
        };
        DataTablesOutput<StockTransactionVo> a = stockTransactionService.findAll(input, null, specification);
        List<StockTransactionVo> stockTransactionVos = a.getData().stream().collect(Collectors.toList());
        Double openingQty = 0.0;
        // Set First Opening Balance on each page of datatable\
        if (input.getStart() != 0) {
            log.info("******************************************** starting from : " + input.getStart());
            openingQty = stockTransactionService.getOpeningQtyByProductIdAndYearIntervalAndBranchId(id, financialYear,
                    branchId, input.getStart());
        }

        for (StockTransactionVo stockTransactionVo : stockTransactionVos) {
            stockTransactionVo.setClosingStock(
                    openingQty + (stockTransactionVo.getInQuantity() - stockTransactionVo.getOutQuantity()));
            openingQty += stockTransactionVo.getInQuantity() - stockTransactionVo.getOutQuantity();
        }

        a.getData().forEach(x -> {
            if (x.getType().equalsIgnoreCase("sales")) {
                String type = salesService.findTypeByTypeId(x.getTypeId());
                x.setTypeTemp(type);
            } else if (x.getType().equalsIgnoreCase("purchase")) {
                String type = purchaseService.findTypeByTypeId(x.getTypeId());
                x.setTypeTemp(type);
            } else {
                x.setTypeTemp(x.getType());
            }
        });

        a.getData().forEach(x -> {
            if (StringUtils.isNotBlank(x.getDescription())) {
                if (x.getType().equalsIgnoreCase("stock_transfer")) {
                    try {
                        StockTransferVo stockTransferVo = stockTransferService
                                .findByStockTransferIdAndIsDeleted(x.getTypeId(), 0);
                        x.setCreatedByName(profileService.getName(stockTransferVo.getCreatedBy()));
                        x.setStockTransferBranchName(profileService.getName(stockTransferVo.getToBranchId()));
                    } catch (Exception e) {

                        x.setCreatedByName("-");
                        e.printStackTrace();
                    }

                } else if (x.getType().equalsIgnoreCase(Constant.PURCHASE_DEBIT_NOTE)) {

                    try {
                        x.setCreatedByName(purchaseService.getContactNameByPurchaseId(x.getTypeId()));
                    } catch (Exception e) {

                        x.setCreatedByName("-");
                        e.printStackTrace();
                    }

                } else if (x.getType().equalsIgnoreCase("sales_return")) {
                    try {
                        x.setCreatedByName(salesService.getContactNameBySalesid(x.getTypeId()));
                    } catch (Exception e) {

                        x.setCreatedByName("-");
                        e.printStackTrace();
                    }
                } else if (x.getType().equalsIgnoreCase("sales")) {
                    try {
                        x.setOnlineOrder(salesService.getIsOnlineOrderBySalesid(x.getTypeId()));
                        try {
                            x.setCreatedByName(profileService.getName(x.getCreatedBy()));
                        } catch (Exception e) {
                            x.setCreatedByName("-");
                            e.printStackTrace();
                        }
                    } catch (Exception e) {

                        x.setOnlineOrder(0);
                        e.printStackTrace();
                    }
                } else {
                    x.setCreatedByName(profileService.getName(x.getCreatedBy()));
                }
            } else {
                x.setCreatedByName(profileService.getName(x.getCreatedBy()));
            }
            x.getProductVarientsVo().getProductVo().setProductVarientsVos(null);
            x.getProductVarientsVo().getProductVo().setProductAttributeVos(null);

            ContactVo contactVo;
            if (x.getType().equalsIgnoreCase(Constant.ACCOUNT_SALES)) {
                SalesVo salesVo = salesService.findBySalesId(x.getTypeId());
                if (salesVo != null && salesVo.getContactVo() != null) {
                    salesVo.getContactVo().setContactAddressVos(null);
                    x.setContactVo(salesVo.getContactVo());
                }
            } else if (x.getType().equalsIgnoreCase(Constant.ACCOUNT_PURCHASE)) {
                log.info("------Type Id: " + x.getTypeId() + "------------");
                PurchaseVo purchaseVo = purchaseService.findByPurchaseIdAndBranchId(x.getTypeId(),
                        Long.parseLong(session.getAttribute("branchId").toString()));

                if (purchaseVo != null && purchaseVo.getContactVo() != null) {
                    purchaseVo.getContactVo().setContactAddressVos(null);
                    x.setContactVo(purchaseVo.getContactVo());
                }
            }
        });
        /*
         * a.setRecordsFiltered(a.getRecordsFiltered() + 1);
         * a.setRecordsTotal(a.getRecordsTotal() + 1);
         */
        a.setData(stockTransactionVos);
        return a;

    }

    @PostMapping("/{id}/stocktransactiondesc/datatable")
    @ResponseBody
    public DataTableStockTransactionsResponseDTO stocktransactionList(@PathVariable("id") long id, HttpSession session,
                                                                      @Valid DataTablesInput input, @RequestParam Map<String, String> allRequestParams)
            throws NumberFormatException, JsonProcessingException {

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        String financialYear = session.getAttribute("financialYear").toString();

        Integer totallength = 0;

        totallength = stockTransactionService.countTotalStockTransactionsByProduct(id, branchId, financialYear);

        int start = 0;
        if (allRequestParams.get("start") == null) {
            start = 0;
        } else {
            start = Integer.parseInt(allRequestParams.get("start"));
        }

        String pageLength = "";
        if (StringUtils.isNotBlank(allRequestParams.get("length"))) {
            pageLength = allRequestParams.get("length");
        } else {
            pageLength = "10";
        }

        int length = 0, page = 0, offsetDisplay = 0, draw = 1;
        try {
            if (allRequestParams.get("draw") != null && !allRequestParams.get("draw").equals("")) {
                draw = 1;
            } else {
                draw = Integer.parseInt(allRequestParams.get("draw").toString());
            }
        } catch (Exception e) {
        }

        if (!pageLength.equals("-1")) {
            if (allRequestParams.get("length") == null || allRequestParams.get("length").equals("")) {
                length = 10;
            } else {
                length = Integer.parseInt(allRequestParams.get("length"));
            }

            page = start / length; // Calculate page number
            offsetDisplay = page * length;
        } else {
            length = totallength;
            offsetDisplay = 0;
        }

        List<DataTablesStockTransactionsOutput> list = stockTransactionService.findByStockTransactionsOutput(id, length,
                offsetDisplay, branchId, financialYear);

        List<StockTransactionsRecords> stockTransactionsRecords = new ArrayList<StockTransactionsRecords>();

        double closingCalculation = 0;

        for (int i = 0; i < list.size(); i++) {

            StockTransactionsRecords record = new StockTransactionsRecords();
            record.setStockTransactionId(list.get(i).getStockTransactionId());
            record.setName(list.get(i).getName());
            record.setDate(list.get(i).getDate());
            record.setVoucherType(list.get(i).getVoucherType());
            record.setTypeTemp(list.get(i).getTypeTemp());
            record.setTypeId(list.get(i).getTypeId());
            record.setInvoiceNo(list.get(i).getInvoiceNo());
            record.setPrice(list.get(i).getPrice());
            record.setInQty(list.get(i).getInQty());
            record.setOutQty(list.get(i).getOutQty());
            record.setCreatedBy(list.get(i).getCreatedBy());
            record.setCreatedOn(list.get(i).getCreatedOn());
            record.setOpening(list.get(i).getOpening());
            // record.setClosing((closingCalculation));
            stockTransactionsRecords.add(record);
        }

        for (int j = stockTransactionsRecords.size() - 1; j >= 0; j--) {
            double opening = 0;
            if (j == stockTransactionsRecords.size() - 1) {
                opening = stockTransactionsRecords.get(j).getOpening();
            }
            closingCalculation += opening
                    + (stockTransactionsRecords.get(j).getInQty() - stockTransactionsRecords.get(j).getOutQty());

            stockTransactionsRecords.get(j).setClosing(closingCalculation);
        }

        double totalRecords = totallength;

        DataTableStockTransactionsResponseDTO dto = new DataTableStockTransactionsResponseDTO();

        dto.setData(stockTransactionsRecords);
        dto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
        dto.setError(null);
        dto.setRecordsFiltered((int) totalRecords);
        dto.setRecordsTotal((int) totalRecords);
        dto.setDataTableMetaDTO(
                new DataTableMetaDTO(page, (int) Math.ceil((totalRecords) / length), (int) length, (int) totalRecords));

        return dto;
    }

    @RequestMapping("/{id}/stocktransaction/innerhouse/datatable")
    @ResponseBody
    public DataTablesOutput<StockTransactionInnerHouseVo> stocktransactionInnerHouse(@PathVariable("id") long id,
                                                                                     HttpSession session, @Valid DataTablesInput input, @RequestParam Map<String, String> allRequestParams)
            throws NumberFormatException, JsonProcessingException {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        String financialYear = session.getAttribute("financialYear").toString();

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        Specification<StockTransactionInnerHouseVo> specification = new Specification<StockTransactionInnerHouseVo>() {

            @Override
            public Predicate toPredicate(Root<StockTransactionInnerHouseVo> root, CriteriaQuery<?> query,
                                         CriteriaBuilder criteriaBuilder) {
                List<Predicate> predicates = new ArrayList<Predicate>();

                predicates.add(criteriaBuilder.equal(root.get("yearInterval"),
                        session.getAttribute("financialYear").toString()));
                predicates.add(criteriaBuilder.equal(root.get("branchId"), branchId));
                predicates.add(
                        criteriaBuilder.equal(root.get("productVarientsVo").get("productVo").get("productId"), id));
                query.orderBy(criteriaBuilder.asc(root.get("stockTransactionInnerHouseId")),
                        criteriaBuilder.asc(root.get("stockTransactionDate")));

                try {
                    predicates.add(criteriaBuilder.between(root.get("stockTransactionDate"),
                            dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()),
                            dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString())));
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
            }
        };
        DataTablesOutput<StockTransactionInnerHouseVo> a = stockTransactionService.findAllInnerHouse(input, null,
                specification);
        List<StockTransactionInnerHouseVo> stockTransactionVos = a.getData().stream().collect(Collectors.toList());
        Double openingQty = 0.0;
        // Set First Opening Balance on each page of datatable\
        if (input.getStart() != 0) {
            log.info("******************************************** starting from : " + input.getStart());
            String opening_qty = stockTransactionInnerHouseRepository
                    .getINNERHOUSEOpeningQtyByProductIdAndYearIntervalAndBranchId(id, financialYear, branchId,
                            input.getStart());
            if (StringUtils.isNotBlank(opening_qty)) {
                openingQty = Double.parseDouble(opening_qty);
            }
        }

        for (StockTransactionInnerHouseVo stockTransactionVo : stockTransactionVos) {
            stockTransactionVo.setClosingStock(
                    openingQty + (stockTransactionVo.getInQuantity() - stockTransactionVo.getOutQuantity()));
            openingQty += stockTransactionVo.getInQuantity() - stockTransactionVo.getOutQuantity();
        }

        a.getData().forEach(x -> {
//        	if (StringUtils.isNotBlank(x.getDescription())) {
//
//			} else {
//
//			}
            x.setCreatedByName(profileService.getName(x.getCreatedBy()));
        });
        a.getData().forEach(x -> {
            x.getProductVarientsVo().getProductVo().setProductVarientsVos(null);
            x.getProductVarientsVo().getProductVo().setProductAttributeVos(null);

        });
        a.setData(stockTransactionVos);
        return a;

    }

    @PostMapping("{id}/barcode/{size}")
    public void purchaseBarcode(@PathVariable String size, @PathVariable long id,
                                @RequestParam Map<String, String> allRequestParams, HttpSession session, HttpServletRequest request,
                                HttpServletResponse response) throws ParseException {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<ProductVo> productVos = productService.productDetail(id,
                Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);

        List<String> productVariantids = productVos.get(0).getProductVarientsVos().stream()
                .filter(p -> p.getIsDeleted() == 0).map(p -> String.valueOf(p.getProductVarientId()))
                .collect(Collectors.toList());

        // log.info(productVariantids.toString());
        jasperParameter = new HashMap();
        jasperParameter.put("logoserver", FILE_UPLOAD_SERVER);
        jasperParameter.put("company_id", Long.parseLong(session.getAttribute("companyId").toString()));
        jasperParameter.put("branch_id", Long.parseLong(session.getAttribute("branchId").toString()));
        jasperParameter.put("currency_code", session.getAttribute("currencyCode").toString());
        jasperParameter.put("qty", Long.parseLong(allRequestParams.get("noOfCopy")));

        String ss = CurrentDateTime.getTodayDate();
        jasperParameter.put("pkgdate", ss);

        long blankNo = 0;
        if (StringUtils.isNotBlank(allRequestParams.get("blankNo"))) {
            try {
                blankNo = Long.parseLong(allRequestParams.get("blankNo"));
            } catch (NumberFormatException ne) {
                ne.printStackTrace();
                // log.severe("NumberFormatException parsing error :"+ne.getMessage());
            }
        }

        jasperParameter.put("blank_no", blankNo);
        jasperParameter.put("product_id", productVariantids);
        jasperParameter.put("from_barcode_no", "");
        jasperParameter.put("to_barcode_no", "");
        jasperParameter.put("price_type", allRequestParams.get("contactType"));
        jasperParameter.put("path", JASPER_REPORT_PATH + System.getProperty("file.separator"));

        if (StringUtils.isNotBlank(allRequestParams.get("batchNo"))) {
            jasperParameter.put("batch_no", allRequestParams.get("batchNo"));
            jasperParameter.put("batchNo", allRequestParams.get("batchNo"));

        } else {
            jasperParameter.put("batch_no", "");
            jasperParameter.put("batchNo", "");
        }

        BarcodeMasterVo barcodeMasterVo = barcodeMasterRepository.findBybarcodeSize(size);

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat dateFormatmonth = new SimpleDateFormat("MM/yyyy");

        if (allRequestParams.get("customDate").equals("date")) {
            jasperParameter.put("mfg", dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))));
        } else if (allRequestParams.get("customDate").equals("month")) {
            jasperParameter.put("mfg",
                    dateFormatmonth.format(dateFormat.parse(allRequestParams.get("expirationDays"))));
        } else {
            jasperParameter.put("mfg", dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))));

        }

        String days = productVos.get(0).getExpirationdays();
        if (StringUtils.isNotBlank(days)) {
            jasperParameter.put("expirationDays", days);

            Calendar c = Calendar.getInstance();
            c.setTime(dateFormat.parse(allRequestParams.get("expirationDays")));
            c.add(Calendar.DATE, Integer.parseInt(days));
            if (allRequestParams.get("customDate").equals("date")) {
                jasperParameter.put("exp", dateFormat.format(c.getTime()));
            } else if (allRequestParams.get("customDate").equals("month")) {
                jasperParameter.put("exp", dateFormatmonth.format(c.getTime()));
            } else {
                jasperParameter.put("exp",
                        dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))) + "");
            }

        } else {
            jasperParameter.put("expirationDays", "0");
            if (allRequestParams.get("customDate").equals("date")) {
                jasperParameter.put("exp", dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))));
            } else if (allRequestParams.get("customDate").equals("month")) {
                jasperParameter.put("exp",
                        dateFormatmonth.format(dateFormat.parse(allRequestParams.get("expirationDays"))));
            } else {
                jasperParameter.put("exp",
                        dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))) + "");
            }

        }

        jasperParameter.put("packingDate", dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))));

        if (session.getAttribute("branchId") != null && !session.getAttribute("branchId").toString().equals("2")) {
            jasperParameter.put("realPath", session.getAttribute("realPath").toString());
        }

        try {
            //// System.err.println("path----"+barcodeMasterVo.getBarcodePath());

            if (barcodeMasterVo.getIsspecialCase() == 1) {
                // System.err.println("-------********** special case ********------------");
                List<Long> productVariantids2 = productVos.get(0).getProductVarientsVos().stream()
                        .map(p -> p.getProductVarientId()).collect(Collectors.toList());

                jasperExporter.jasperExporterPDFSpecialCase(jasperParameter,
                        JASPER_REPORT_PATH + System.getProperty("file.separator") + "/product/"
                                + barcodeMasterVo.getBarcodePath(),
                        "barcode_lable", response, productVariantids2,
                        Long.parseLong(allRequestParams.get("noOfCopy")));
            } else if (barcodeMasterVo.getIsgarment() == 1) {
                // System.err.println("-------********** garment ********------------");
                List<String> l = new ArrayList<>();
                for (int i = 0; i < productVariantids.size(); i++) {
                    // System.err.println("i"+i);
                    if (allRequestParams.get("modelqty" + i) != "") {
                        //// System.err.println("varientid---"+Long.parseLong(allRequestParams.get("modelvarientid"+i).toString()));
                        //// System.err.println("qty---"+Double.parseDouble(allRequestParams.get("modelqty"+i).toString()));

                        productService.updatetemqty(Double.parseDouble(allRequestParams.get("modelqty" + i).toString()),
                                Long.parseLong(allRequestParams.get("modelvarientid" + i).toString()));
                        l.add(allRequestParams.get("modelvarientid" + i));

                    }
                }
                jasperParameter.put("product_id", l);

                jasperExporter.jasperExporterPDF(jasperParameter, JASPER_REPORT_PATH
                                // + System.getProperty("file.separator") +
                                // "/product/barcode_50_50_product.jrxml",
                                + System.getProperty("file.separator") + "/product/" + barcodeMasterVo.getBarcodePath(),
                        "barcode", response);
            } else {
                // System.err.println("-------********** Normal case ********------------");

                jasperExporter.jasperExporterPDF(jasperParameter, JASPER_REPORT_PATH
                                // + System.getProperty("file.separator") +
                                // "/product/barcode_50_50_product.jrxml",
                                + System.getProperty("file.separator") + "/product/" + barcodeMasterVo.getBarcodePath(),
                        "barcode", response);
            }

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        /**/

    }

    @PostMapping("/allproduct/offline")
    @ResponseBody
    public List<OfflineDTOProductVo> allproduct(HttpSession session,
                                                @RequestParam(value = "noimg", required = false, defaultValue = "0") String noimg,
                                                @RequestParam(value = "batchrequired", required = false, defaultValue = "0") String batchrequired) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<OfflineDTOProductVo> dto = productService.findAllProduct(
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
        // List<Map<String,String>>
        // dto=productService.findAllProductforpos(Long.parseLong(session.getAttribute("companyId").toString()),
        // 0,merchantTypeId,clusterId);
        if (batchrequired.equals("1")) {
            for (int i = 0; i < dto.size(); i++) {
                try {
                    List<StockMasterDTO> dtos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalForDTO(
                                    dto.get(i).getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString());
                    log.info("here varient id" + dto.get(i).getProductVarientId());
                    log.info("sizeeeee" + dtos.size());
                    dto.get(i).setStockMasterVos(dtos);
                } catch (Exception e) {

                }
            }
        }
        if (noimg.equals("0")) {
            for (int i = 0; i < dto.size(); i++) {
                try {
                    String s = productService.findSrcByProductVarientId(dto.get(i).getProductVarientId());
                    dto.get(i).setSrc(s);
                } catch (Exception e) {
                    dto.get(i).setSrc("");
                }
            }
        }

        return dto;
    }

    @PostMapping("/allproduct/offline/latestbatchshowinpos")
    @ResponseBody
    public List<OfflineDTOProductProjection> allproductlatestbatchshowinpos(HttpSession session,
                                                                            @RequestParam(value = "noimg", required = false, defaultValue = "0") String noimg,
                                                                            @RequestParam(value = "batchrequired", required = false, defaultValue = "0") String batchrequired) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<OfflineDTOProductProjection> dto = productService.findAllProductforpos(
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                Long.parseLong(session.getAttribute("branchId").toString()),
                session.getAttribute("financialYear").toString());

        return dto;
    }

    @RequestMapping(value = {"/deactive"}, method = RequestMethod.POST)
    @ResponseBody
    public String deactiveProduct(@RequestParam("id") Long id, HttpSession session) throws Exception {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT) == 1) {
            int result = productService.countByProductIdAndCompanyIdAndIsDeleted(id,
                    Long.parseLong(session.getAttribute("companyId").toString()), 0);
            if (result > 0) {
                productService.deactiveProductAndVarientsById(id);
                return "Product Deactive Success";
            } else {
                return "Not found!!";
            }
        } else {
            return "/accessdenied";
        }
    }

    @RequestMapping(value = {"/active"}, method = RequestMethod.POST)
    @ResponseBody
    public String activeProduct(@RequestParam("id") Long id, HttpSession session) throws Exception {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.EDIT) == 1) {
            int result = productService.countByProductIdAndCompanyIdAndIsDeleted(id,
                    Long.parseLong(session.getAttribute("companyId").toString()), 0);
            if (result > 0) {
                productService.activeProductAndVarientsById(id);
                return "Product Deactive Success";
            } else {
                return "";
            }
        } else {
            return "/accessdenied";
        }

    }

    @RequestMapping("/sales/barcode/{barcode}/json")
    @ResponseBody
    public List<ProductVarientsVo> getSalesBarcode(@PathVariable String barcode, HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<String> producttypelist = new ArrayList<>();
        producttypelist = productTypeRepository.findListOfData();
        List<ProductVarientsVo> varientsList = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                producttypelist);

        List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();

        if (!varientsList.isEmpty()) {
            varientsList.forEach(pv -> {
                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                if (productVarientsVo != null) {
                    ////// log.info("pv.getSellingPrice()"+productVarientsVo.getSellingPrice());
                    try {
                        productVarientsVo = (ProductVarientsVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                    ////// log.info("productVarientsVo"+productVarientsVo.getSellingPrice());
                }
                if (productVarientsVo == null) {
                    // return null;
                } else {
                    String s = stockMasterRepository.findproductVariantQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                                    productVarientsVo.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString());
                    if (stockMasterVos != null) {
                        productVarientsVo.setStockMasterVos(stockMasterVos);
                    }
                    productVarientsVo.getProductVo().setProductVarientsVos(null);
                    productVarientsVo.getProductVo().setProductAttributeVos(null);
//                    productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//                    productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                    }
                    if (productVarientsVo.getProductVo().getBrandVo() != null) {
                        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    }
                    productVarientsVo.setAvailableQty(s);
                    productVarientsVos.add(productVarientsVo);
                }
            });
        }

        return productVarientsVos;
    }

    @RequestMapping("/stocktransfer/barcode/json")
    @ResponseBody
    public List<ProductVarientsVo> getstocktrnasferBarcode2(@RequestParam("barcode") String barcode,
                                                            @RequestParam(value = "salesType", defaultValue = "", required = false) String salesType,
                                                            HttpSession session) {

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<String> producttypelist = new ArrayList<>();
        producttypelist = productTypeRepository.findListOfData();
        List<ProductVarientsVo> varientsList = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                producttypelist);
        List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();

        if (!varientsList.isEmpty()) {
            varientsList.forEach(pv -> {
                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                if (productVarientsVo != null) {
                    ////// log.info("pv.getSellingPrice()"+productVarientsVo.getSellingPrice());
                    try {
                        productVarientsVo = (ProductVarientsVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                    ////// log.info("productVarientsVo"+productVarientsVo.getSellingPrice());
                }

                if (productVarientsVo == null) {
                    log.info("data empty");
                    // return null;
                } else {
                    log.info("data not empty");
                    String s = stockMasterRepository.findproductVariantQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalWithBatchCheck(
                                    productVarientsVo.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString(),
                                    Long.parseLong(session.getAttribute("companyId").toString()), salesType, 0, 0);
                    if (stockMasterVos != null) {
                        productVarientsVo.setStockMasterVos(stockMasterVos);
                    }
                    productVarientsVo.getProductVo().setProductVarientsVos(null);
                    productVarientsVo.getProductVo().setProductAttributeVos(null);
//    	            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//    	            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                    }
                    if (productVarientsVo.getProductVo().getBrandVo() != null) {
                        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    }
                    productVarientsVo.setAvailableQty(s);
                    productVarientsVos.add(productVarientsVo);
                }
            });
        }
        return productVarientsVos;

    }

    @RequestMapping("/warehouseracktransfer/barcode/json")
    @ResponseBody
    public List<ProductMultiBarcodeVo> getWarehouseRackTransferBarcode(@RequestParam("barcode") String barcode, HttpSession session
            , @RequestParam("warehouseId") Long warehouseId) {

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<ProductMultiBarcodeVo> barcodeList = productService.findBarcodeByItemCodeAndCompanyIdAndIsDeleted(barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
        List<ProductMultiBarcodeVo> productMultiBarcodeVos = new ArrayList<ProductMultiBarcodeVo>();

        if (!barcodeList.isEmpty() && warehouseId != null) {
            barcodeList.forEach(pv -> {

                log.info("data not empty");
                String s = stockMasterRepository.findProductMultiBarcodeQtyByWarehouse(warehouseId,
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        pv.getProductMultiBarcodeId(), session.getAttribute("financialYear").toString());

                System.out.println("===================================");

                Optional<ProductVarientsVo> optionalProductVarientsVo = productService.getProductVarientVoById(pv.getProductVarientId());
                if (optionalProductVarientsVo.isPresent()) {
                    Optional<ProductVo> productVoOptional = productService.getProductVoById(optionalProductVarientsVo.get().getProductVo().getProductId());
                    if (productVoOptional.isPresent())
                        pv.setProductVo(productVoOptional.get());
                        pv.getProductVo().setProductVarientsVos(null);
                }

//                    PurchaseItemVo purchaseItemVo = purchaseItemRepository.findByBranchIdProductVarientIdAndProductMultBarcodeAndContactId(
//                            branchId, productMultiBarcodeVo.getProductVarientId(), productMultiBarcodeVo.getProductMultiBarcodeId(), contactId);
//                    pv.setTaxAmount(pv.getTaxAmount());

                List<StockMasterVo> stockMasterVos = stockMasterService
                        .findByProductMultiBarcodeIdAndWarehouseIdAndCompanyIdAndYearInterval(warehouseId,
                                pv.getProductMultiBarcodeId(),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                Long.parseLong(session.getAttribute("companyId").toString()));
                if (!stockMasterVos.isEmpty()) {
                    pv.setStockMasterVos(stockMasterVos);
                }
                pv.setAvailableQty(s != null ? s : "0");
                productMultiBarcodeVos.add(pv);
            });
        }
        return productMultiBarcodeVos;
    }

    @GetMapping("/rackQty")
    @ResponseBody
    public double getRackQty(@RequestParam("rackId") Long rackId,@RequestParam("warehouseId") Long warehouseId,
                           @RequestParam("varientId") Long varientId, @RequestParam("multiBarcodeId") Long multiBarcodeId, HttpSession session){
        List<StockMasterVo> stockMasterVos = stockMasterService.findByProductVarientAndProductMultiBarcodeAndWarehouseIdAndRackIdAndCompanyIdAndYearInterval(varientId, multiBarcodeId, warehouseId, rackId, Long.parseLong(session.getAttribute("companyId").toString()), session.getAttribute("financialYear").toString());
        if(!stockMasterVos.isEmpty()){
            return stockMasterVos.get(0).getQuantity();
        }
        return 0;
    }


    @PostMapping("/production/barcode/json")
    @ResponseBody
    public List<ProductFinalPlanningDTO> getProductVariantData(
            @RequestParam(name = "productVarientId", defaultValue = "0", required = false) long productVarientId,
            HttpSession session) {
        List<ProductFinalPlanningDTO> productFinalPlanningList = new ArrayList<>();
        if (productVarientId != 0) {
            long branchId = Long.parseLong(session.getAttribute("branchId").toString());
            long companyId = Long.parseLong(session.getAttribute("companyId").toString());
            String yearInterval = session.getAttribute("financialYear").toString();
            productFinalPlanningList = recipeService.findFinishProductDetailsAndRecipeDetailsByProductVarientId(
                    productVarientId, branchId, companyId, yearInterval);
        } else {
            //// log.warning("here productVarientId is 0");
        }
        return productFinalPlanningList;

    }

    @PostMapping("/bymultibarcode/json")
    @ResponseBody
    public List<ProductMultiBarcodeDTO> findProductByMultiBarcode(
            @RequestParam(name = "barcode", defaultValue = "", required = false) String barcode, HttpSession session) {
        List<ProductMultiBarcodeDTO> productMultiBarcodeDTOs = new ArrayList<>();
        if (StringUtils.isNotBlank(barcode)) {
            // long branchId = Long.parseLong(session.getAttribute("branchId").toString());
            long companyId = Long.parseLong(session.getAttribute("companyId").toString());
            // String yearInterval = session.getAttribute("financialYear").toString();
            productMultiBarcodeDTOs = productService.findProductByMultiBarcode(barcode, companyId);
        } else {
            //// log.warning("here productVarientId is 0");
        }
        return productMultiBarcodeDTOs;

    }

    @PostMapping("/recipe/raw/json")
    @ResponseBody
    public List<ProductRawPlanningDTO> getRawProductVariantData(
            @RequestParam(name = "recipeId", defaultValue = "0", required = false) long recipeId, HttpSession session) {
        List<ProductRawPlanningDTO> productRawPlanningList = new ArrayList<>();
        if (recipeId != 0) {
            long branchId = Long.parseLong(session.getAttribute("branchId").toString());
            long companyId = Long.parseLong(session.getAttribute("companyId").toString());
            String yearInterval = session.getAttribute("financialYear").toString();
            List<Long> locationIds = new ArrayList<>();
            locationIds.add(0L);// which is productionHouse
            productRawPlanningList = recipeService.findRawProductDetailsAndRecipeDetailsByRecipeId(recipeId, branchId,
                    companyId, yearInterval, locationIds);
        } else {
            //// log.warning("here recipeId is 0");
        }
        return productRawPlanningList;

    }

    @PostMapping("/salesnew/barcode/json")
    @ResponseBody
    public ProductVarientsVo getProductVarientByProductVarientId(@RequestParam("barcode") String barcode,
                                                                 @RequestParam(value = "salesType", defaultValue = "", required = false) String salesType,
                                                                 HttpSession session) {
        ProductVarientsVo pv = productVariantRepository.findByProductVarientId(Long.parseLong(barcode));
//    	ProductVarientsVo pv = productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
//				Long.parseLong(session.getAttribute("companyId").toString()), 0);
        // ProductVarientsVo productVarientsVo =
        // productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
        // Long.parseLong(session.getAttribute("companyId").toString()), 0);
        if (pv != null) {
            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            try {
                productVarientsVo = (ProductVarientsVo) pv.clone();
            } catch (CloneNotSupportedException e) {
                e.printStackTrace();
            }
            if (productVarientsVo == null) {
                log.info("data empty");
                return null;
            } else {
                log.info("data not empty");
                PurchaseItemVo piv = purchaseItemRepository.findByBranchIdProductVarientId(
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        productVarientsVo.getProductVarientId());
                if (piv != null) {
                    productVarientsVo.setMrp(piv.getMrp());
                    if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                        productVarientsVo.setLastPurchasePrice(piv.getPrice() + (piv.getTaxAmount() / piv.getQty()));
                    } else {
                        productVarientsVo.setLastPurchasePrice(piv.getPrice());
                    }
                }
                String s = stockMasterRepository.findproductVariantQty(
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                if (s == null) {
                    s = "0";
                }
                List<StockMasterVo> stockMasterVos = stockMasterService
                        .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalWithBatchCheck(
                                productVarientsVo.getProductVarientId(),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                session.getAttribute("financialYear").toString(),
                                Long.parseLong(session.getAttribute("companyId").toString()), salesType, 0, 0);

                if (stockMasterVos != null) {
                    productVarientsVo.setStockMasterVos(stockMasterVos);
                }
                productVarientsVo.setMultiItemCode(productVarientsVo.getItemCode());
                productVarientsVo.getProductVo().setProductVarientsVos(null);
                productVarientsVo.getProductVo().setProductAttributeVos(null);
//	            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//	            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                    productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                }
                if (productVarientsVo.getProductVo().getBrandVo() != null) {
                    productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                }
                productVarientsVo.setAvailableQty(s);
                return productVarientsVo;
            }
        } else {
            return null;
        }

    }

    @RequestMapping("/sales/garment/json")
    @ResponseBody
    public List<ProductVarientsVo> getVariantList(@RequestParam("barcode") String barcode, HttpSession session) {
        List<ProductVarientsVo> productVarientsVo = productVariantRepository
                .findByProductVoProductId(Long.parseLong(barcode));

        productVarientsVo.forEach(x -> {
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()), x.getProductVarientId(),
                    session.getAttribute("financialYear").toString());
            if (s == null) {
                s = "0";
            }
            List<StockMasterVo> stockMasterVos = stockMasterService
                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(x.getProductVarientId(),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString());
            if (stockMasterVos != null) {
                x.setStockMasterVos(stockMasterVos);
            }
            x.getProductVo().setProductVarientsVos(null);
            x.getProductVo().setProductAttributeVos(null);
            x.getProductVo().getCategoryVo().setCategoryVo(null);
            x.getProductVo().getBrandVo().setBrandVo(null);
            x.setAvailableQty(s);

        });

        return productVarientsVo;

    }

    @RequestMapping("/sales/barcode/json")
    @ResponseBody
    public ApiResponse getSalesBarcode2(@RequestParam("barcode") String barcode,
                                        @RequestParam(value = "finishproductmapping", defaultValue = "0", required = false) String finishproductmapping,
                                        @RequestParam(value = "salesType", defaultValue = "", required = false) String salesType,
                                        @RequestParam(value = "iscallfromsales", defaultValue = "0", required = false) String iscallfromsales,
                                        HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        List<String> producttypelist = new ArrayList<>();

        if (iscallfromsales.equals("0")) {
            producttypelist = productTypeRepository.findListOfData();
        } else {
            CompanySettingVo producttype = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);

            if (producttype.getValue() == 1) {
                producttypelist.add("Finished");
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLRAWPRODUCTS).getValue() == 0) {
                    producttypelist.add("Raw");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLSEMIFINISHEDPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("SemiFinished");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLPACKAGINGPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("Packaging");
                }
            } else {
                producttypelist = productTypeRepository.findListOfData();
            }
        }

        List<ProductVarientsVo> varientsList = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                producttypelist);

        List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();

        if (!varientsList.isEmpty()) {
            varientsList.forEach(pv -> {
                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                if (productVarientsVo != null) {
                    ////// log.info("pv.getSellingPrice()"+productVarientsVo.getSellingPrice());
                    try {
                        productVarientsVo = (ProductVarientsVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                    ////// log.info("productVarientsVo"+productVarientsVo.getSellingPrice());
                }

                if (productVarientsVo == null) {
                    log.info("data empty");
                    // return null;
                } else {
                    log.info("data not empty");
                    String s = stockMasterRepository.findproductVariantQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalWithBatchCheck(
                                    productVarientsVo.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString(),
                                    Long.parseLong(session.getAttribute("companyId").toString()), salesType, 0, 0);

                    if (stockMasterVos != null) {
                        productVarientsVo.setStockMasterVos(stockMasterVos);
                    }
                    // only for material creation module
                    try {
                        PurchaseItemVo piv = purchaseItemRepository.findByBranchIdProductVarientId(
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                productVarientsVo.getProductVarientId());
                        if (piv != null) {
                            if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                                productVarientsVo
                                        .setLastPurchasePrice(piv.getPrice() + (piv.getTaxAmount() / piv.getQty()));
                            } else {
                                productVarientsVo.setLastPurchasePrice(piv.getPrice());
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    productVarientsVo.getProductVo().setProductVarientsVos(null);
                    productVarientsVo.getProductVo().setProductAttributeVos(null);
//    	            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//    	            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                    }
                    if (productVarientsVo.getProductVo().getBrandVo() != null) {
                        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    }
                    productVarientsVo.setAvailableQty(s);
                    if (finishproductmapping.equals("1")) {
                        productVarientsVo.setMappedProduct(productMappingRepository.getMappedProductWithstock(
                                productVarientsVo.getProductVo().getProductId(),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                session.getAttribute("financialYear").toString()));

                        if (productVarientsVo.getMappedProduct().size() > 0) {
                            List<StockMasterVo> stockMasterVos1 = stockMasterService
                                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                                            productVarientsVo.getProductVarientId(),
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            session.getAttribute("financialYear").toString());
                            if (stockMasterVos1 != null) {
                                productVarientsVo.setStockMasterVos(stockMasterVos1);
                            }
                        }
                    }
                    productVarientsVos.add(productVarientsVo);
                }
            });

            return new ApiResponse(true, "success", productVarientsVos);
        } else {
            List<Map<String, String>> checkproductExist = productService.checkItemcodeExist(barcode,
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
            if (checkproductExist.size() > 0) {
                return new ApiResponse(false, "Please ON Sell " + checkproductExist.get(0).get("product_type")
                        + " Product! switch for search " + checkproductExist.get(0).get("product_type") + " products",
                        null);
            } else {
                if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 0) {
                    return new ApiResponse(false, "You have No Rights To Add Product", null);
                } else {
                    return new ApiResponse(true, "Add new Product", null);
                }
            }
        }

        // return productVarientsVos;
    }

    @RequestMapping("/contact/barcode/json")
    @ResponseBody
    public ApiResponse getSalesCustomerWise(@RequestParam Map<String, String> allRequestParams,
                                            @RequestParam(value = "barcodeisbarcode", defaultValue = "0", required = false) String barcodeisbarcode,
                                            @RequestParam(value = "salesType", defaultValue = "", required = false) String salesType,
                                            @RequestParam(value = "iscallfromsales", defaultValue = "0", required = false) String iscallfromsales,
                                            HttpSession session) {
        CompanySettingVo setting = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWCUSTOMERWISEPRODUCTMAPPING);
        // System.err.println("value"+setting.getValue());
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        String barcode = allRequestParams.get("barcode");
        List<String> producttypelist = new ArrayList<>();

        if (iscallfromsales.equals("0")) {
            producttypelist = productTypeRepository.findListOfData();
        } else {
            CompanySettingVo producttype = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);

            if (producttype.getValue() == 1) {
                producttypelist.add("Finished");
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLRAWPRODUCTS).getValue() == 0) {
                    producttypelist.add("Raw");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLSEMIFINISHEDPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("SemiFinished");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLPACKAGINGPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("Packaging");
                }
            } else {
                producttypelist = productTypeRepository.findListOfData();
            }
        }

        List<ProductVarientsVo> productVariantVos = productService.getContactwiseProduct(
                Long.parseLong(allRequestParams.get("contactId")), allRequestParams.get("barcode"),
                Long.parseLong(session.getAttribute("companyId").toString()), barcodeisbarcode, producttypelist);
        // System.err.println("size----"+productVariantVos.size());
        // System.err.println("type----"+allRequestParams.get("type"));
        if (setting != null && setting.getValue() == 1 && productVariantVos.size() > 0
                && allRequestParams.get("type").equalsIgnoreCase("invoice")) {
            // ProductVarientsVo productVarientsVo =
            // productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
//                    Long.parseLong(session.getAttribute("companyId").toString()), 0);
            if (!productVariantVos.isEmpty()) {
                productVariantVos.forEach(productVariantVo -> {
                    if (productVariantVo == null) {
                        log.info("data empty");
                        // return null;
                    } else {
                        ContactProductVo product = contactProductRepository.findByProductVarientIdAndContactId(
                                productVariantVo.getProductVarientId(),
                                Long.parseLong(allRequestParams.get("contactId")));

                        log.info("data not empty");
                        String s = stockMasterRepository.findproductVariantQty(
                                Long.parseLong(session.getAttribute("companyId").toString()),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                productVariantVo.getProductVarientId(),
                                session.getAttribute("financialYear").toString());
                        if (s == null) {
                            s = "0";
                        }
                        List<StockMasterVo> stockMasterVos = stockMasterService
                                .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalWithBatchCheck(
                                        productVariantVo.getProductVarientId(),
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        session.getAttribute("financialYear").toString(),
                                        Long.parseLong(session.getAttribute("branchId").toString()), salesType, 0, 0);
                        if (stockMasterVos != null) {
                            productVariantVo.setStockMasterVos(stockMasterVos);
                        }
                        productVariantVo.setMultiItemCode(productVariantVo.getItemCode());
                        productVariantVo.getProductVo().setProductVarientsVos(null);
                        productVariantVo.getProductVo().setProductAttributeVos(null);
                        productVariantVo.getProductVo().getCategoryVo().setCategoryVo(null);
                        productVariantVo.getProductVo().getBrandVo().setBrandVo(null);
                        productVariantVo.setAvailableQty(s);
                        if (product != null) {
                            productVariantVo.setMrp(product.getPrice());
                            productVariantVo.setIsCustomerMapping(1);
                        }
                    }
                });

                // here return api response
                return new ApiResponse(true, "success", productVariantVos);
            } else {
                List<Map<String, String>> checkproductExist = productService.checkItemcodeExist(barcode,
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
                if (checkproductExist.size() > 0) {
//            		return new ApiResponse(false,"You cannot add "+checkproductExist.get(0).get("product_type")+" Product!",null);
                    return new ApiResponse(false,
                            "Please ON Sell " + checkproductExist.get(0).get("product_type")
                                    + " Product! switch for search " + checkproductExist.get(0).get("product_type")
                                    + " products",
                            null);
                } else {
                    if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 0) {
                        return new ApiResponse(false, "You have No Rights To Add Product", null);
                    } else {
                        return new ApiResponse(true, "Add new Product", null);
                    }
                }
            }
            // return productVariantVos;
        } else {
            // System.err.println("lllllllll");
            List<ProductVarientsVo> productVarientsVos = new ArrayList<>();
            if (barcodeisbarcode.equals("1")) {
                productVarientsVos = productVariantRepository.findByItemCode(
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        (allRequestParams.get("barcode").trim()), producttypelist);
                if (!productVarientsVos.isEmpty()) {
                    productVarientsVos.forEach(p -> {
                        p.setMultiItemCode(allRequestParams.get("barcode").trim());
                    });
                }
            } else {
                productVarientsVos = productVariantRepository.findByProductVarientIdAndIsDeleted(
                        Long.parseLong(allRequestParams.get("barcode").trim()), producttypelist);
            }
            // ProductVarientsVo productVarientsVo =
            // productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(allRequestParams.get("barcode"),
            // Long.parseLong(session.getAttribute("companyId").toString()), 0);
            if (!productVarientsVos.isEmpty()) {
                productVarientsVos.forEach(productVarientsVo -> {
                    if (productVarientsVo == null) {
                        log.info("data empty");
                        // return null;
                    } else {
                        log.info("data not empty");
                        String s = stockMasterRepository.findproductVariantQty(
                                Long.parseLong(session.getAttribute("companyId").toString()),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                productVarientsVo.getProductVarientId(),
                                session.getAttribute("financialYear").toString());
                        if (s == null) {
                            s = "0";
                        }
                        List<StockMasterVo> stockMasterVos = stockMasterService
                                .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalWithBatchCheck(
                                        productVarientsVo.getProductVarientId(),
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        session.getAttribute("financialYear").toString(),
                                        Long.parseLong(session.getAttribute("companyId").toString()), salesType, 0, 0);
                        if (stockMasterVos != null) {
                            productVarientsVo.setStockMasterVos(stockMasterVos);
                        }
                        productVarientsVo.setMultiItemCode(productVarientsVo.getItemCode());
                        productVarientsVo.getProductVo().setProductVarientsVos(null);
                        productVarientsVo.getProductVo().setProductAttributeVos(null);
                        if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                        }
                        if (productVarientsVo.getProductVo().getBrandVo() != null) {
                            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                        }
                        productVarientsVo.setAvailableQty(s);
                        // return productVarientsVo;
                    }
                });
                return new ApiResponse(true, "success", productVarientsVos);
            } else {
                List<Map<String, String>> checkproductExist = productService.checkItemcodeExist(barcode,
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
                if (checkproductExist.size() > 0) {
//            		return new ApiResponse(false,"You cannot add "+checkproductExist.get(0).get("product_type")+" Product!",null);
                    return new ApiResponse(false,
                            "Please ON Sell " + checkproductExist.get(0).get("product_type")
                                    + " Product! switch for search " + checkproductExist.get(0).get("product_type")
                                    + " products",
                            null);
                } else {
                    if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 0) {
                        return new ApiResponse(false, "You have No Rights To Add Product", null);
                    } else {
                        return new ApiResponse(true, "Add new Product", null);
                    }
                }
            }
            // return productVarientsVos;
        }

    }

    @RequestMapping("/sales/list/json")
    @ResponseBody
    @Transactional(readOnly = true)
    public ProductCUSTOMDTO variantforsalesMultiSelectJSON(@RequestParam Map<String, String> allRequestParams,
                                                           @RequestParam(value = "contactId", defaultValue = "0") long contactId,
                                                           @RequestParam(value = "iscallfromsales", defaultValue = "0", required = false) String iscallfromsales,
                                                           HttpSession session, HttpServletRequest request) throws ParseException {
        String searchValue = "";
        if (StringUtils.isNotBlank(allRequestParams.get("q"))) {
            if (!allRequestParams.get("q").toString().equals("")) {
                searchValue = allRequestParams.get("q").toString();
                searchValue = searchValue.replace(" ", "%");
                // log.warning("searchValue---->"+searchValue);
            }
        }
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        List<String> producttypelist = new ArrayList<>();

        if (iscallfromsales.equals("0")) {
            producttypelist = productTypeRepository.findListOfData();
        } else {
            CompanySettingVo producttype = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);

            if (producttype.getValue() == 1) {
                producttypelist.add("Finished");
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLRAWPRODUCTS).getValue() == 0) {
                    producttypelist.add("Raw");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLSEMIFINISHEDPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("SemiFinished");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLPACKAGINGPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("Packaging");
                }
            } else {
                producttypelist = productTypeRepository.findListOfData();
            }
        }

        String referer = request.getHeader("Referer");
        if (referer != null && referer.contains("/purchase/debitnote/")) {
            try {
                List<ProductCUSTOMSelectItemDTO> productVos = purchaseService.findByPurchaseIdAndBranchIdAndproductName(
                        Long.parseLong(allRequestParams.get("id")), searchValue,
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        session.getAttribute("financialYear").toString());

                return new ProductCUSTOMDTO(productVos.size(), true, productVos);
            } catch (Exception e) {
                e.printStackTrace();
                List<ProductCUSTOMSelectItemDTO> productVos = new ArrayList<>(1);
                return new ProductCUSTOMDTO(productVos.size(), true, productVos);

            }

        } else {

            CompanySettingVo setting = companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    Constant.ALLOWCUSTOMERWISEPRODUCTMAPPING);
            if (setting != null && setting.getValue() == 1 && allRequestParams.get("type") != null
                    && allRequestParams.get("type").equalsIgnoreCase("invoice")) {

                List<ProductCUSTOMSelectItemDTO> productVos = productService.getContactwiseProduct(searchValue,
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        session.getAttribute("financialYear").toString(), producttypelist);

                return new ProductCUSTOMDTO(productVos.size(), true, productVos);

            } else {
                JSONArray jsonArray = new JSONArray();
                jsonObject = new JSONObject();
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                Date startDate, endDate;
                startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
                endDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());

//        List<ProductVarientsVo> productVariantVos1 = productService.findProductVariantsWithPackage(
//                allRequestParams.get("q"), Long.parseLong(session.getAttribute("companyId").toString()));
                List<ProductCUSTOMSelectItemDTO> productVos = new ArrayList<ProductCUSTOMSelectItemDTO>();
                productVos = productService.findProductVariantsWithPackageselect(searchValue,
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId,
                        producttypelist);

//				jsonObject.put("total_count", productVos.size());
//				jsonObject.put("incomplete_results", true);
//				jsonObject.put("items", productVos);
                return new ProductCUSTOMDTO(productVos.size(), true, productVos);
                // return jsonObject.toString();
            }

        }

    }

    @RequestMapping("/sales/garment/list/json")
    @ResponseBody
    public ProductDTOForGarment productsalesMultiSelectJSON(@RequestParam Map<String, String> allRequestParams,
                                                            @RequestParam(value = "contactId", defaultValue = "0") long contactId,
                                                            @RequestParam(value = "iscallfromsales", defaultValue = "0", required = false) String iscallfromsales,
                                                            HttpSession session, HttpServletRequest request) throws ParseException {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        List<String> producttypelist = new ArrayList<>();
        String referer = request.getHeader("Referer");
        if (iscallfromsales.equals("0")) {
            producttypelist = productTypeRepository.findListOfData();
        } else {
            CompanySettingVo producttype = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);

            if (producttype.getValue() == 1) {
                producttypelist.add("Finished");
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLRAWPRODUCTS).getValue() == 0) {
                    producttypelist.add("Raw");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLSEMIFINISHEDPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("SemiFinished");
                }
                if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLPACKAGINGPRODUCTS)
                        .getValue() == 0) {
                    producttypelist.add("Packaging");
                }
            } else {
                producttypelist = productTypeRepository.findListOfData();
            }
        }
        // System.err.println("customer not mapped");
        JSONArray jsonArray = new JSONArray();
        jsonObject = new JSONObject();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date startDate, endDate;
        startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
        endDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());

        List<ProductItemDTO> productVos = new ArrayList<ProductItemDTO>();
        productVos = productService.findProductForGarment(allRequestParams.get("q"),
                Long.parseLong(session.getAttribute("companyId").toString()), producttypelist);

        return new ProductDTOForGarment(productVos.size(), true, productVos);

    }

    @PostMapping("/sales/{productvariantId}/json")
    @ResponseBody
    public ProductVarientsVo viewVariantByproductvariantIdJSON(@PathVariable long productvariantId,
                                                               HttpSession session) {

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        ProductVarientsVo pv = productService.findByProductVarientIdAndCompanyIdAndIsDeleted(productvariantId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
        try {
            productVarientsVo = (ProductVarientsVo) pv.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        if (productVarientsVo == null) {
            return null;
        } else {
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
            if (s == null) {
                s = "0";
            }
            List<StockMasterVo> stockMasterVos = stockMasterService
                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                            productVarientsVo.getProductVarientId(),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString());
            if (stockMasterVos != null) {
                productVarientsVo.setStockMasterVos(stockMasterVos);
            }
            productVarientsVo.getProductVo().setProductVarientsVos(null);
            productVarientsVo.getProductVo().setProductAttributeVos(null);
//            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
            }
            if (productVarientsVo.getProductVo().getBrandVo() != null) {
                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            }
            productVarientsVo.setAvailableQty(s);
            productVarientsVo.setMultiItemCode(productVarientsVo.getItemCode());
            return productVarientsVo;
        }

    }

    @PostMapping("/pos/{productvariantId}/json")
    @ResponseBody
    public ProductVarientsDTO posProductVarientJSON(@PathVariable long productvariantId,
                                                    @RequestParam(value = "finishproductmapping", defaultValue = "0", required = false) String finishproductmapping,
                                                    HttpSession session) {

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        String subclusterId = session.getAttribute("subclusterId").toString();
        ProductVarientsDTO productVarientsVo = productService.findByProductVarientIdAndCompanyId(productvariantId,
                Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);

        if (productVarientsVo == null) {
            return null;
        } else {
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()), productvariantId,
                    session.getAttribute("financialYear").toString());
            if (s == null) {
                s = "0";
            }

            if (Long.parseLong(session.getAttribute("jioType").toString()) == Constant.JIO_TYPE_FJSK
                    && productVarientsVo.getJpmProductTBLId() != 0) {
                if (productVarientsVo.getJioProductType() == Constant.JIO_TYPE_JPM) {
                    Map<String, String> jpmProduct = jpmProductRepository
                            .findByJPMProductTblId(productVarientsVo.getJpmProductTBLId());

                    if (!jpmProduct.isEmpty()) {
                        if (StringUtils.isNotBlank(jpmProduct.get("article_type").toString())
                                && StringUtils.isNotBlank(jpmProduct.get("fc_product_id").toString())) {
                            int limit = 0;
                            List<CustomStockMasterDTO> customStockMasterVos = null;
                            productVarientsVo.setArticleType(jpmProduct.get("article_type").toString());
                            // Get 5 MRP & SP for M & B type product and 1 MRP & SP for C type Product
                            if (jpmProduct.get("article_type").toString().equals("M")
                                    || jpmProduct.get("article_type").toString().equals("B")) {
                                limit = 5;
                                customStockMasterVos = stockMasterService
                                        .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalAndArticleIdAndClusterIdForDTO(
                                                productvariantId,
                                                Long.parseLong(session.getAttribute("branchId").toString()),
                                                session.getAttribute("financialYear").toString(),
                                                jpmProduct.get("fc_product_id").toString(), clusterId, subclusterId,
                                                limit);
                            } else if (jpmProduct.get("article_type").toString().equals("C")) {
                                limit = 1;

                                customStockMasterVos = stockMasterService
                                        .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalAndArticleIdAndClusterIdForDTO(
                                                productvariantId,
                                                Long.parseLong(session.getAttribute("branchId").toString()),
                                                session.getAttribute("financialYear").toString(),
                                                jpmProduct.get("fc_product_id").toString(), clusterId, subclusterId,
                                                limit);
                            }
                            // Marka product
                            if (jpmProduct.get("article_type").toString().equals("B")
                                    || jpmProduct.get("article_type").toString().equals("C")) {

                                List<Map<String, String>> marka_sp_range = new ArrayList<Map<String, String>>();

                                marka_sp_range = jpmService
                                        .getMarkaProductRangeByAtricleId(jpmProduct.get("fc_product_id"), subclusterId);
                                log.info("marka_sp_range by article " + marka_sp_range.toString());
                                if (CollectionUtils.isEmpty(marka_sp_range)) {
                                    marka_sp_range = jpmService.getMarkaProductRangeByCategory(
                                            jpmProduct.get("category_name"), subclusterId);
                                    log.info("marka_sp_range by category " + marka_sp_range.toString());
                                }

                                log.info("marka_sp_range by article/category " + marka_sp_range.toString());
                                productVarientsVo.setMarkaSpRange(marka_sp_range);
                            }

                            if (CollectionUtils.isNotEmpty(customStockMasterVos)) {
                                productVarientsVo.setCustomStockMasterVos(customStockMasterVos);
                            }
                        }
                    }
                }

            } else {
                List<StockMasterDTO> stockMasterVos = stockMasterService
                        .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalForDTO(productvariantId,
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                session.getAttribute("financialYear").toString());

                if (stockMasterVos != null) {
                    productVarientsVo.setStockMasterVos(stockMasterVos);
                }
            }

            if (finishproductmapping.equals("1")) {
                productVarientsVo.setMappedProduct(productMappingRepository.getMappedProductWithstock(
                        productVarientsVo.getProductId(), Long.parseLong(session.getAttribute("branchId").toString()),
                        session.getAttribute("financialYear").toString()));
            }
            productVarientsVo.setQty(s);
            return productVarientsVo;
        }

    }

    @RequestMapping("/pos/getbarcode/json")
    @ResponseBody
    public ApiResponse getPoSBarcode(@RequestParam("barcode") String barcode,
                                     @RequestParam(value = "finishproductmapping", defaultValue = "0", required = false) String finishproductmapping,
                                     HttpSession session) {
        List<ProductVarientsDTO> productVarientsDTOs = new ArrayList<>();
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        String subclusterId = session.getAttribute("subclusterId").toString();
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        Long productMultiBarcodeId = productMultiBarcodeRepository.getProductMultiBarcodeByBarcodeAndIsDeleted(barcode, 0);
        String designNo = productMultiBarcodeRepository.findDesignNoByBarcodeAndIsDeleted(barcode,0);
        RackVo rackVo = rackRepository.findAllRackByBranchIdAndCompanyId(branchId,Long.parseLong(session.getAttribute("companyId").toString()));
        if(productMultiBarcodeId == null) {
            return new ApiResponse(false, "This barcode is not available", null);
        }
      //  long rackId = stockMasterRepository.findRackByProductMultiBarcode(productMultiBarcodeId, Long.parseLong(session.getAttribute("companyId").toString()), Long.parseLong(session.getAttribute("branchId").toString()));
       
        CompanySettingVo producttype = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.PRODUCTTYPE);
        List<String> producttypelist = new ArrayList<>();
        producttypelist.add("Finished");

        if (producttype.getValue() == 1) {
            if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLRAWPRODUCTS).getValue() == 0) {
                producttypelist.add("Raw");
            }
            if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLSEMIFINISHEDPRODUCTS)
                    .getValue() == 0) {
                producttypelist.add("SemiFinished");
            }
            if (companySettingService.findByBranchIdAndType(branchId, Constant.SELLPACKAGINGPRODUCTS).getValue() == 0) {
                producttypelist.add("Packaging");
            }
        } else {
            producttypelist = productTypeRepository.findListOfData();
        }

        List<ProductVarientsCUSTOMDTO> productVarientsVos = productService
                .findCUSTOMByitemCodeIgnoreCaseAndCompanyIdFORDTO(barcode,
                        Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId,
                        producttypelist);

        // List<ProductVarientsDTO>
        // productVarientsVos=productService.findCUSTOMByitemCodeIgnoreCaseAndCompanyIdFORDTO(barcode,Long.parseLong(session.getAttribute("companyId").toString()));
        if (productVarientsVos.isEmpty()) {
            List<Map<String, String>> checkproductExist = productService.checkItemcodeExist(barcode,
                    Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
            if (checkproductExist.size() > 0) {
//        		return new ApiResponse(false,"You cannot add "+checkproductExist.get(0).get("product_type")+" Product!",null);
                return new ApiResponse(false, "Please ON Sell " + checkproductExist.get(0).get("product_type")
                        + " Product! switch for search " + checkproductExist.get(0).get("product_type") + " products",
                        null);
            } else {
                if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 0) {
                    return new ApiResponse(false, "You have No Rights To Add Product", null);
                } else {
                    return new ApiResponse(true, "Add new Product", null);
                }
            }
        } else {
            productVarientsVos.forEach(productVarients -> {
                // ProductVarientsDTO productVarientsVo = productVarientsVos.get(0);
                if (productVarients == null) {
                    log.info("data empty");
                    // return null;
                } else {
                    ProductVarientsDTO productVarientsVo = new ProductVarientsDTO();
                    productVarientsVo.setActive(productVarients.getActive());
                    productVarientsVo.setDiscount(productVarients.getDiscount());
                    productVarientsVo.setDiscountType(productVarients.getDiscountType());
                    productVarientsVo.setMrp(productVarients.getMrp());
                    productVarientsVo.setProductVarientId(productVarients.getProductVarientId());
                    productVarientsVo.setPurchasePrice(productVarients.getPurchasePrice());
                    productVarientsVo.setPurchaseTaxIncluded(productVarients.getPurchaseTaxIncluded());
                    productVarientsVo.setPurchaseTaxrate(productVarients.getPurchaseTaxrate());
                    productVarientsVo.setItemCode(productVarients.getItemCode());
                    productVarientsVo.setProductName(productVarients.getProductName());
                    productVarientsVo.setProductId(productVarients.getProductId());
                    productVarientsVo.setType(productVarients.getType());
                    productVarientsVo.setUomCode(productVarients.getUomCode());
                    productVarientsVo.setJpmProductTBLId(productVarients.getJpmProductTblId());
                    productVarientsVo.setJioProductType(productVarients.getJioProductType());
                    productVarientsVo.setIsExpiryManage(productVarients.getIsExpiryManage());
                    productVarientsVo.setProductMultiBarcodeId(productMultiBarcodeId);
                    productVarientsVo.setRackId(rackVo.getRackId());
                    productVarientsVo.setWarehouseId(rackVo.getWarehouseId());
                    productVarientsVo.setDesignNo(designNo);
                          if (productVarientsVo.getActive() == 0) {
                        log.info("data not empty");
                        long rackId = rackVo.getRackId();
                        long warehouseId = rackVo.getWarehouseId();
                        String s = stockMasterRepository.findproductVariantQtyByProductMultiBarcodeIdAndRackIdAndWarehouseId(
                                Long.parseLong(session.getAttribute("companyId").toString()),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                productVarients.getProductVarientId(),
                                session.getAttribute("financialYear").toString(), productMultiBarcodeId,rackId,warehouseId);
                        if (s == null) {
                            s = "0";
                        }
                        if (Long.parseLong(session.getAttribute("jioType").toString()) == Constant.JIO_TYPE_FJSK
                                && productVarientsVo.getJpmProductTBLId() != 0) {
                            if (productVarientsVo.getJioProductType() == Constant.JIO_TYPE_JPM) {
                                Map<String, String> jpmProduct = jpmProductRepository
                                        .findByJPMProductTblId(productVarientsVo.getJpmProductTBLId());

                                if (!jpmProduct.isEmpty()) {
                                    if (StringUtils.isNotBlank(jpmProduct.get("article_type").toString())
                                            && StringUtils.isNotBlank(jpmProduct.get("fc_product_id").toString())) {
                                        int limit = 0;
                                        List<CustomStockMasterDTO> customStockMasterVos = null;
                                        productVarientsVo.setArticleType(jpmProduct.get("article_type").toString());
                                        if (jpmProduct.get("article_type").toString().equals("M")
                                                || jpmProduct.get("article_type").toString().equals("B")) {
                                            limit = 5;
                                            customStockMasterVos = stockMasterService
                                                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalAndArticleIdAndClusterIdForDTO(
                                                            productVarients.getProductVarientId(),
                                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                                            session.getAttribute("financialYear").toString(),
                                                            jpmProduct.get("fc_product_id").toString(), clusterId,
                                                            subclusterId, limit);
                                        } else if (jpmProduct.get("article_type").toString().equals("C")) {
                                            limit = 1;

                                            customStockMasterVos = stockMasterService
                                                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalAndArticleIdAndClusterIdForDTO(
                                                            productVarients.getProductVarientId(),
                                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                                            session.getAttribute("financialYear").toString(),
                                                            jpmProduct.get("fc_product_id").toString(), clusterId,
                                                            subclusterId, limit);
                                        }

                                        if (CollectionUtils.isNotEmpty(customStockMasterVos)) {
                                            productVarientsVo.setCustomStockMasterVos(customStockMasterVos);
                                        }

                                        // Marka product
                                        if (jpmProduct.get("article_type").toString().equals("B")
                                                || jpmProduct.get("article_type").toString().equals("C")) {

                                            List<Map<String, String>> marka_sp_range = new ArrayList<Map<String, String>>();

                                            marka_sp_range = jpmService.getMarkaProductRangeByAtricleId(
                                                    jpmProduct.get("fc_product_id"), subclusterId);
                                            log.info("marka_sp_range by article " + marka_sp_range.toString());
                                            if (CollectionUtils.isEmpty(marka_sp_range)) {
                                                marka_sp_range = jpmService.getMarkaProductRangeByCategory(
                                                        jpmProduct.get("category_name"), subclusterId);
                                                log.info("marka_sp_range by category " + marka_sp_range.toString());

                                            }

                                            log.info("marka_sp_range by article/category " + marka_sp_range.toString());
                                            productVarientsVo.setMarkaSpRange(marka_sp_range);
                                            System.err.println(
                                                    "marka_sp_range by article/category " + marka_sp_range.toString());
                                        }

                                    }
                                }
                            }

                        } else {
                           // System.err.println("rack_id=" + rackVo.getRackId() + " warehouseId = " + rackVo.getWarehouseId());
                            List<StockMasterDTO> stockMasterVos = stockMasterRepository
                                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalForDTO1(
                                            productVarients.getProductVarientId(),
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            session.getAttribute("financialYear").toString(), productMultiBarcodeId,rackId,warehouseId);

                            if (stockMasterVos != null) {
                                productVarientsVo.setStockMasterVos(stockMasterVos);
                            }
                        }
                        // stockMasterVos.forEach(x->{//System.err.println(x.getProductVarientId()+"--"+x.getBatchNo()+"
                        // -selling"+x.getSellingPrice());});

                        if (finishproductmapping.equals("1")) {
                            productVarientsVo.setMappedProduct(
                                    productMappingRepository.getMappedProductWithstock(productVarientsVo.getProductId(),
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            session.getAttribute("financialYear").toString()));
                        }
                        productVarientsVo.setQty(s);
                    }
                    // return productVarientsVo;
                    productVarientsDTOs.add(productVarientsVo);
                }
            });

            return new ApiResponse(true, "success", productVarientsDTOs);

        }
    }

    @RequestMapping("/sales/{salesId}/barcode/{barcode}/json")
    @ResponseBody
    public List<SalesItemVo> viewVariantByBarcodeAndSalesJSON(@PathVariable(value = "salesId") long salesId,
                                                              @PathVariable(value = "barcode") String barcode, HttpSession session) {

        SalesItemVo salesItemVo = salesService.findByBarcodeAndSalesId(barcode, salesId);

        if (salesItemVo == null) {
            return null;
        } else {
            // BarcodeVo barcodeVo = new BarcodeVo();// salesItemVo.getBarcodeVo();
            if (salesItemVo.getIsReturn() == 1) {
                return null;
            } else {
                salesItemVo.setBarcodeVo(null);
                salesItemVo.setSalesVo(null);
                salesItemVo.getProductVarientsVo().getProductVo().setProductVarientsVos(null);
            }
            List<SalesItemVo> itemVos = new ArrayList<>();
            itemVos.add(salesItemVo);

            return itemVos;
        }

    }

    @RequestMapping("/sales/{salesId}/productvariant/{productvariantId}/json")
    @ResponseBody
    public SalesItemVo viewVariantByProductvariantAndSalesJSON(@PathVariable(value = "salesId") long salesId,
                                                               @PathVariable(value = "productvariantId") String productvariantId, HttpSession session) {
        long productVarientId = 0;
        Double mrp = 0.0;
        if (productvariantId != null && !productvariantId.equals("")) {
            String[] arr = productvariantId.split(",");
            productVarientId = Long.parseLong(arr[0]);
            mrp = Double.parseDouble(arr[1]);
        }
        SalesItemVo salesItemVo = salesService.findByProductVariantIdAndSalesIdAndMRP(productVarientId, salesId, mrp);
        if (salesItemVo == null) {
            return null;
        } else {
            salesItemVo.setBarcodeVo(null);
            salesItemVo.setSalesVo(null);
            salesItemVo.getProductVarientsVo().getProductVo().setProductVarientsVos(null);
            return salesItemVo;
        }

    }

    @PostMapping("/sales/creditnote/list/json")
    @ResponseBody
    public String variantforCreditnoteMultiSelectJSON(@RequestParam Map<String, String> allRequestParams,
                                                      HttpSession session) throws ParseException {
        JSONArray jsonArray = new JSONArray();
        jsonObject = new JSONObject();
        // log.info(Long.parseLong(allRequestParams.get("id").toString()));
        long id = 0;
        if (!StringUtils.isNotBlank(allRequestParams.get("id"))) {
            id = 0;
        } else {
            id = Long.parseLong(allRequestParams.get("id").toString());
        }
        List<SalesItemVo> SalesItemVo = salesService.findProductVariantsWithPackage(allRequestParams.get("q"),
                Long.parseLong(session.getAttribute("branchId").toString()), id);
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date startDate, endDate;
        startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
        endDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());
        SalesItemVo.forEach(p -> {
            JSONObject json1 = new JSONObject();
            try {
                json1.put("id", p.getProductVarientsVo().getProductVarientId() + "," + p.getMrp());
                json1.put("text",
                        p.getProductVarientsVo().getProductVo().getName() + " "
                                + (p.getProductVarientsVo().getVarientName() == null ? ""
                                : p.getProductVarientsVo().getVarientName()));
                json1.put("name",
                        p.getProductVarientsVo().getProductVo().getName() + " "
                                + (p.getProductVarientsVo().getVarientName() == null ? ""
                                : p.getProductVarientsVo().getVarientName()));
                json1.put("mrp", p.getMrp());
                json1.put("qty",
                        stockTransactionService.getVariantQty(
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                p.getProductVarientsVo().getProductVarientId(), startDate, endDate,
                                session.getAttribute("financialYear").toString()));
            } catch (Exception e) {

            }
            jsonArray.add(json1);
        });
        try {
            jsonObject.put("total_count", SalesItemVo.size());
            jsonObject.put("incomplete_results", true);
            jsonObject.put("items", jsonArray);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonArray.toString();
    }

    @PostMapping("/setdeafultimage/{imageId}")
    @ResponseBody
    public void chnageOrderOfImageByImageId(@PathVariable long imageId) {
        Optional<ProductImageVo> imageVo = productImageRepository.findById(imageId);
        if (imageVo.isPresent()) {
            long productId = imageVo.get().getProductVo().getProductId();

            List<ProductImageVo> imageVos = productImageRepository
                    .findByProductVoProductIdAndIsDeletedOrderByPosition(productId, 0);
            if (imageVos != null) {
                int count = 2;
                for (int i = 0; i < imageVos.size(); i++) {

                    if (imageVos.get(i).getImageId() == imageId) {
                        imageVos.get(i).setPosition(1);
                    } else {
                        imageVos.get(i).setPosition(count++);
                    }
                }
                for (int i = 0; i < imageVos.size(); i++) {
                    productImageRepository.save(imageVos.get(i));
                }
            }
            if (FILE_UPLOAD_SERVER.equals(Constant.FILE_UPLOAD_SERVER_AZURE)) {
                productService.updateImageInProduct(productId, imageVo.get().getSignedSrc());
            } else {
                productService.updateImageInProduct(productId, imageVo.get().getSrc());
            }

        }

    }

    @PostMapping("/deleteimage/{imageId}")
    @ResponseBody
    public void deleteImage(@PathVariable long imageId, HttpSession session) {
        String imageSrc = productImageRepository.findSrcByImageIdAndCompanyId(imageId,
                Long.parseLong(session.getAttribute("companyId").toString()));
        if (StringUtils.isNotBlank(imageSrc)) {
            if (FILE_UPLOAD_SERVER.equals(Constant.FILE_UPLOAD_SERVER_AZURE)) {
                try {
                    azureBlobService.deleteProductImageFromAzure(imageSrc);
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                productService.updateImageDirectmaxAZURE(imageId);
            } else {
                productService.updateImageDirectmax(imageId, Constant.REALPATH);
            }
            productImageRepository.deleteById(imageId);
            productImageRepository.updateLastPostionfirst(imageId);
        } else {

        }

    }

    @PostMapping("/showhide/b2b")
    @ResponseBody
    public String updateB2BShowHide(@RequestParam(name = "show", required = true) int show,
                                    @RequestParam(name = "productVarientId", defaultValue = "0", required = false) long productVarientId,
                                    HttpSession session) {
        try {
            if (productVarientId != 0) {
                int result = productService.updateIsBtoBShow(productVarientId, show);
                if (result > 0) {
                    return "true";
                } else {
                    return "false";
                }

            } else {
                return "false";
            }

        } catch (Exception e) {
            return "false";
        }

    }

    @PostMapping("/{id}/updateonline")
    @ResponseBody
    public String updateonline(@PathVariable("id") long id, @RequestParam("online") String online,
                               HttpSession session) {
        int result = productService.countByProductIdAndCompanyIdAndIsDeleted(id,
                Long.parseLong(session.getAttribute("companyId").toString()), 0);
        if (result == 0) {
            return "false";
        } else {
            try {
                ProductVo product = productService.findByProductId(id);
                ShopifySetupVo shopifySetupVo = shopifyService
                        .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()), "shopify");
                if (online.equals("true")) {
                    productService.updateActiveDeactiveOnline(id, 1);
                    wooService.updateProductVisibilityInWooCommerce(session, product, "publish");
                    if (product.getShopifySourceId() == 0) {
                        long productId = 0;
                        shopifyService.saveProductInShopify(product, shopifySetupVo,
                                session.getAttribute("financialYear").toString(), productId);
                    }
                    shopifyService.productVisibilityInShopify(product, shopifySetupVo, "active");
                    // wooCommerceService.updateProductVisibilityInWooCommerce(session, product,
                    // "publish");

                } else {
                    productService.updateActiveDeactiveOnline(id, 0);
                    shopifyService.productVisibilityInShopify(product, shopifySetupVo, "draft");
                    // wooCommerceService.updateProductVisibilityInWooCommerce(session, product,
                    // "draft");
                    wooService.updateProductVisibilityInWooCommerce(session, product, "draft");
                }
                return "true";
            } catch (Exception e) {
                return "false";
            }
        }

    }

    @PostMapping("/stockmrpupdate")
    @ResponseBody
    public String stockmrpupdate(@RequestParam("id") long id, @RequestParam("mrp") double mrp) {

        try {
            productService.updatestockmasterMrp(id, mrp);
            return "done";
        } catch (Exception e) {
            return "fail";
        }

    }

    public void downloadImage(URL imageUrl, String fileName) {

        //// log.info("download image successfully111111........................" +
        //// imageUrl);

        InputStream inputStream;
        try {
            inputStream = imageUrl.openStream();

            OutputStream outputStream = new FileOutputStream(fileName);
            byte[] byteArray = new byte[2048]; // A byte array for checking the end of data stream
            int length; // length for data stream
            while ((length = inputStream.read(byteArray)) != -1) {
                outputStream.write(byteArray, 0, length); // Will write data to file byte by byte of size 2048
            }
            inputStream.close();
            outputStream.close();

        } catch (MalformedURLException e) {
            log.info("MalformedURLException :- " + e.getMessage());

        } catch (FileNotFoundException e) {
            log.info("FileNotFoundException :- " + e.getMessage());

        } catch (IOException e) {
            log.info("IOException :- " + e.getMessage());
        }

    }

    @PostMapping("/deleteProduct")
    @ResponseBody
    public String deleteProduct(@RequestParam("productIds") String productIds, HttpServletRequest servletRequest,
                                HttpSession session) {
        List<String> idlist = Arrays.asList(productIds.split("\\s*,\\s*"));
        log.info("result:---" + idlist.size());
        List<Long> productids = new ArrayList<>();
        String result = "";
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.DELETE) == 1) {
            for (String s : idlist) {
                if (StringUtils.isNotBlank(s)) {
                    productids.add(Long.parseLong(s));
                    // ProductVo productVo = productService.findByProductId(Long.parseLong(s));
                    ProductVo productVo = productService.findByProductIdAndCompanyIdAndIsDeleted(Long.parseLong(s),
                            Long.parseLong(session.getAttribute("companyId").toString()), 0);
                    if (productVo == null) {
                        log.info("product id not found");
                        result = "product id not found";
                        return result;
                    }
                }

            }
            try {
                shopifyService.deleteMultipleProductsFromShopify(session, productids);
            } catch (Exception e) {
                e.printStackTrace();
            }

            result = productService.deleteProduct(productids);
            try {
                // wooCommerceService.deleteMultipleProductFromWooCommerce(session, productids);
                wooService.deleteMultipleProductFromWooCommerce(session, productids);
            } catch (Exception e) {
                e.printStackTrace();
                // TODO: handle exception
            }
            try {
                if (Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 0
                        || Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 1) {
                    typesenseService.deleteMultipleProductInTypesense(productids,
                            Long.parseLong(session.getAttribute("companyId").toString()));
                }
            } catch (Exception e) {
                // TODO: handle exception
                e.printStackTrace();
            }
        } else {
            result = "accessdenied";
        }

        log.info("result:---" + result);
        return result;
    }

    @RequestMapping("/update/nutrition")
    public ModelAndView listNutrition(HttpSession session) {
        ModelAndView view = new ModelAndView("product/update-nutrition");
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        view.addObject("category", categoryService.findByCompanyId(
                Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId));

        return view;
    }

    @RequestMapping("/nutrition/datatable")
    @ResponseBody
    public DataTablesOutput<ProductVo> updateNutrition(HttpSession session, @Valid DataTablesInput input,
                                                       @RequestParam Map<String, String> allRequestParams) throws NumberFormatException, JsonProcessingException {
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        {

            // ModelAndView view = new ModelAndView("product/update-nutrition");
            // return view;
            Specification<ProductVo> specification = new Specification<ProductVo>() {

                @Override
                public Predicate toPredicate(Root<ProductVo> root, CriteriaQuery<?> query,
                                             CriteriaBuilder criteriaBuilder) {
                    List<Predicate> predicates = new ArrayList<Predicate>();

                    predicates.add(criteriaBuilder.equal(root.get("isDeleted"), 0));
                    predicates.add(criteriaBuilder.equal(root.get("companyId"), companyId));
                    query.orderBy(criteriaBuilder.desc(root.get("productId")));
                    if (!allRequestParams.get("category").equals("")) {
                        predicates.add(criteriaBuilder.or(
                                criteriaBuilder.equal(root.get("categoryVo").get("categoryId"),
                                        Long.parseLong(allRequestParams.get("category").toString())),
                                criteriaBuilder.equal(root.get("categoryVo").get("categoryVo").get("categoryId"),
                                        Long.parseLong(allRequestParams.get("category").toString()))));
                    }
                    return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
                }
            };

            Specification<ProductVo> additionalSpecification = new Specification<ProductVo>() {

                @Override
                public Predicate toPredicate(Root<ProductVo> root, CriteriaQuery<?> query,
                                             CriteriaBuilder criteriaBuilder) {
                    List<Predicate> predicates = new ArrayList<Predicate>();

                    if (!allRequestParams.get("search.value").toString().equals("")) {
                        ProductVo ProductVo = productService
                                .findByProductVoNameContainingIgnoreCaseAndCompanyIdAndIsDeleted(
                                        allRequestParams.get("search.value").toString(), companyId, 0);
                    }

                    return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
                }
            };

            DataTablesOutput<ProductVo> a = productService.getAllNutrition(input, additionalSpecification,
                    specification);
            a.getData().forEach(y -> {
                y.setCreatedbyname(profileService.getName(y.getCreatedBy()));
            });

            a.getData().forEach(y -> {

                String sm = stockMasterRepository.findByProductVarientsVoProductVoProductId(y.getProductId(),
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        session.getAttribute("financialYear").toString());
                if (sm == null) {
                    y.setQtyOfProduct(0);
                } else {
                    y.setQtyOfProduct(Double.parseDouble(sm));
                }

                boolean isExistInTransaction = false;
                /*
                 * stockTransactionService.existByProductIdAndCompanyId(y.getProductId(),
                 * companyId);
                 */
                y.setExistInTransaction(isExistInTransaction);
            });

            a.getData().forEach(y -> {

                List<ProductImageVo> imageVos = productImageRepository
                        .findByProductVoProductIdAndIsDeletedOrderByPosition(y.getProductId(), 0);

                if (imageVos.size() > 0) {
                    try {
                        y.setImage(Constant.REALPATH + imageVos.get(0).getSrc());
                    } catch (Exception e) {
                        y.setImage("/No-image-found.jpg");
                    }

                } else {
                    y.setImage("/No-image-found.jpg");
                }

            });

            a.getData().forEach(x -> {
                x.getProductVarientsVos().forEach(y -> y.setProductVo(null));

                if (x.getCategoryVo().getCategoryVo() == null) {
                    x.getCategoryVo().setCategoryVo(null);
                } else {
                    x.getCategoryVo().getCategoryVo().setCategoryVo(null);
                }
                if (x.getBrandVo().getBrandVo() == null) {
                    x.getBrandVo().setBrandVo(null);
                } else {
                    x.getBrandVo().getBrandVo().setBrandVo(null);
                }

            });
            log.info("-=-=-=--=-=-===================----->>>>>>>>>>>>>>>>" + a.getData().size());

            return a;

        }
    }

    @RequestMapping("/nutrition/create")
    public String updateNutrition(@RequestParam("productId") long productId,
                                  @RequestParam("nutrition1") String nutrition1, @RequestParam("nutrition2") String nutrition2,
                                  @RequestParam("nutrition3") String nutrition3, @RequestParam("nutrition4") String nutrition4,
                                  @RequestParam("nutrition5") String nutrition5) {
        // log.info("productId --------" + productId);
        ProductVo productVo = productService.findByProductId(productId);
        if (productVo != null) {
            productVo.setNutrition1(nutrition1);
            productVo.setNutrition2(nutrition2);
            productVo.setNutrition3(nutrition3);
            productVo.setNutrition4(nutrition4);
            productVo.setNutrition5(nutrition5);
            productService.insertProduct(productVo);
            return "true";
        }
        return "false";
    }

    @PostMapping("/shopifynotsync/{id}")
    @ResponseBody
    public String shopifyNotSyncProduct(@PathVariable("id") long productId, HttpSession session) {
        // ProductVo product = productService.findByProductId(productId);
        ProductVo product = productService.findByProductIdAndCompanyIdAndIsDeleted(productId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0);
        if (product == null) {
            return "false";
        }
        //// log.info("update product getShopifySync-------------" +
        //// product.getShopifySync());
        // if (product.getShopifySync() == 1) {
        ShopifySetupVo shopifySetupVo = shopifyService
                .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()), "shopify");
        //// log.info("update product getShopifySync1111-------------" +
        //// product.getShopifySync());
        CompanySettingVo allowshopify = companySettingService
                .findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()), Constant.SHOPIFY);
        if (shopifySetupVo != null && allowshopify != null) {
            //// log.info("update product controller-------------");
            ShopifyResponse responce = shopifyService.checkCredentials(shopifySetupVo);
            if (responce.isStatus()) {
                shopifyService.updateProduct(product, shopifySetupVo);
                return "true";

            } else {
                //// log.info("update product controller save------------");
                Greeting greeting = new Greeting();
                /// greeting.setContent("Product Add successfully");
                greeting.setContent("Pls Check your credentials");
                try {
                    // messagingTemplate.convertAndSendToUser("" + product.getCreatedBy(),
                    // "/queue/reply", greeting);
                } catch (Exception x) {
                    x.printStackTrace();
                    ErrorLogVo errorLogVo = new ErrorLogVo();
                    errorLogVo.setBranchId(session.getAttribute("branchId").toString());
                    errorLogVo.setErrorDate(CurrentDateTime.getTodayDate());
                    errorLogVo.setErrorDescription(x.getMessage());
                    errorLogRepository.save(errorLogVo);
                    return "false";
                }
            }

        }
        return "false";
    }

    @PostMapping("/getListOfTaxesPurchase")
    @ResponseBody
    public List<TaxVo> getListOfTaxesPurchase(@RequestParam(value = "id") String id) {
        List<String> items = Arrays.asList(id.split("\\s*,\\s*"));
        // System.err.println("item size" + items.size());
        List<TaxVo> taxvos = new ArrayList<TaxVo>();
        for (int i = 0; i < items.size(); i++) {
            TaxVo tax = new TaxVo();
            tax = productService.findByProductVarientId(Long.parseLong(items.get(i))).getProductVo().getPurchaseTaxVo(); // taxservice.findByTaxId();
            tax.setCessrate(
                    productService.findByProductVarientId(Long.parseLong(items.get(i))).getProductVo().getCesstax());
            tax.setProductVarientId(Long.parseLong(items.get(i)));
            taxvos.add(tax);
        }

        return taxvos;
    }

    @PostMapping("/stockadjustment/variants/{id}")
    @ResponseBody
    public List<ProductVarientDTO> getVariants(HttpSession session, @PathVariable("id") long productId) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<Object[]> list = productService.findByCompanyIdAndIsDeletedAndProductId(
                Long.parseLong(session.getAttribute("companyId").toString()), 0, productId, merchantTypeId, clusterId);
        log.info("sizeeeeeeeeeee===" + list.size());
        List<ProductVarientDTO> productVarientDTO = new ArrayList<>();
        list.forEach(d -> {
            // log.info("date:--"+d.getStartDate());
            List<StockMasterVo> stockMasterVos = stockMasterService
                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(Long.parseLong("" + d[0]),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString());
            productVarientDTO.add(new ProductVarientDTO((BigInteger) d[0], (double) d[1], (String) d[2], (double) d[3],
                    stockMasterVos));
        });
        return productVarientDTO;
    }

    @PostMapping("/stockadjustment/barcode/{id}")
    @ResponseBody
    public List<Map<String, String>> getBarcode(HttpSession session, @PathVariable("id") Long barcodeId) {
        List<Map<String, String>> data = productService.findByBarcodeIdAndVarientId(barcodeId, Long.parseLong(session.getAttribute("companyId").toString()), Long.parseLong(session.getAttribute("branchId").toString()));
        return data;
    }

    @RequestMapping("/contact/{id}/json")
    @ResponseBody
    public List<ProductVarientsVo> getContactWiseProducts(HttpSession session, @PathVariable("id") long contactId)
            throws ParseException, CloneNotSupportedException {
        List<ProductVarientsVo> lowQtyProducts = new ArrayList<>();
        CompanySettingVo companySettingVo = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
        CompanySettingVo supplierwisesetting = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWSUPPLIERWISEPRODUCTMAPPING);
        if (companySettingVo.getValue() == 1 && supplierwisesetting.getValue() == 1) {
            List<ContactProductVo> productVos = contactService.findByContactWiseProduct(contactId);
            // List<Object[]>
            // productVarientVos=productService.getQtyOfProduct(contactId,session.getAttribute("financialYear").toString());

            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            JSONArray jsonArray = new JSONArray();
            Date startDate, endDate;

            startDate = dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString());
            endDate = dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString());
            if (productVos != null) {

                for (ContactProductVo contactProduct : productVos) {
                    // log.info("product
                    // varients"+contactProduct.getProductVarientsVo().getProductVarientId());
                    // ProductVo
                    // product=productService.findProductByProductVarientId(contactProduct.getProductVarientsVo().getProductVarientId());
                    double qty = stockTransactionService.getVariantQty(
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            contactProduct.getProductVarientsVo().getProductVarientId(), startDate, endDate,
                            session.getAttribute("financialYear").toString());
                    POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(
                            contactProduct.getProductVarientsVo().getProductVo().getProductId(),
                            Long.parseLong(session.getAttribute("branchId").toString()));
                    if (master != null) {
                        // log.info("stock limit---"+master.getStockLimit()+"qty--"+qty);
                        if (qty < master.getStockLimit()) {
                            ProductVarientsVo pv = productVariantRepository.findByProductVarientId(
                                    contactProduct.getProductVarientsVo().getProductVarientId());
                            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                            productVarientsVo = (ProductVarientsVo) pv.clone();

                            productVarientsVo.getProductVo().setProductVarientsVos(null);
                            productVarientsVo.getProductVo().setProductAttributeVos(null);

                            PurchaseItemVo purchaseItemVo = purchaseItemRepository
                                    .findByBranchIdProductVarientIdAndContactId(
                                            Long.parseLong(session.getAttribute("branchId").toString()),
                                            contactProduct.getProductVarientsVo().getProductVarientId(), contactId);

                            productVarientsVo.setDiscount(0.0);
                            productVarientsVo.setDiscountType("percentage");
                            productVarientsVo.setDiscount2(0.0);
                            productVarientsVo.setDiscountType2("percentage");
                            TaxVo purchaseTax = taxService.findByTaxId(productVarientsVo.getProductVo().getTaxId());
                            if (purchaseTax == null) {
                                String taxCode = Constant.GST;
                                int taxType = Constant.TAX_TYPE_GST;
                                try {
                                    Map<String, String> gstMap = userRepository.getgstDetails(
                                            Long.parseLong(session.getAttribute("companyId").toString()));
                                    if (gstMap != null && !gstMap.isEmpty()) {
                                        if (StringUtils.isNotBlank(gstMap.get("tax_type"))
                                                && StringUtils.equalsIgnoreCase(gstMap.get("tax_type"), Constant.VAT)) {
                                            taxCode = Constant.VAT;
                                            taxType = Constant.TAX_TYPE_VAT;
                                        }
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                String tax_code = "";
                                purchaseTax = taxService.findByTaxRateAndIsGlobalOrCompanyIdAndTaxTypeAndTaxCode(0,
                                        Long.parseLong(session.getAttribute("companyId").toString()), taxType,
                                        tax_code);
                            }
                            productVarientsVo.getProductVo().setTaxVo(purchaseTax);
                            if (purchaseItemVo != null) {
                                productVarientsVo.setDiscount(purchaseItemVo.getDiscount());
                                productVarientsVo.setDiscountType(purchaseItemVo.getDiscountType());
                                productVarientsVo.setDiscount2(purchaseItemVo.getDiscount2());
                                productVarientsVo.setDiscountType2(purchaseItemVo.getDiscountType2());

                                if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                                    productVarientsVo.setPurchasePrice(purchaseItemVo.getPrice()
                                            + (purchaseItemVo.getTaxAmount() / purchaseItemVo.getQty()));
                                } else {
                                    productVarientsVo.setPurchasePrice(purchaseItemVo.getPrice());
                                }
                                productVarientsVo.setMrp(purchaseItemVo.getMrp());
                            } else {
                                PurchaseItemVo piv = purchaseItemRepository.findByBranchIdProductVarientId(
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        contactProduct.getProductVarientsVo().getProductVarientId());

                                if (piv != null) {
                                    productVarientsVo.setMrp(piv.getMrp());
                                    if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                                        productVarientsVo
                                                .setPurchasePrice(piv.getPrice() + (piv.getTaxAmount() / piv.getQty()));
                                    } else {
                                        productVarientsVo.setPurchasePrice(piv.getPrice());
                                    }
                                }
                                productVarientsVo.setDiscount(productVarientsVo.getDiscount());
                                productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
                            }

                            String s = stockMasterRepository.findproductVariantQty(
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    productVarientsVo.getProductVarientId(),
                                    session.getAttribute("financialYear").toString());
                            if (s == null) {
                                s = "0";
                            }

                            productVarientsVo.setAvailableQty(s + " "
                                    + productVarientsVo.getProductVo().getUnitOfMeasurementVo().getMeasurementCode());

//    	        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//    	        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                            if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                            }
                            if (productVarientsVo.getProductVo().getBrandVo() != null) {
                                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                            }
                            productVarientsVo.setQty(master.getPoQuantity() - qty);
                            // return productVarientsVo;
                            lowQtyProducts.add(productVarientsVo);
                        }
                    }
                }

            }
        }

        return lowQtyProducts;
    }

    @PostMapping("/checkProductName")
    @ResponseBody
    public String checkProductName(@RequestParam Map<String, String> allRequestParam,
                                   @RequestParam(defaultValue = "0", value = "productId") long productid, HttpSession session) {

        List<ProductVo> b = new ArrayList<>();

        String name = allRequestParam.get(allRequestParam.keySet().stream().filter(s -> s.endsWith("name"))
                .collect(Collectors.toSet()).iterator().next()).trim();
        CompanySettingVo settingVo = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()),
                Constant.ALLOWPRODUCTDUPLICATIONVALIDATION);
        if (settingVo != null && settingVo.getValue() == 1) {
            return "{ \"valid\": true }";
        }
        if (productid == 0) {

            b = productService.findBynameIgnoreCaseAndCompanyId(name,
                    Long.parseLong(session.getAttribute("companyId").toString()));

        } else {

            b = productService.findBynameIgnoreCaseAndCompanyIdAndProductIdNot(name,
                    Long.parseLong(session.getAttribute("companyId").toString()), productid);
        }

        if (b.size() == 0) {
            return "{ \"valid\": true }";
        } else {
            return "{ \"valid\": false }";
        }
    }

    @PostMapping("/getseries/json")
    @ResponseBody
    public String getseries(HttpSession session) {
//    	 if (Long.parseLong(session.getAttribute("companyId").toString()) == 202) {
//             CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                     Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//             return barcodeSeries.getAddValue();
//         }
//         if (Long.parseLong(session.getAttribute("companyId").toString()) == 415) {
//             CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                     Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//             //log.info("barcodeseriesssssss" + barcodeSeries.getValue());
//             return barcodeSeries.getAddValue();
//         }
//
//         if (Long.parseLong(session.getAttribute("companyId").toString()) == 436) {
//             CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                     Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//             //log.info("barcodeseriesssssss" + barcodeSeries.getValue());
//             return barcodeSeries.getAddValue();
//         }

        CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEGENRATESERIESWISE);
        if (barcodegenrateserieswise != null) {
            if (barcodegenrateserieswise.getValue() == 1) {
                CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEMANAGE);
                if (barcodemanage != null && barcodemanage.getValue() == 2) {
                    try {
                        CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
                        return barcodeSeries.getAddValue();
                    } catch (Exception e) {
                        // TODO: handle exception
                    }

                } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                    try {
                        CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                Long.parseLong(session.getAttribute("branchId").toString()), Constant.BARCODESERIES);
                        return barcodeSeries.getAddValue();
                    } catch (Exception e) {
                        // TODO: handle exception
                    }
                }
            }
        } else {
            return "0";
        }
        return "0";
    }

    @RequestMapping("/materialconsumption/json")
    @ResponseBody
    @Transactional(readOnly = true)
    public ProductCUSTOMDTO materialConsumptionSelectJSON(@RequestParam Map<String, String> allRequestParams,
                                                          HttpSession session) throws ParseException {
        String searchValue = "";
        if (StringUtils.isNotBlank(allRequestParams.get("q"))) {
            if (!allRequestParams.get("q").toString().equals("")) {
                searchValue = allRequestParams.get("q").toString();
                searchValue = searchValue.replace(" ", "%");
                // log.warning("searchValue---->"+searchValue);
            }
        }
        List<ProductCUSTOMSelectItemDTO> productVos = new ArrayList<ProductCUSTOMSelectItemDTO>();
        productVos = productService.findProductVariantsWithSelectSearch(searchValue,
                Long.parseLong(session.getAttribute("companyId").toString()), 1L, "0");

        return new ProductCUSTOMDTO(productVos.size(), true, productVos);
    }

    @PostMapping("/list/select/json")
    @ResponseBody
    @Transactional(readOnly = true)
    public ProductCUSTOMDTO selectpurchase(@RequestParam Map<String, String> allRequestParams, HttpSession session)
            throws ParseException {
        String searchValue = "";
        if (StringUtils.isNotBlank(allRequestParams.get("q"))) {
            if (!allRequestParams.get("q").toString().equals("")) {
                searchValue = allRequestParams.get("q").toString();
                searchValue = searchValue.replace(" ", "%");
                // log.warning("searchValue---->"+searchValue);
            }
        }

        List<Map<String, String>> list = new ArrayList<Map<String, String>>();
        List<ProductCUSTOMSelectItemDTO> productVos = new ArrayList<ProductCUSTOMSelectItemDTO>();
        double qty = 0;
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        // log.info("contactId==="+allRequestParams.get("contactId"));
        if (StringUtils.isNotBlank(allRequestParams.get("purchaseId"))) {
            productVos = purchaseService.findProductVariantsWithPackageselect(
                    Long.parseLong(allRequestParams.get("purchaseId").toString()), searchValue,
                    Long.parseLong(session.getAttribute("companyId").toString()));
        } else {

            CompanySettingVo companySettingVo = companySettingService.findByBranchIdAndType(
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    Constant.ALLOWSUPPLIERWISEPRODUCTMAPPING);
            // List<ProductVarientsVo> productVariantVos=new ArrayList();

            long contactId = 0;
            if (companySettingVo.getValue() == 1 && StringUtils.isNotBlank(allRequestParams.get("contactId"))) {
                productVos = productService.getContactwiseProductNewforSelect(
                        Long.parseLong(allRequestParams.get("contactId")), searchValue,
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        Long.parseLong(session.getAttribute("companyId").toString()));

            } else {
                if (StringUtils.isNotBlank(allRequestParams.get("producttype"))) {
                    productVos = productService.findProductVariantsWithPackageselect(searchValue,
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            allRequestParams.get("producttype"));
                } else {
                    productVos = productService.findProductVariantsWithSelectSearch(searchValue,
                            Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
                }
            }
        }
        return new ProductCUSTOMDTO(productVos.size(), true, productVos);
    }

    @PostMapping("/list/type/select/json")
    @ResponseBody
    public ProductCUSTOMDTO selectProductForRecipe(@RequestParam Map<String, String> allRequestParams,
                                                   HttpSession session) throws ParseException {
        String searchValue = "";
        if (StringUtils.isNotBlank(allRequestParams.get("q"))) {
            if (!allRequestParams.get("q").toString().equals("")) {
                searchValue = allRequestParams.get("q").toString();
                searchValue = searchValue.replace(" ", "%");
                // log.warning("searchValue---->"+searchValue);
            }
        }
        List<Map<String, String>> list = new ArrayList<Map<String, String>>();
        List<ProductCUSTOMSelectItemDTO> productVos = new ArrayList<ProductCUSTOMSelectItemDTO>();
        double qty = 0;
        if (StringUtils.isNotBlank(allRequestParams.get("recipesearchtype"))
                && StringUtils.equalsIgnoreCase(allRequestParams.get("recipesearchtype"), "1")) {
            if (StringUtils.isNotBlank(allRequestParams.get("isRaw"))
                    && StringUtils.equalsIgnoreCase(allRequestParams.get("isRaw"), "1")) {
                List<String> productTpes = new ArrayList<>();
                productTpes.add(Constant.Raw);
                productTpes.add(Constant.Packaging);
                productTpes.add(Constant.SemiFinished);
                productVos = productService.findProductVariantsWithProductType(searchValue,
                        Long.parseLong(session.getAttribute("companyId").toString()), productTpes);
            } else {
                List<String> productTpes = new ArrayList<>();
                productTpes.add(Constant.Finished);
                productTpes.add(Constant.SemiFinished);
                productVos = productService.findProductVariantsWithProductType(searchValue,
                        Long.parseLong(session.getAttribute("companyId").toString()), productTpes);
            }
        } else {
            productVos = productService.findProductVariantsWithSelectSearch(searchValue,
                    Long.parseLong(session.getAttribute("companyId").toString()), 1L, "0");
        }

        return new ProductCUSTOMDTO(productVos.size(), true, productVos);
    }

    @PostMapping("/type/barcode/json")
    @ResponseBody
    public List<ProductVarientsVo> searchProductForRecipe(@RequestParam("barcode") String barcode,
                                                          @RequestParam(name = "isRaw", defaultValue = "0", required = false) String isRaw,
                                                          @RequestParam(name = "recipesearchtype", defaultValue = "0", required = false) String recipesearchtype,
                                                          HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<String> productTpes = new ArrayList<>();
        List<ProductVarientsVo> varientsList = new ArrayList<>();
        if (StringUtils.equalsIgnoreCase(recipesearchtype, "1")) {
            if (StringUtils.equalsIgnoreCase(isRaw, "1")) {
                productTpes.add(Constant.Raw);
                productTpes.add(Constant.Packaging);
                productTpes.add(Constant.SemiFinished);
                varientsList = productService
                        .findByitemCodeIgnoreCaseAndCompanyIdAndIsDeletedAndProductVoActiveAndProductType(barcode,
                                Long.parseLong(session.getAttribute("companyId").toString()), 0, 0, productTpes);
            } else {
                productTpes.add(Constant.Finished);
                productTpes.add(Constant.SemiFinished);
                varientsList = productService
                        .findByitemCodeIgnoreCaseAndCompanyIdAndIsDeletedAndProductVoActiveAndProductType(barcode,
                                Long.parseLong(session.getAttribute("companyId").toString()), 0, 0, productTpes);
            }
        } else {
            List<String> producttypelist = new ArrayList<>();
            producttypelist = productTypeRepository.findListOfData();
            varientsList = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
                    Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                    producttypelist);
        }

        List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();

        if (!varientsList.isEmpty()) {
            varientsList.forEach(pv -> {
                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                if (productVarientsVo != null) {
                    ////// log.info("pv.getSellingPrice()"+productVarientsVo.getSellingPrice());
                    try {
                        productVarientsVo = (ProductVarientsVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                    ////// log.info("productVarientsVo"+productVarientsVo.getSellingPrice());
                }

                if (productVarientsVo == null) {
                    log.info("data empty");
                    // return null;
                } else {
                    log.info("data not empty");
                    String s = stockMasterRepository.findproductVariantQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                                    productVarientsVo.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString());
                    if (stockMasterVos != null) {
                        productVarientsVo.setStockMasterVos(stockMasterVos);
                    }
                    productVarientsVo.getProductVo().setProductVarientsVos(null);
                    productVarientsVo.getProductVo().setProductAttributeVos(null);
//    	            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//    	            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                    }
                    if (productVarientsVo.getProductVo().getBrandVo() != null) {
                        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    }
                    productVarientsVo.setAvailableQty(s);
                    productVarientsVos.add(productVarientsVo);
                }
            });
        }

        return productVarientsVos;
    }

    @RequestMapping("new/sales/{productvariantId}/{batchNo}/{contactId}/{batchMrp}/{productMultiBarcodeId}/{rackId}/{warehouseId}/json")
    @ResponseBody
    public ProductVarientsVo getVarientInfoByIdAndBatchNo2(@PathVariable long productvariantId,
                                                           @PathVariable("batchNo") String batchNo, @PathVariable("contactId") String conId,
                                                           @PathVariable("batchMrp") String mrp, @PathVariable("productMultiBarcodeId") long productMultiBarcodeId, @PathVariable("rackId") long rackId, @PathVariable("warehouseId") long warehouseId, HttpSession session) {

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        double batchMrp = 0;
        if (StringUtils.isNotBlank(mrp) && !StringUtils.equalsAnyIgnoreCase(mrp, "null")) {
            batchMrp = Double.parseDouble(mrp);
        }
        long contactId = 0;
        if (StringUtils.isNotBlank(conId) && !StringUtils.equalsAnyIgnoreCase(conId, "null")) {
            contactId = Long.parseLong(conId);
        }
        // String productVariantId =
        // productService.findProductVarientIdCompanyIdAndIsDeleted( productvariantId,
        // Long.parseLong(session.getAttribute("companyId").toString()),merchantTypeId,clusterId);

        // //log.info("productVariantId: "+productVariantId);
        // if (productVariantId == null) {
        // return null;
        // } else {

        // ProductVarientsVo pv =
        // productService.findByProductVarientId(Long.parseLong(productVariantId));
        CompanySettingVo ALLOWCUSTOMERWISEPRODUCTMAPPING = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWCUSTOMERWISEPRODUCTMAPPING);

        ProductVarientsVo pv = productService.findByProductVarientIdAndCompanyIdAndIsDeleted(productvariantId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
        try {
            productVarientsVo = (ProductVarientsVo) pv.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        if (productVarientsVo == null) {
            return null;
        } else {
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
            if (s == null) {
                s = "0";
            }

            productVarientsVo.setDiscount2(0.0);
            productVarientsVo.setDiscountType2("percentage");
//            productVarientsVo.setDiscount(0.0);
//            productVarientsVo.setDiscountType("percentage");

            productVarientsVo.setDiscount(productVarientsVo.getDiscount());
            productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
            productVarientsVo.setMrp(batchMrp);

            productVarientsVo.getProductVo().setProductVarientsVos(null);
            productVarientsVo.getProductVo().setProductAttributeVos(null);
//            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
            }
            if (productVarientsVo.getProductVo().getBrandVo() != null) {
                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            }
            productVarientsVo.setAvailableQty(s);
            productVarientsVo.setMultiItemCode(productVarientsVo.getItemCode());
            productVarientsVo.getProductVo().setHsnType(0);

            // log.info("jioType: "+session.getAttribute("jioType").toString());
            if (Integer.parseInt(session.getAttribute("jioType").toString()) == Constant.JIO_TYPE_JPM
                    || Integer.parseInt(session.getAttribute("jioType").toString()) == Constant.JIO_TYPE_FJSK) {
                // log.info("productVarientsVo.getJpmProductTBLId() :
                // "+productVarientsVo.getJpmProductTBLId());
                if (productVarientsVo.getJpmProductTBLId() != 0) {
                    String jpmProductSkuId = jpmProductRepository
                            .getJPMProductSKUId(productVarientsVo.getJpmProductTBLId());
                    if (StringUtils.isNotBlank(jpmProductSkuId)) {
                        productVarientsVo.setJpmProductSkuId(jpmProductSkuId);
                    }
                    System.err.println("jpmProductSkuId " + jpmProductSkuId);
                }
            }

            // if(Integer.parseInt(session.getAttribute("jioType").toString()) ==
            // Constant.JIO_TYPE_AJIO){

            if (productVarientsVo.getProductVo().getHsnCode() != null
                    && productVarientsVo.getProductVo().getHsnCode() != "") {
                List<HsnTaxMasterVo> hsnTaxMasterVos = hsnTaxMasterService
                        .findHSNTypeByHSNCode(productVarientsVo.getProductVo().getHsnCode());
                if (hsnTaxMasterVos.size() > 0) {
                    productVarientsVo.getProductVo().setHsnType(hsnTaxMasterVos.get(0).getHsn_type());
                }
            }
            // }
            if (ALLOWCUSTOMERWISEPRODUCTMAPPING.getValue() == 1) {
                ContactProductVo product = contactProductRepository
                        .findByProductVarientIdAndContactId(productVarientsVo.getProductVarientId(), contactId);
                if (product != null) {
                    productVarientsVo.setMrp(product.getPrice());
                    productVarientsVo.setIsCustomerMapping(1);

                }
            }
            productMultiBarcodeDTOForDepartment productMultiBarcodeVo =  productMultiBarcodeRepository.findByProductMultiBarcodeIdAndIsDeleted(productMultiBarcodeId,0);
            productVarientsVo.setDepartmentName(productMultiBarcodeVo.getdepartmentName());
            productVarientsVo.setSizeName(productMultiBarcodeVo.getsizeName());
            productVarientsVo.setProductMultiBarcodeId(productMultiBarcodeId);
            productVarientsVo.setRackId(rackId);
            productVarientsVo.setWarehouseId(warehouseId);
            return productVarientsVo;
        }

    }

    @RequestMapping("itemedit")
    @ResponseBody
    public ProductVarientsVo editproduct(@RequestParam Map<String, String> allRequestParams, HttpSession session) {
        ProductVarientsVo productVarientsVo = productService
                .findByProductVarientId(Long.parseLong(allRequestParams.get("productId")));

        ProductVo productVo = productService.findByProductId(productVarientsVo.getProductVo().getProductId());
        productVo.setName(allRequestParams.get("name"));
        productVo.setCategoryVo(categoryService.findByCategoryId(Long.parseLong(allRequestParams.get("categoryId"))));
        productVo.setPurchaseTaxVo(taxService.findByTaxId(Long.parseLong(allRequestParams.get("purchaseTaxId"))));
        productVo
                .setUnitOfMeasurementVo(unitOfMeasurementService.findById(Long.parseLong(allRequestParams.get("uom"))));
        productVo.setHsnCode(allRequestParams.get("hsn"));
        productVo.setBrandVo(brandService.findByBrandId(Long.parseLong(allRequestParams.get("brandId")),
                Long.parseLong(session.getAttribute("companyId").toString()), 0));

        ProductVo productVo2 = productService.insertProduct(productVo);

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        CompanySettingVo setting = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
        log.info("manage po quntity");
        try {
            if (Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 0
                    || Long.parseLong(session.getAttribute("merchantTypeId").toString()) == 1) {
                typesenseService.createSingleProductInTypesense(productVo2.getProductId(), productVo2.getCompanyId());
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        productVarientsVo.setMultiItemCode(productVarientsVo.getItemCode());
        productVarientsVo.getProductVo().setProductVarientsVos(null);
        productVarientsVo.getProductVo().setProductAttributeVos(null);

//        productVarientsVo.setDiscount(0.0);
//        productVarientsVo.setDiscountType("percentage");
        productVarientsVo.setDiscount2(0.0);
        productVarientsVo.setDiscountType2("percentage");

        String s = stockMasterRepository.findproductVariantQty(
                Long.parseLong(session.getAttribute("companyId").toString()),
                Long.parseLong(session.getAttribute("branchId").toString()), productVarientsVo.getProductVarientId(),
                session.getAttribute("financialYear").toString());
        if (s == null) {
            s = "0";
        }

        productVarientsVo.setAvailableQty(
                s + " " + productVarientsVo.getProductVo().getUnitOfMeasurementVo().getMeasurementCode());

//        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
        if (productVarientsVo.getProductVo().getCategoryVo() != null) {
            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
        }
        if (productVarientsVo.getProductVo().getBrandVo() != null) {
            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
        }
        POQuntityMasterVo master = poQunatityMasterService.findByProductIdAndBranchId(
                productVarientsVo.getProductVo().getProductId(),
                Long.parseLong(session.getAttribute("branchId").toString()));
        try {
            if (allRequestParams.get("purchaseType") != null && setting != null && master != null
                    && allRequestParams.get("purchaseType").equalsIgnoreCase("order")) {
                productVarientsVo.setQty(master.getPoQuantity() - Double.parseDouble(s.toString()));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            if (StringUtils.isNotBlank(allRequestParams.get("multiItemCode"))) {
//            	log.warning("multiItemCode------>"+allRequestParams.get("multiItemCode"));
                ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                productMultiBarcodeVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                productMultiBarcodeVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                productMultiBarcodeVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                productMultiBarcodeVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                productMultiBarcodeVo.setProductVarientId(productVarientsVo.getProductVarientId());
                productMultiBarcodeVo.setItemCode(allRequestParams.get("multiItemCode").toString());
                ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                        .saveAndFlush(productMultiBarcodeVo);
            } else {
//    			log.warning("multiItemCode is blank");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return productVarientsVo;
    }

    @RequestMapping("new/sales/{productvariantId}/{batchNo}/{contactId}/{batchMrp}/json")
    @ResponseBody
    public ProductVarientsVo getVarientInfoByIdAndBatchNo3(@PathVariable long productvariantId,
                                                           @PathVariable("batchNo") String batchNo, @PathVariable("contactId") String conId,
                                                           @PathVariable("batchMrp") String mrp, HttpSession session) {

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        double batchMrp = 0;
        if (StringUtils.isNotBlank(mrp) && !StringUtils.equalsAnyIgnoreCase(mrp, "null")) {
            batchMrp = Double.parseDouble(mrp);
        }
        long contactId = 0;
        if (StringUtils.isNotBlank(conId) && !StringUtils.equalsAnyIgnoreCase(conId, "null")) {
            contactId = Long.parseLong(conId);
        }
        // String productVariantId =
        // productService.findProductVarientIdCompanyIdAndIsDeleted( productvariantId,
        // Long.parseLong(session.getAttribute("companyId").toString()),merchantTypeId,clusterId);

        // //log.info("productVariantId: "+productVariantId);
        // if (productVariantId == null) {
        // return null;
        // } else {

        // ProductVarientsVo pv =
        // productService.findByProductVarientId(Long.parseLong(productVariantId));
        CompanySettingVo ALLOWCUSTOMERWISEPRODUCTMAPPING = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWCUSTOMERWISEPRODUCTMAPPING);

        ProductVarientsVo pv = productService.findByProductVarientIdAndCompanyIdAndIsDeleted(productvariantId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
        try {
            productVarientsVo = (ProductVarientsVo) pv.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        if (productVarientsVo == null) {
            return null;
        } else {
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
            if (s == null) {
                s = "0";
            }

            productVarientsVo.setDiscount2(0.0);
            productVarientsVo.setDiscountType2("percentage");
//            productVarientsVo.setDiscount(0.0);
//            productVarientsVo.setDiscountType("percentage");

            productVarientsVo.setDiscount(productVarientsVo.getDiscount());
            productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
            productVarientsVo.setMrp(batchMrp);

            productVarientsVo.getProductVo().setProductVarientsVos(null);
            productVarientsVo.getProductVo().setProductAttributeVos(null);
//            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
            }
            if (productVarientsVo.getProductVo().getBrandVo() != null) {
                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            }
            productVarientsVo.setAvailableQty(s);
            productVarientsVo.setMultiItemCode(productVarientsVo.getItemCode());
            productVarientsVo.getProductVo().setHsnType(0);

            // log.info("jioType: "+session.getAttribute("jioType").toString());
            if (Integer.parseInt(session.getAttribute("jioType").toString()) == Constant.JIO_TYPE_JPM
                    || Integer.parseInt(session.getAttribute("jioType").toString()) == Constant.JIO_TYPE_FJSK) {
                // log.info("productVarientsVo.getJpmProductTBLId() :
                // "+productVarientsVo.getJpmProductTBLId());
                if (productVarientsVo.getJpmProductTBLId() != 0) {
                    String jpmProductSkuId = jpmProductRepository
                            .getJPMProductSKUId(productVarientsVo.getJpmProductTBLId());
                    if (StringUtils.isNotBlank(jpmProductSkuId)) {
                        productVarientsVo.setJpmProductSkuId(jpmProductSkuId);
                    }
                    System.err.println("jpmProductSkuId " + jpmProductSkuId);
                }
            }

            // if(Integer.parseInt(session.getAttribute("jioType").toString()) ==
            // Constant.JIO_TYPE_AJIO){

            if (productVarientsVo.getProductVo().getHsnCode() != null
                    && productVarientsVo.getProductVo().getHsnCode() != "") {
                List<HsnTaxMasterVo> hsnTaxMasterVos = hsnTaxMasterService
                        .findHSNTypeByHSNCode(productVarientsVo.getProductVo().getHsnCode());
                if (hsnTaxMasterVos.size() > 0) {
                    productVarientsVo.getProductVo().setHsnType(hsnTaxMasterVos.get(0).getHsn_type());
                }
            }
            // }
            if (ALLOWCUSTOMERWISEPRODUCTMAPPING.getValue() == 1) {
                ContactProductVo product = contactProductRepository
                        .findByProductVarientIdAndContactId(productVarientsVo.getProductVarientId(), contactId);
                if (product != null) {
                    productVarientsVo.setMrp(product.getPrice());
                    productVarientsVo.setIsCustomerMapping(1);

                }
            }
            return productVarientsVo;
        }

    }

    @PostMapping("/checkposProductName")
    @ResponseBody
    public String checkposProductName(@RequestParam Map<String, String> allRequestParam,
                                      @RequestParam(defaultValue = "0", value = "productId") long productid, HttpSession session) {
        List<ProductVo> b = new ArrayList<>();
        String name = allRequestParam.get(allRequestParam.keySet().stream().filter(s -> s.endsWith("posName"))
                .collect(Collectors.toSet()).iterator().next());
        CompanySettingVo settingVo = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()),
                Constant.ALLOWPRODUCTDUPLICATIONVALIDATION);
        if (settingVo != null && settingVo.getValue() == 1) {
            return "{ \"valid\": true }";
        }
        if (productid == 0) {
            // System.err.println("-----*******checkitemcode
            // NEWWW**********------------------" + name);
            b = productService.findBynameIgnoreCaseAndCompanyId(name,
                    Long.parseLong(session.getAttribute("companyId").toString()));
        } else {
            // System.err.println("-----*******checkitemcode
            // UPADETEEE**********------------------" + name);
            b = productService.findBynameIgnoreCaseAndCompanyIdAndProductIdNot(name,
                    Long.parseLong(session.getAttribute("companyId").toString()), productid);
        }

        if (b.size() == 0) {
            return "{ \"valid\": true }";
        } else {
            return "{ \"valid\": false }";
        }
    }

    @PostMapping("/updatesellingprice")
    @ResponseBody
    public String updatesellingprice(@RequestParam("stockId") long stockId,
                                     @RequestParam("sellingprice") double sellingprice, HttpSession session) {
        List<StockMasterPriceDTO> stockMasterPriceList = new ArrayList<>();
        try {
            stockMasterPriceList = stockMasterRepository.getBatchPriceDTOByStockId(stockId);
            log.warning("updatemrp here  stockMasterPriceList batchNo : " + stockMasterPriceList.get(0).getBatchNo());
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            stockMasterService.updatesellingPrice(stockId, sellingprice);
            try {
                if (session.getAttribute("userType").toString().equals("2")) {
                    CompanySettingVo franchisenewflow = companySettingService.findByCompanyIdAndType(
                            Long.parseLong(session.getAttribute("companyId").toString()), Constant.FRANCHISENEWFLOW);
                    CompanySettingVo batchDisable = companySettingService.findByCompanyIdAndType(
                            Long.parseLong(session.getAttribute("companyId").toString()), Constant.BATCHDISABLE);
                    if (franchisenewflow.getValue() == 1 && !productVariantRepository
                            .getisbatchmanage(stockMasterPriceList.get(0).getProductVarientId())) {
                        stockMasterService.updateSellingPriceInBranch(sellingprice, stockId,
                                session.getAttribute("financialYear").toString());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                StockMasterVo stockMasterVo2 = stockMasterService.findByStockId(stockId);
                stockMasterVo2.setSellingPrice(sellingprice);
                log.warning("updatemrp here stockMasterVo2 batchNo : " + stockMasterVo2.getBatchNo());
                stockMasterPriceActivityLog(stockMasterPriceList, stockMasterVo2, session);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return "success";
        } catch (Exception e) {
            e.printStackTrace();
            return "fail";
        }
    }

    @PostMapping("/generate/barcodeseries")
    @ResponseBody
    public BarcodeDataDTO barcodeseries(HttpSession session) {
        BarcodeDataDTO mv = new BarcodeDataDTO();

//         if (Long.parseLong(session.getAttribute("companyId").toString()) == 202) {
//             CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                     Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//             log.info("barcodeseriesssssss" + barcodeSeries.getValue());
//             mv.setBarcodeseries(barcodeSeries.getAddValue());
//         }
//         if (Long.parseLong(session.getAttribute("companyId").toString()) == 415) {
//             CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                     Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//             log.info("barcodeseriesssssss" + barcodeSeries.getValue());
//             mv.setBarcodeseries(barcodeSeries.getAddValue());
//         }
//
//         if (Long.parseLong(session.getAttribute("companyId").toString()) == 436) {
//             CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
//                     Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
//             log.info("barcodeseriesssssss" + barcodeSeries.getValue());
//             mv.setBarcodeseries( barcodeSeries.getAddValue());
//         }

        CompanySettingVo barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEGENRATESERIESWISE);
        if (barcodegenrateserieswise != null) {
            if (barcodegenrateserieswise.getValue() == 1) {
                CompanySettingVo barcodemanage = companySettingService.findByCompanyIdAndType(
                        Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEMANAGE);
                if (barcodemanage != null && barcodemanage.getValue() == 2) {
                    try {
                        CompanySettingVo barcodeSeries = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODESERIES);
                        CompanySettingVo barcodeprefix = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODEPREFIX);
                        CompanySettingVo barcodelength = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BARCODELENGTH);
                        mv.setBarcodeseries(barcodeSeries.getAddValue());
                        mv.setBarcodeprefix(barcodeprefix.getAddValue());
                        mv.setBarcodegenrateserieswise("1");
                        mv.setBarcodelength("" + barcodelength.getValue());
                    } catch (Exception e) {
                        // TODO: handle exception
                    }

                } else if (barcodemanage != null && barcodemanage.getValue() == 3) {
                    try {
                        CompanySettingVo barcodeSeries = companySettingService.findByBranchIdAndType(
                                Long.parseLong(session.getAttribute("branchId").toString()), Constant.BARCODESERIES);
                        CompanySettingVo barcodeprefix = companySettingService.findByBranchIdAndType(
                                Long.parseLong(session.getAttribute("branchId").toString()), Constant.BARCODEPREFIX);
                        CompanySettingVo barcodelength = companySettingService.findByBranchIdAndType(
                                Long.parseLong(session.getAttribute("branchId").toString()), Constant.BARCODELENGTH);
                        mv.setBarcodeseries(barcodeSeries.getAddValue());
                        mv.setBarcodeprefix(barcodeprefix.getAddValue());
                        mv.setBarcodegenrateserieswise("1");
                        mv.setBarcodelength("" + barcodelength.getValue());
                    } catch (Exception e) {
                        // TODO: handle exception
                    }
                }
            }
        }
        return mv;

    }

    @GetMapping("/barcode")
    public ModelAndView generateBarcode(HttpSession session) {
        ModelAndView view = new ModelAndView("product/generate-barcode");
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.VIEW) == 1) {
            // view.addObject("ProductList",productService.findByCompanyIdAndIsDeleted(Long.parseLong(session.getAttribute("companyId").toString()),
            // 0));
//            List<BarcodeMasterSettingVo> barcodesetting = barcodeMasterSettingRepository
//                    .findByCompanyIdOrderByBarcodeMasterVoBarcodeIdAsc(Long.parseLong(session.getAttribute("companyId").toString()));

            List<BarcodeMasterDTO> barcodesetting = barcodeMasterSettingRepository
                    .findBarcodeDetailByCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));

            // log.warning("Size: " + barcodesetting.size());

            view.addObject("barcodesetting", barcodesetting);
        } else {
            view.setViewName("accessdenied/accessdenied");
        }
        return view;
    }

    @PostMapping("/generate-barcode/barcode/{size}")
    public void multipleBarcode(@PathVariable String size, @RequestParam Map<String, String> allRequestParams,
                                HttpSession session, HttpServletRequest request, HttpServletResponse response) throws ParseException {

        // log.info("ProductOIDSSSSSSSS=-=-=-"+allRequestParams.get("productId"));

        List<String> ids = Arrays.asList(allRequestParams.get("productvarientIds").split(","));

        List<String> qty = Arrays.asList(allRequestParams.get("qtys").split(","));

        List<String> qtys = qty.stream().collect(Collectors.toList());
        // log.info(qtys.toString());

        List<String> productVariantids = ids.stream().collect(Collectors.toList());

        // log.info(productVariantids.toString());
        jasperParameter = new HashMap();
        jasperParameter.put("logoserver", FILE_UPLOAD_SERVER);
        jasperParameter.put("company_id", Long.parseLong(session.getAttribute("companyId").toString()));
        jasperParameter.put("branch_id", Long.parseLong(session.getAttribute("branchId").toString()));

        /*
         * if(!request.getParameter("from_barcode_no").equals("") &&
         * !(request.getParameter("from_barcode_no")==null) &&
         * !request.getParameter("to_barcode_no").equals("") &&
         * !(request.getParameter("to_barcode_no")==null))
         */
        String ss = CurrentDateTime.getTodayDate();
        // DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        // jasperParameter.put("packingDate",
        // dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))));
        jasperParameter.put("pkgdate", ss);
        jasperParameter.put("qty", 2);
        long blankNo = 0;
        if (StringUtils.isNotBlank(allRequestParams.get("blankNo"))) {
            try {
                blankNo = Long.parseLong(allRequestParams.get("blankNo"));
            } catch (NumberFormatException ne) {
                ne.printStackTrace();
                // log.severe("NumberFormatException parsing error :"+ne.getMessage());
            }

        }
        jasperParameter.put("currency_code", session.getAttribute("currencyCode").toString());
        jasperParameter.put("blank_no", blankNo);
        jasperParameter.put("product_id", productVariantids);
        jasperParameter.put("from_barcode_no", "");
        jasperParameter.put("to_barcode_no", "");
        jasperParameter.put("price_type", allRequestParams.get("contactType"));
        jasperParameter.put("path", JASPER_REPORT_PATH + System.getProperty("file.separator"));

        try {
            if (size.equals("5050")) {
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                jasperParameter.put("mfg", dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))));
                String days = ""; /* productVos.get(0).getExpirationdays(); */
                if (StringUtils.isNotBlank(days)) {
                    Calendar c = Calendar.getInstance();
                    c.setTime(dateFormat.parse(allRequestParams.get("expirationDays")));
                    c.add(Calendar.DATE, Integer.parseInt(days));
                    jasperParameter.put("exp", dateFormat.format(c.getTime()) + "");

                } else {
                    jasperParameter.put("exp",
                            dateFormat.format(dateFormat.parse(allRequestParams.get("expirationDays"))) + "");
                }
                jasperExporter.jasperExporterPDF(jasperParameter, JASPER_REPORT_PATH
                                // + System.getProperty("file.separator") +
                                // "/product/barcode_50_50_product.jrxml",
                                + System.getProperty("file.separator") + "/product/barcode_a4_50_50-2L.jrxml", "barcode",
                        response);
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        /**/

    }

    @PostMapping("/updatemrp")
    @ResponseBody
    public String updateMRP(@RequestParam("stockId") long stockId, @RequestParam("mrp") double mrp,
                            HttpSession session) {

        StockMasterVo stockMasterVo = stockMasterService.findByStockId(stockId);

        List<StockMasterPriceDTO> stockMasterPriceList = new ArrayList<>();
        try {
            stockMasterPriceList = stockMasterRepository.getBatchPriceDTOByStockId(stockId);
        } catch (Exception e) {
            e.printStackTrace();
        }
        log.warning("stockMasterPriceList.size() : " + stockMasterPriceList.size());
        if (stockMasterVo.getProductVarientsVo().getProductVo().getIsExpiryManage() == 1) {
            int check = stockMasterRepository.findByduplicateBatch(
                    stockMasterVo.getProductVarientsVo().getProductVarientId(),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    session.getAttribute("financialYear").toString(), stockMasterVo.getLandingCost(),
                    stockMasterVo.getExpirationDate(), stockMasterVo.getManufactureDate(), mrp);
            if (check == 0) {
//					 stockMasterService.updateMRP(stockId,mrp);
//	         		 return "success";

            } else {
                return "Duplicate Batch Found! MRP Can not Update";
            }
        }

        List<StockMasterVo> stockMasterVos = stockMasterService.findByduplicateBatch(
                stockMasterVo.getProductVarientsVo().getProductVarientId(),
                Long.parseLong(session.getAttribute("branchId").toString()),
                session.getAttribute("financialYear").toString(), stockMasterVo.getLandingCost(), mrp);

        if (stockMasterVos.size() == 0) {

            String batchNoNew = "";

            try {
                stockMasterService.updateMRP(stockId, mrp);
                try {
                    if (session.getAttribute("userType").toString().equals("2")) {
                        CompanySettingVo franchisenewflow = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()),
                                Constant.FRANCHISENEWFLOW);
                        CompanySettingVo batchDisable = companySettingService.findByCompanyIdAndType(
                                Long.parseLong(session.getAttribute("companyId").toString()), Constant.BATCHDISABLE);
                        if (franchisenewflow.getValue() == 1 && !productVariantRepository
                                .getisbatchmanage(stockMasterPriceList.get(0).getProductVarientId())) {
                            stockMasterService.updateMRPInBranch(mrp, stockId,
                                    session.getAttribute("financialYear").toString());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    StockMasterVo stockMasterVo2 = stockMasterService.findByStockId(stockId);
                    stockMasterVo2.setMrp(mrp);
                    log.warning("updatemrp here");
                    String batchNo = stockMasterVo2.getBatchNo();
//	 		    	 Date expiryDate = stockMasterVo2.getExpirationDate();
                    SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                    String strDate = "";

                    log.warning("updatemrp here  batch no : " + batchNo);

                    if (stockMasterVo2.getProductVarientsVo().getProductVo().getIsExpiryManage() == 1) {
                        strDate = formatter.format(stockMasterVo2.getExpirationDate());
                        batchNoNew = ("B" + stockMasterVo2.getProductVarientsVo().getProductVarientId()
                                + new DecimalFormat("#.###").format(stockMasterVo2.getLandingCost())
                                + new DecimalFormat("#.###").format(mrp) + strDate);
                    } else {
                        batchNoNew = ("B" + stockMasterVo2.getProductVarientsVo().getProductVarientId()
                                + new DecimalFormat("#.###").format(stockMasterVo2.getLandingCost())
                                + new DecimalFormat("#.###").format(mrp));
                    }
                    log.warning("updatemrp here  batchNo : " + batchNo);
                    log.warning("updatemrp here  batchNoNew : " + batchNoNew);

//	 		    	stockMasterVo2.setBatchNo(batchNoNew);
                    stockMasterRepository.updateBatchNoByStockId(stockMasterVo2.getStockId(), batchNoNew);

                    log.warning("stockMasterVo2.getBatchNo() : " + stockMasterVo2.getBatchNo());
                    log.warning("stockMasterPriceList.size() : " + stockMasterPriceList.size());
                    stockMasterPriceActivityLog(stockMasterPriceList, stockMasterVo2, session);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                return "success";
//	 		      return "{ \"valid\": \"true\",\"batchNo\":\""+batchNoNew+"\" }";
            } catch (Exception e) {
                e.printStackTrace();
                return "Something Went Wrong!!";
// 		        	return "{ \"valid\": \"false\",\"message\":\"Something Went Wrong!!\" }";
            }
        } else {
            return "Duplicate Batch Found! MRP Can not Update";
// 			 return "{ \"valid\": \"false\",\"message\":\"Duplicate Batch Found! MRP Can not Update\" }";
        }
    }

    @RequestMapping("/garment/new/json")
    @ResponseBody
    public ProductVo productData(@RequestParam("barcode") long productId,
                                 @RequestParam(name = "contactId", defaultValue = "0", required = false) long contactId,
                                 HttpSession session) {
        // ProductVo productVo = productService.findByProductId(productId);
        ProductVo productVo = productService.findByProductIdAndCompanyIdAndIsDeleted(productId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0);
        if (productVo == null)
            return null;
        productVo.setWholesalerPrice(productVo.getProductVarientsVos().get(0).getWholesalerPrice());
        productVo.setRetailerPrice(productVo.getProductVarientsVos().get(0).getRetailerPrice());
        productVo.setPurchasePrice(productVo.getProductVarientsVos().get(0).getPurchasePrice());
        CompanySettingVo ALLOWCUSTOMERWISEPRODUCTMAPPING = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWCUSTOMERWISEPRODUCTMAPPING);
        if (ALLOWCUSTOMERWISEPRODUCTMAPPING.getValue() == 1) {
            log.warning(
                    "productVarientId ---------->" + productVo.getProductVarientsVos().get(0).getProductVarientId());
            long productVarientId = productVo.getProductVarientsVos().get(0).getProductVarientId();
            ContactProductVo product = contactProductRepository.findByProductVarientIdAndContactId(productVarientId,
                    contactId);
            if (product != null) {
                productVo.setMappingMrp(product.getPrice());
                productVo.setIsCustomerMapping(1);

            }
        }
        productVo.setProductVarientsVos(null);
        productVo.setProductAttributeVos(null);
        return productVo;
    }

    @PostMapping(value = "/openingstock/check/excel")
    @ResponseBody
    public ProductSheetUploadFinalDTO oprningstockCheckProduct(@RequestParam("updateExcelFile") MultipartFile file,
                                                               HttpSession session, HttpServletRequest request, HttpServletResponse response) throws IOException {
        FileValidationResponse fileValidationResponse = securityValidation.validateFile(file, Constant.FILE_EXCEL);
        if (!fileValidationResponse.isValid()) {
            List<ProductWrongSheetDTO> wrongSheetDTO = new ArrayList<ProductWrongSheetDTO>();
            return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + 0), wrongSheetDTO.size(),
                    fileValidationResponse.getMessage(), false);
        } else {
            File fb = ImageResize.convert(file);
            String filepath = fb.getAbsolutePath();
            session.setAttribute("filepath", filepath);
            return checkSheetOpeningStock(request, response, session);
        }
    }

    public ProductSheetUploadFinalDTO checkSheetOpeningStock(HttpServletRequest request, HttpServletResponse response,
                                                             HttpSession session) throws IOException {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        int decimalNumber = 2;
        try {
            decimalNumber = Integer.parseInt(session.getAttribute("decimalPoint").toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        String name = "";
        boolean result = true;
        String filepath = (String) session.getAttribute("filepath");
        DataFormatter formatter = new DataFormatter();
        File fb = new File(filepath);
        InputStream in = new FileInputStream(fb);
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        XSSFSheet sheet = workbook.getSheetAt(0);

        System.out.println("Company id : ----------------------"+Long.parseLong(session.getAttribute("companyId").toString()));
        CompanySettingVo limit = companySettingService.findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()), Constant.SHEETLIMIT);
        CompanySettingVo isUmoWiseDecimalRestrictionStopped = companySettingService.findByCompanyIdAndType(
                Long.parseLong(session.getAttribute("companyId").toString()), Constant.STOPUMOWISEDECIMAL);
        Iterator<Row> rowIterator = sheet.iterator();
        long rowTotal = sheet.getLastRowNum();
        totalRow = rowTotal;
        System.err.println("rowTotal" + rowTotal);
        Row row1 = rowIterator.next();
        List<ProductWrongSheetDTO> wrongSheetDTO = new ArrayList<ProductWrongSheetDTO>();
        if (rowTotal > limit.getValue()) {
            result = false;
            rowNumber = "";
            rowNumber = "Only " + limit.getValue() + " product can be upload at a time";
            return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal), wrongSheetDTO.size(),
                    "Only " + limit.getValue() + " product can be upload at a time", false);
        }
        if (rowTotal == 0) {
            result = false;
            rowNumber = "";
            rowNumber = "Please enter data in the sheet";
            return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal), wrongSheetDTO.size(),
                    "Please enter data in the sheet", false);
        }

        if (row1.getCell(0) != null && row1.getCell(0).getStringCellValue().trim() != "") {
            if (!row1.getCell(0).getStringCellValue().trim().equals("Item Code")) {
                result = false;
                rowNumber += "column Not find Wrong Sheet";
                return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal),
                        wrongSheetDTO.size(), "column Not find Wrong Sheet", false);
            }
        } else {
            result = false;
            rowNumber += "column Not find Wrong Sheet";
            return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal), wrongSheetDTO.size(),
                    "column Not find Wrong Sheet", false);
        }

        List<ProductOpeningStockDTO> itemcodelist = new ArrayList<>();
        List<String> categoryNameList = new ArrayList<>();
        List<String> departmentList = new ArrayList<>();
        List<BrandVo> brandList = new ArrayList<>();
        itemcodelist = productService.findProductDetailsForOpeningStock(
                Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
        String productVarientId = "";
        if (result == true) {
            int i = 2;
//			List<String> producttypelist = new ArrayList<>();
//			producttypelist = productTypeRepository.findListOfData();
            while (rowIterator.hasNext()) {
                Boolean checkIssue = false;
                String reason = "";
                Row row = rowIterator.next();
                Iterator<Cell> cellIterator = row.cellIterator();

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    if (cell.getColumnIndex() != 6) {
                        cell.setCellValue(formatter.formatCellValue(cell));
                        cell.setCellType(Cell.CELL_TYPE_STRING);
                    }
                }
                List<ProductVarientsVo> productVarient = new ArrayList<>();
                List<ProductOpeningStockDTO> exist = new ArrayList<ProductOpeningStockDTO>();
                try {
                    if (row.getCell(0) != null && row.getCell(0).getStringCellValue().trim() != "") {
                        productVarientId = productService.findProductVarientIdByItemCode(
                                Long.parseLong(session.getAttribute("companyId").toString()),
                                row.getCell(0).getStringCellValue().trim());
                        exist = itemcodelist.stream()
                                .filter(e -> e.getItemCode().equals(row.getCell(0).getStringCellValue().trim()))
                                .collect(Collectors.toList());
                        if (CollectionUtils.isEmpty(exist)) {
                            result = false;
                            checkIssue = true;
                            rowNumber += "(" + i + ",A)-";
                            reason += "(Item code does not exists)-";
                        }
                    } else {
                        result = false;
                        checkIssue = true;
                        rowNumber += "(" + i + ",A)-";
                        reason += "(Item Code Is Required)-";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(1) != null && row.getCell(1).getStringCellValue().trim() != "") {
                        if (!RegexTest.validateDouble(row.getCell(1).getStringCellValue().trim(), decimalNumber)) {
                            checkIssue = true;
                            result = false;
                            rowNumber += "(" + i + ",B)-";
                            reason += "(Qty is InValid)-";
                        } else {
                            boolean isValidDecimal = productService.isValidDecimalQty(
                                    StringUtils.isNotBlank(productVarientId) ? Long.parseLong(productVarientId) : 0,
                                    row.getCell(3).getStringCellValue().trim(),
                                    isUmoWiseDecimalRestrictionStopped.getValue());
                            if (!isValidDecimal) {
                                result = false;
                                checkIssue = true;
                                rowNumber += "(" + i + ",B)-";
                                reason += "(The number of decimal places in In Qty has been reached)-";
                            }
                        }
                    } else {
                        checkIssue = true;
                        result = false;
                        rowNumber += "(" + i + ",B)-";
                        reason += "(Qty is Required)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    if (row.getCell(2) != null && row.getCell(2).getStringCellValue().trim() != "") {
                        if (RegexTest.validateDouble(row.getCell(2).getStringCellValue().trim(), decimalNumber)) {
                            if (row.getCell(3) != null && row.getCell(1).getStringCellValue().trim() != "") {
                                if (RegexTest.validateDouble(row.getCell(1).getStringCellValue().trim(),
                                        decimalNumber)) {
                                    if (row.getCell(1).getStringCellValue().trim().toString().equals("0")
                                            && row.getCell(2).getStringCellValue().trim().toString().equals("0")) {
                                        checkIssue = true;
                                        result = false;
                                        rowNumber += "(" + i + ",B Or C)-";
                                        reason += "(Need One column Qty)-";
                                    } else if (row.getCell(1).getStringCellValue().trim().toString().equals("0")
                                            || row.getCell(2).getStringCellValue().trim().toString().equals("0")) {

                                    } else {
                                        checkIssue = true;
                                        result = false;
                                        rowNumber += "(" + i + ",B Or C)-";
                                        reason += "(Need One column Zero Qty)-";
                                    }
                                }
                            }
                            boolean isValidDecimal = productService.isValidDecimalQty(
                                    StringUtils.isNotBlank(productVarientId) ? Long.parseLong(productVarientId) : 0,
                                    row.getCell(2).getStringCellValue().trim(),
                                    isUmoWiseDecimalRestrictionStopped.getValue());
                            if (!isValidDecimal) {
                                result = false;
                                checkIssue = true;
                                rowNumber += "(" + i + ",C)-";
                                reason += "(The number of decimal places in Out Qty has been reached)-";
                            }
                        } else {
                            checkIssue = true;
                            result = false;
                            rowNumber += "(" + i + ",C)-";
                            reason += "(Qty is InValid)-";
                        }
                    } else {
                        checkIssue = true;
                        result = false;
                        rowNumber += "(" + i + ",C)-";
                        reason += "(Qty is Required)-";
                    }
                    List<WarehouseVo> warehouseVos = warehouseService.getAllWarehouseAndCompanyWarehouseByIsDeleted(0, Long.parseLong(session.getAttribute("branchId").toString()));
                    List<WarehouseVo> collect = new ArrayList<>();
                    if (!warehouseVos.isEmpty()) {
                        if (row.getCell(3) != null && row.getCell(3).getStringCellValue().trim() != "") {
                            collect = warehouseVos.stream().filter(item -> item.getWarehouseCode().equals(row.getCell(3).getStringCellValue().trim())).collect(Collectors.toList());
                            if (collect.isEmpty()) {
                                result = false;
                                checkIssue = true;
                                rowNumber += "(" + i + ",D)-";
                                reason += "(Warehouse code does not exists)-";
                            }
                        } else {
                            result = false;
                            checkIssue = true;
                            rowNumber += "(" + i + ",D)-";
                            reason += "(Warehouse Code Is Required)-";
                        }
                    }
                    List<RackVo> rackVoList = rackService.getAll();
                    if (row.getCell(4) != null && row.getCell(4).getStringCellValue().trim() != "") {
                        List<RackVo> rackCollect = rackVoList.stream().filter(item -> item.getRackCode().equals(row.getCell(4).getStringCellValue().trim())).collect(Collectors.toList());
                        if (rackCollect.isEmpty()) {
                            result = false;
                            checkIssue = true;
                            rowNumber += "(" + i + ",E)-";
                            reason += "(Rack code does not exist)-";
                        } else {
                            if (!collect.isEmpty()) {
                                List<RackVo> rackVos = rackService.getRackCodeByWarehouseId(collect.get(0).getWarehouseId());
                                List<RackVo> associateRack = rackVos.stream().filter(item -> item.getRackCode().equals(row.getCell(4).getStringCellValue().trim())).collect(Collectors.toList());
                                if (associateRack.isEmpty()) {
                                    result = false;
                                    checkIssue = true;
                                    rowNumber += "(" + i + ",E)-";
                                    reason += "(Rack code  is not associated with Warehouse)-";
                                }
                            }
                        }
                    } else {
                        result = false;
                        checkIssue = true;
                        rowNumber += "(" + i + ",A)-";
                        reason += "(Rack Code Is Required)-";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (checkIssue) {
                    wrongSheetDTO.add(new ProductWrongSheetDTO(reason, row.getRowNum(), i));
                }
                i++;
            }
        }
        workbook.close();
        in.close();
        session.setAttribute("Wrongsheet", wrongSheetDTO);
        log.info("Final Result----------->" + result);
        return new ProductSheetUploadFinalDTO(wrongSheetDTO, Integer.parseInt("" + rowTotal), wrongSheetDTO.size(),
                "All Data Not Valid", true);
    }

    @RequestMapping(value = "/openingstock/upload/excel/{flag}")
    @ResponseBody
    public String oprningstockImportStock(HttpSession session, HttpServletRequest request,
                                          @PathVariable("flag") int flag) throws IOException, ParseException {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        double purchasePrice = 0.0, landingcost = 0.0;
        int decimalNumber = 2;
        try {
            decimalNumber = Integer.parseInt(session.getAttribute("decimalPoint").toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        String filepath = (String) session.getAttribute("filepath");
        File fb = new File(filepath);
        log.info("update bulck upload");
        InputStream in = new FileInputStream(fb);
        List<ProductWrongSheetDTO> wrongSheetDTO = (List<ProductWrongSheetDTO>) session.getAttribute("Wrongsheet");
        String[] columns1 = {"Item Code", "MRP", "Purchase Price", "In Qty", "Out Qty", "Date Type(EXP/MFG)",
                "EXP/MFG Date(DD-MM-YYYY)", "Reason"};
        Workbook workbooksheet = new XSSFWorkbook();
        Instant instant = Instant.now();
        String filename = "Bug_Opening_Stock(" + session.getAttribute("companyId").toString() + ")"
                + instant.getEpochSecond();
        Sheet sheetwrong = workbooksheet.createSheet(filename);

        Font headerFont = workbooksheet.createFont();
        headerFont.setBold(true);
        headerFont.setFontHeightInPoints((short) 14);
        headerFont.setColor(IndexedColors.RED.getIndex());
        CellStyle headerCellStyle = workbooksheet.createCellStyle();
        headerCellStyle.setFont(headerFont);
        int endrowNo = columns1.length - 1;

        Row headerRow = sheetwrong.createRow(0);
        for (int i = 0; i < columns1.length; i++) {

            Cell cell = headerRow.createCell(i);
            cell.setCellValue(columns1[i]);
            cell.setCellStyle(headerCellStyle);

        }

        int rowNumWrong = 1;

        // Create Workbook instance holding reference to .xlsx file
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        // Get first/desired sheet from the workbook
        XSSFSheet sheet = workbook.getSheetAt(0);
        List<Integer> wrongno = new ArrayList<Integer>();
        if (wrongSheetDTO != null) {
            wrongno = wrongSheetDTO.stream().map(ProductWrongSheetDTO::getRowno).collect(Collectors.toList());
        }
        List<ProductOpeningUploadStockDTO> allProductMultiBarcode = new ArrayList<>();
        allProductMultiBarcode = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(
                Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
        // Iterate through each rows one by one  findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted
        Iterator<Row> rowIterator = sheet.iterator();
        rowIterator.next();
        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            if (flag == 1) {
                boolean exist = wrongno.contains(row.getRowNum()) ? true : false;
                if (exist) {
                    Row rowwrong = sheetwrong.createRow(rowNumWrong++);
                    Iterator<Cell> cellIterator = row.cellIterator();
                    log.info("ROWSS::::" + row.getRowNum());
                    for (int i = 0; i <= Constant.OPENINGSTOCKSHEETREASON; i++) {
                        log.info("calllll--------" + i);
                        Cell oldCell = row.getCell(i);
                        Cell newCell = rowwrong.createCell(i);
                        log.info("call reasondata" + i);
                        if (i == endrowNo) {
                            log.info("call reason");
                            for (int j = 0; j < wrongSheetDTO.size(); j++) {
                                log.info("call reason" + j);
                                if (row.getRowNum() == wrongSheetDTO.get(j).getRowno()) {
                                    newCell.setCellValue(wrongSheetDTO.get(j).getReason());
                                }
                            }
                        }
                        // If the old cell is null jump to next cell
                        if (oldCell == null) {
                            newCell = null;
                            continue;
                        }
                        if (i != endrowNo) {
                            newCell.setCellType(oldCell.getCellType());
                            switch (oldCell.getCellType()) {
                                case Cell.CELL_TYPE_BLANK:
                                    break;
                                case Cell.CELL_TYPE_BOOLEAN:
                                    newCell.setCellValue(oldCell.getBooleanCellValue());
                                    break;
                                case Cell.CELL_TYPE_ERROR:
                                    newCell.setCellErrorValue(oldCell.getErrorCellValue());
                                    break;
                                case Cell.CELL_TYPE_FORMULA:
                                    newCell.setCellFormula(oldCell.getCellFormula());
                                    break;
                                case Cell.CELL_TYPE_NUMERIC:
                                    newCell.setCellValue(oldCell.getNumericCellValue());
                                    break;
                                case Cell.CELL_TYPE_STRING:
                                    newCell.setCellValue(oldCell.getRichStringCellValue());
                                    break;
                            }
                        }
                    }
                    continue;
                }
            }

            // For each row, iterate through all the columns
            Iterator<Cell> cellIterator = row.cellIterator();

            while (cellIterator.hasNext()) {
                Cell cell = cellIterator.next();
                // Check the cell type and format accordingly

                if (cell.getColumnIndex() != 6) {
                    cell.setCellType(Cell.CELL_TYPE_STRING);
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_BOOLEAN:

                            log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
                            break;
                        case Cell.CELL_TYPE_NUMERIC:

                            break;
                        case Cell.CELL_TYPE_STRING:

                            // list.add(cell.getStringCellValue().trim());
                            break;
                    }
                }
            }
            List<ProductOpeningUploadStockDTO> openingUploadStockDto = new ArrayList<>();
            openingUploadStockDto = allProductMultiBarcode.stream()
                    .filter(e -> e.getItemCode().equals(row.getCell(0).getStringCellValue().trim()))
                    .collect(Collectors.toList());

            if (!openingUploadStockDto.isEmpty()) {
                if (row.getCell(1) != null && row.getCell(1).getStringCellValue().trim() != null
                        && !row.getCell(1).getStringCellValue().trim().equals("") && row.getCell(2) != null
                        && row.getCell(2).getStringCellValue().trim() != null
                        && !row.getCell(2).getStringCellValue().trim().equals("")) {
                    List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();

                    List<ProductMultiBarcodeVo> barcodeList = productService.findMultiBarcodeByItemCodeAndCompanyIdAndIsDeleted(row.getCell(0).getStringCellValue().trim(), Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
                    if (!barcodeList.isEmpty()) {
                        StockTransactionVo stockTransactionVo = new StockTransactionVo();
                        stockTransactionVo.setMrp(barcodeList.get(0).getMrp());
                        stockTransactionVo.setProductMultiBarcodeVo(barcodeList.get(0));
                        stockTransactionVo.setDesignNo(barcodeList.get(0).getDesignNo());
                        purchasePrice = barcodeList.get(0).getStdRate();
                        if (openingUploadStockDto.get(0).getPurchaseTaxIncluded() == 1) {
                            landingcost = purchasePrice;
                            try {
                                purchasePrice = round((purchasePrice / ((openingUploadStockDto.get(0).getTaxRate() + 100) / 100)),
                                        decimalNumber);
                            } catch (Exception e) {
                                purchasePrice = 0;
                            }
                        } else {
                            landingcost = round(
                                    purchasePrice + ((purchasePrice * openingUploadStockDto.get(0).getTaxRate()) / 100),
                                    decimalNumber);
                        }
                        stockTransactionVo.setLandingCost(landingcost);
                        /*List<StockMasterVo> stockMasterVos = stockMasterService.findByProductVarientAndProductMultiBarcodeAndWarehouseIdAndRackIdAndCompanyIdAndYearInterval(barcodeList.get(0).getProductVarientId(),
                                barcodeList.get(0).getProductMultiBarcodeId(), warehouseVo.getWarehouseId(), rackVo.getRackId(), Long.parseLong(session.getAttribute("companyId").toString()), session.getAttribute("financialYear").toString());
                        if (stockMasterVos != null && !stockMasterVos.isEmpty()) {
                            stockTransactionVo.setBatchNo(stockMasterVos.get(0).getBatchNo());
                            stockTransactionVo.setBatchId(stockMasterVos.get(0).getStockId());
                        } else {
                            stockTransactionVo.setBatchNo("B" + barcodeList.get(0).getProductMultiBarcodeId()
                                    + new DecimalFormat("#.###").format(landingcost)
                                    + new DecimalFormat("#.###").format(barcodeList.get(0).getMrp()));
                        }*/


                        stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                        stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                        stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                        stockTransactionVo.setDescription("Opening Stock");

                        stockTransactionVo.setInQuantity(Double.parseDouble(row.getCell(1).getStringCellValue().trim()));
                        stockTransactionVo.setOutQuantity(Double.parseDouble(row.getCell(2).getStringCellValue().trim()));
                        WarehouseVo warehouseVo = warehouseService.findByWarehouseCode(row.getCell(3).getStringCellValue().trim());
                        if (warehouseVo != null) {
                            stockTransactionVo.setWarehouseId(warehouseVo.getWarehouseId());
                        }
                        RackVo rackVo = rackService.findByRackCode(row.getCell(4).getStringCellValue().trim());
                        if (rackVo != null) {
                            stockTransactionVo.setRackId(rackVo.getRackId());
                        }

                        stockTransactionVo.setProductPrice(purchasePrice);
                        double sellingPrice = 0.0;
                        if (openingUploadStockDto.get(0) != null) {
                            if (openingUploadStockDto.get(0).getDiscountType().equals("percentage")) {
                                sellingPrice = stockTransactionVo.getMrp()
                                        - (stockTransactionVo.getMrp() * openingUploadStockDto.get(0).getDiscount() / 100);
                            } else {
                                sellingPrice = stockTransactionVo.getMrp() - openingUploadStockDto.get(0).getDiscount();
                            }
                        }

                        stockTransactionVo.setSellingPrice(sellingPrice);
                        ProductVarientsVo productVarientsVo1 = new ProductVarientsVo();
                        productVarientsVo1.setProductVarientId(openingUploadStockDto.get(0).getProductVarientId());
                        stockTransactionVo.setProductVarientsVo(productVarientsVo1);
                        DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");
                        try {
                            stockTransactionVo.setStockTransactionDate(
                                    dateFormat3.parse(session.getAttribute("firstDateFinancialYear").toString()));
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }
                        stockTransactionVo.setType("new");
                        stockTransactionVo.setTypeId(openingUploadStockDto.get(0).getProductVarientId());
                        stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());

                        int isExpiry = productRepository.findExpiryStatusOnCompanyIdAndItemCode(
                                Long.parseLong(session.getAttribute("companyId").toString()),
                                row.getCell(0).getStringCellValue().trim());
                        if (isExpiry == 1) {
                            int days = productRepository.findExpiryDaysOnCompanyIdAndItemCode(
                                    Long.parseLong(session.getAttribute("companyId").toString()),
                                    row.getCell(0).getStringCellValue().trim());
                            Date dob = new SimpleDateFormat("dd-MM-yyyy").parse(row.getCell(6).getStringCellValue().trim());
                            Calendar c = Calendar.getInstance();
                            c.setTime(dob);

                            String cellValue = row.getCell(5).getStringCellValue().trim();
                            stockTransactionVo.setExpirationManage(1);

                            SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                            String strDate = "";

                            if (cellValue.equalsIgnoreCase("MFG")) {
                                stockTransactionVo.setManufactureDate(c.getTime());
                                c.add(Calendar.DATE, days);
                                stockTransactionVo.setExpirationDate(c.getTime());
                                strDate = formatter.format(c.getTime());
                            } else {
                                stockTransactionVo.setExpirationDate(c.getTime());
                                strDate = formatter.format(c.getTime());
                                c.add(Calendar.DATE, -days);
                                stockTransactionVo.setManufactureDate(c.getTime());
                            }
                        }
                        if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                            stockTransactionVos.add(stockTransactionVo);
                        }
                    }
                    stockTransactionService.saveOpeningStock(stockTransactionVos);
                }
            }
        }
        in.close();
        String filepath1 = "";
        if (flag == 1) {
            FileOutputStream fileOut = new FileOutputStream(request.getServletContext().getRealPath("/") + "pospdf"
                    + System.getProperty("file.separator") + filename + ".xlsx");
            workbooksheet.write(fileOut);
            System.err.println("Excel complete-----");
            String filePathToBeServed = request.getServletContext().getRealPath("/") + "pospdf"
                    + System.getProperty("file.separator") + filename + ".xlsx"; // complete file name with path;
            filepath1 = filename + ".xlsx";
            File fileToDownload = new File(filePathToBeServed);
            InputStream inputStream = new FileInputStream(fileToDownload);
            inputStream.close();
            fileOut.close();
            workbooksheet.close();
            try {
                fileDeletion.scheduleForDeletion(Paths.get(filePathToBeServed), 30);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return "{ \"valid\": true,\"path\":\"" + filepath1 + "\" }";
    }

//	@RequestMapping(value = "/openingstock/check/excel")
//    @ResponseBody
//    public Map<String, Object> oprningstockCheckProduct(@RequestParam("updateExcelFile") MultipartFile file,
//                                                      HttpSession session, HttpServletRequest request, HttpServletResponse response) throws IOException {
//    	HashMap<String, Object> map = new HashMap<String, Object>();
//    	FileValidationResponse fileValidationResponse = securityValidation.validateFile(file, Constant.FILE_EXCEL);
//    	if(!fileValidationResponse.isValid()) {
//    	    map.put("msg", fileValidationResponse.getMessage());
//    	    return map;
//    	} else {
//    		File fb = ImageResize.convert(file);
//            log.info(fb.getName());
//            log.info(fb.getAbsolutePath());
//            String filepath = fb.getAbsolutePath();
//            session.setAttribute("filepath", filepath);
//            rowNumber = "";
//            if (checkSheetOpeningStock(request, response, session)) {
//
//                map.put("msg", "success");
//                return map;
//            } else {
//                //System.err.println("There are some error in following Cell Number --> " + rowNumber);
//                map.put("msg", "There are some error in following Cell Number --> " + rowNumber);
//                return map;
//            }
//    	}
//
//    }

    // public boolean checkSheetOpeningStock(HttpServletRequest request,
    // HttpServletResponse response, HttpSession session)
//            throws IOException {
//    	 long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
//         String clusterId = session.getAttribute("clusterId").toString();
//
//         CompanySettingVo limit=  companySettingService.findByCompanyIdAndType(0, Constant.SHEETLIMIT);
//        String name = "";
//        boolean result = true;
//        List<ProductOpeningStockDTO> itemcodelist = new ArrayList<>();
//        List<String> categoryNameList = new ArrayList<>();
//        List<String> departmentList = new ArrayList<>();
//        List<BrandVo> brandList = new ArrayList<>();
//        String filepath = (String) session.getAttribute("filepath");
//        File fb = new File(filepath);
//        InputStream in = new FileInputStream(fb);
//        XSSFWorkbook workbook = new XSSFWorkbook(in);
//        XSSFSheet sheet = workbook.getSheetAt(0);
//        itemcodelist = productService.findProductDetailsForOpeningStock(Long.parseLong(session.getAttribute("companyId").toString()),merchantTypeId,clusterId);
//        Iterator<Row> rowIterator = sheet.iterator();
//        int decimalNumber=2;
//        try {
//        	decimalNumber=Integer.parseInt(session.getAttribute("decimalPoint").toString());
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//
//        Row row1 = rowIterator.next();
//        DataFormatter formatter = new DataFormatter();
//        long rowTotal = sheet.getLastRowNum();
//        if(rowTotal >limit.getValue()) {
//            result = false;
//            rowNumber="";
//               rowNumber = "Only "+limit.getValue()+" product can be upload at a time";
//           }
//
//        if (row1.getCell(0) != null && row1.getCell(0).getStringCellValue().trim() != "") {
//
//            if (!row1.getCell(0).getStringCellValue().trim().equals("Item Code")) {
//                result = false;
//                rowNumber += "column Not find Wrong Sheet";
//            }
//        } else {
//            result = false;
//            rowNumber += "column Not find Wrong Sheet";
//        }
//
//        if(rowIterator.hasNext()) {
//
//        }else {
//        	result = false;
//        	rowNumber="";
//            rowNumber = "blank data";
//        }
//
//        if (result == true) {
//        	List<String> producttypelist=new ArrayList<>();
//            producttypelist=productTypeRepository.findListOfData();
//            int i = 2;
//            while (rowIterator.hasNext()) {
//
//                Row row = rowIterator.next();
//                Iterator<Cell> cellIterator = row.cellIterator();
//
//                while (cellIterator.hasNext()) {
//                    Cell cell = cellIterator.next();
//                    //
//                    cell.setCellValue(formatter.formatCellValue(cell));
//                    cell.setCellType(Cell.CELL_TYPE_STRING);
//                }
//                List<ProductVarientsVo> productVarient = new ArrayList<>();
//
//                List<ProductOpeningStockDTO> exist=new ArrayList<ProductOpeningStockDTO>();
//                try {
//                    if (row.getCell(0) != null && row.getCell(0).getStringCellValue().trim() != "") {
//                    	exist=itemcodelist.stream().filter(e -> e.getItemCode().equals(row.getCell(0).getStringCellValue().trim())).collect(Collectors.toList());
//                        if (exist.size()>0) {
//
//                        } else {
//                            result = false;
//                            rowNumber += "(" + i + ",A)-Item code does not exists";
//                            return result;
//                        }
//                    } else {
//                        result = false;
//                        rowNumber += "(" + i + ",A)-Item Code Is Required";
//                    }
//                } catch (Exception e) {
//                    rowNumber += "(" + i + ",A)-Item Code Is Required";
//                    e.printStackTrace();
//                }
//
//                try {
//
//                    if (row.getCell(1) != null && row.getCell(1).getStringCellValue().trim() != "") {
//                        if (RegexTest.validateDouble(row.getCell(1).getStringCellValue().trim(),decimalNumber)) {
//                        } else {
//                            result = false;
//                            rowNumber += "(" + i + ",B)- MRP is InValid ";
//                        }
//
//                    } else {
//                        result = false;
//                        rowNumber += "(" + i + ",B)-";
//                    }
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                try {
//                    if (row.getCell(2) != null && row.getCell(2).getStringCellValue().trim() != "") {
//                        if (RegexTest.validateDouble(row.getCell(2).getStringCellValue().trim(),decimalNumber)) {
//                        	double purchaseprice=Double.parseDouble(row.getCell(2).getStringCellValue().trim());
//                        	double mrp=Double.parseDouble(row.getCell(1).getStringCellValue().trim());
//                        	if (mrp < purchaseprice) {
//                        		result = false;
//                                rowNumber += "(" + i + ",C MRP is smaller than purchase price)-";
//							} else {
//								if (exist.size() != 0) {
//									double landingcost = 0.0;
//									double sellingPrice = 0.0;
//									if (productVarient.size()>0) {
//										if (exist.get(0).getPurchaseTaxIncluded() == 1) {
//											landingcost = purchaseprice;
//										} else {
//											landingcost = purchaseprice+ (purchaseprice * exist.get(0).getTaxRate() / 100);
//										}
//
//										if(mrp < landingcost) {
//											result = false;
//			                                rowNumber += "(" + i + ",C MRP is smaller than Landing Cost)-";
//										}
//									}
//								}
//							}
//                        } else {
//                            result = false;
//                            rowNumber += "(" + i + ",C)- Purchase Price is InValid";
//                            //log.info("Purchase Price Is  Invalid 22->>"+i);
//                        }
//                    } else {
//                        result = false;
//                        rowNumber += "(" + i + ",C)-";
//                    }
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                try {
//                    if (row.getCell(3) != null && row.getCell(3).getStringCellValue().trim() != "") {
//                        if (RegexTest.validateDouble(row.getCell(3).getStringCellValue().trim(),decimalNumber)) {
//
//                        } else {
//                            result = false;
//                            rowNumber += "(" + i + ",D)-qty is InValid";
//                        }
//                    } else {
//                        result = false;
//                        rowNumber += "(" + i + ",D)-";
//                    }
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                try {
//                    if (row.getCell(4) != null && row.getCell(4).getStringCellValue().trim() != "") {
//                        if (RegexTest.validateDouble(row.getCell(4).getStringCellValue().trim(),decimalNumber)) {
//                        	if (row.getCell(3) != null && row.getCell(3).getStringCellValue().trim() != "") {
//                                if (RegexTest.validateDouble(row.getCell(3).getStringCellValue().trim(),decimalNumber)) {
//                                	 if(row.getCell(3).getStringCellValue().trim().toString().equals("0") && row.getCell(4).getStringCellValue().trim().toString().equals("0")) {
//                                		 result = false;
//                                         rowNumber += "(" + i + ",D Or F need One column  Qty)-";
//                                	 }else if(row.getCell(3).getStringCellValue().trim().toString().equals("0") || row.getCell(4).getStringCellValue().trim().toString().equals("0")) {
//
//                                	 }else {
//                                		 result = false;
//                                         rowNumber += "(" + i + ",D Or F need One column Zero Qty)-";
//                                	 }
//                                }
//                        	}
//                        } else {
//                            result = false;
//                            rowNumber += "(" + i + ",F)- qty is InValid";
//                        }
//                    } else {
//                        result = false;
//                        rowNumber += "(" + i + ",F)-";
//                    }
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                i++;
//            }
//
//        }
//        workbook.close();
//        in.close();
//        return result;
//    }
    @RequestMapping(value = "/openingstock/upload/excel")
    @ResponseBody
    public String oprningstockImportStock(HttpSession session, HttpServletRequest request) throws IOException {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        double purchasePrice = 0.0, landingcost = 0.0;
        String filepath = (String) session.getAttribute("filepath");
        File fb = new File(filepath);
        log.info("update bulck upload");
        InputStream in = new FileInputStream(fb);

        // Create Workbook instance holding reference to .xlsx file
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        // Get first/desired sheet from the workbook
        XSSFSheet sheet = workbook.getSheetAt(0);
        int decimalNumber = 2;
        try {
            decimalNumber = Integer.parseInt(session.getAttribute("decimalPoint").toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        // Iterate through each rows one by one
        Iterator<Row> rowIterator = sheet.iterator();
        rowIterator.next();
        List<ProductOpeningUploadStockDTO> allproductVarient = new ArrayList<>();

        allproductVarient = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(
                Long.parseLong(session.getAttribute("companyId").toString()), merchantTypeId, clusterId);
        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            // For each row, iterate through all the columns
            Iterator<Cell> cellIterator = row.cellIterator();

            while (cellIterator.hasNext()) {
                Cell cell = cellIterator.next();
                // Check the cell type and format accordingly
                cell.setCellType(Cell.CELL_TYPE_STRING);
                switch (cell.getCellType()) {
                    case Cell.CELL_TYPE_BOOLEAN:

                        log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
                        break;
                    case Cell.CELL_TYPE_NUMERIC:

                        break;
                    case Cell.CELL_TYPE_STRING:

                        // list.add(cell.getStringCellValue().trim());
                        break;
                }
            }
            List<ProductOpeningUploadStockDTO> productVarient = new ArrayList<>();

            productVarient = allproductVarient.stream()
                    .filter(e -> e.getItemCode().equals(row.getCell(0).getStringCellValue().trim()))
                    .collect(Collectors.toList());
            ;

            if (productVarient.size() != 0) {
                if (row.getCell(3) != null && row.getCell(3).getStringCellValue().trim() != null
                        && !row.getCell(3).getStringCellValue().trim().equals("") && row.getCell(4) != null
                        && row.getCell(4).getStringCellValue().trim() != null
                        && !row.getCell(4).getStringCellValue().trim().equals("")) {
                    List<StockTransactionVo> stockTransactionVos = new ArrayList<StockTransactionVo>();

                    StockTransactionVo stockTransactionVo = new StockTransactionVo();
                    stockTransactionVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                    stockTransactionVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                    stockTransactionVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                    stockTransactionVo.setDescription("Opening Stock");
                    stockTransactionVo.setMrp(Double.parseDouble(row.getCell(1).getStringCellValue().trim()));
                    stockTransactionVo.setInQuantity(Double.parseDouble(row.getCell(3).getStringCellValue().trim()));

                    stockTransactionVo.setOutQuantity(Double.parseDouble(row.getCell(4).getStringCellValue().trim()));
                    purchasePrice = Double.parseDouble(row.getCell(2).getStringCellValue().trim());
                    landingcost = 0.0;
                    if (productVarient.get(0).getPurchaseTaxIncluded() == 1) {
                        landingcost = purchasePrice;

                        try {
                            purchasePrice = round((purchasePrice / ((productVarient.get(0).getTaxRate() + 100) / 100)),
                                    decimalNumber);
                        } catch (Exception e) {
                            purchasePrice = 0;
                        }
                    } else {
                        landingcost = round(
                                purchasePrice + ((purchasePrice * productVarient.get(0).getTaxRate()) / 100),
                                decimalNumber);
                    }
                    stockTransactionVo.setProductPrice(purchasePrice);
                    double sellingPrice = 0.0;

                    if (productVarient.get(0) != null) {
                        if (productVarient.get(0).getDiscountType().equals("percentage")) {
                            sellingPrice = stockTransactionVo.getMrp()
                                    - (stockTransactionVo.getMrp() * productVarient.get(0).getDiscount() / 100);
                            // //System.err.println("selling price discount in persantage"+sellingPrice);
                        } else {
                            sellingPrice = stockTransactionVo.getMrp() - productVarient.get(0).getDiscount();
                            // //System.err.println("selling price discount in amount"+sellingPrice);
                        }
                    }

                    stockTransactionVo.setBatchNo("B" + productVarient.get(0).getProductVarientId()
                            + new DecimalFormat("#.###").format(landingcost)
                            + new DecimalFormat("#.###").format(stockTransactionVo.getMrp()));
                    stockTransactionVo.setLandingCost(landingcost);
                    stockTransactionVo.setSellingPrice(sellingPrice);
                    ProductVarientsVo productVarientsVo1 = new ProductVarientsVo();
                    productVarientsVo1.setProductVarientId(productVarient.get(0).getProductVarientId());
                    stockTransactionVo.setProductVarientsVo(productVarientsVo1);
                    DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");
                    try {
                        stockTransactionVo.setStockTransactionDate(
                                dateFormat3.parse(session.getAttribute("firstDateFinancialYear").toString()));
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }

                    stockTransactionVo.setType("new");
                    stockTransactionVo.setTypeId(productVarient.get(0).getProductVarientId());
                    stockTransactionVo.setYearInterval(session.getAttribute("financialYear").toString());

                    if (stockTransactionVo.getInQuantity() != 0 || stockTransactionVo.getOutQuantity() != 0) {
                        stockTransactionVos.add(stockTransactionVo);
                    }

                    stockTransactionService.saveOpeningStock(stockTransactionVos);

                }

            }

        }
        log.info("*********success****************-");
        return "success";

    }

    @PostMapping("/getListOfTaxesfromproduct")
    @ResponseBody
    public List<TaxVo> getListOfTaxesFormProduct(@RequestParam(value = "id") String id) {
        List<String> items = Arrays.asList(id.split("\\s*,\\s*"));
        //// System.err.println("item size" + items.size());
        List<TaxVo> taxvos = new ArrayList<TaxVo>();
        for (int i = 0; i < items.size(); i++) {
            if (items.get(i) != "" && items.get(i) != null) {
                TaxVo tax = new TaxVo();
                tax = productService.findByProductId(Long.parseLong(items.get(i))).getTaxVo(); // taxservice.findByTaxId();
                if (tax != null) {
                    taxvos.add(tax);
                }
            }
        }

        return taxvos;
    }

    @RequestMapping("/inventory/barcode/json")
    @ResponseBody
    public List<ProductVarientsVo> getinventoryBarcode(@RequestParam("barcode") String barcode,
                                                       @RequestParam(value = "type", required = false, defaultValue = "") String type, HttpSession session) {
        // ProductVarientsVo productVarientsVo =
        // productVariantRepository.findByProductVarientId(Long.parseLong(barcode));
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        long productMultiBarcodeId = productMultiBarcodeRepository.getProductMultiBarcodeByBarcodeAndIsDeleted(barcode,0);
        String clusterId = session.getAttribute("clusterId").toString();

        // ProductVarientsVo productVarientsVo =
        // productVariantRepository.findByProductVarientId(Long.parseLong(barcode));
        List<String> producttypelist = new ArrayList<>();
        producttypelist = productTypeRepository.findListOfData();
        List<ProductVarientsVo> varientsList = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                producttypelist);

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();

        if (!varientsList.isEmpty()) {
            varientsList.forEach(pv -> {
                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                if (productVarientsVo != null) {
                    ////// log.info("pv.getSellingPrice()"+productVarientsVo.getSellingPrice());
                    try {
                        productVarientsVo = (ProductVarientsVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                    ////// log.info("productVarientsVo"+productVarientsVo.getSellingPrice());
                }

                if (productVarientsVo == null) {
                    log.info("data empty");
                    // return null;
                } else {
                    log.info("data not empty");
                    String s = stockMasterRepository.findproductVariantQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                                    productVarientsVo.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString());
                    if (stockMasterVos != null) {
                        productVarientsVo.setStockMasterVos(stockMasterVos);
                    }

                    //// log.info("type is blank>>>>>>>>>>>>>>>>>>>>>>>"+type);
                    if (StringUtils.isBlank(type)) {
                        //// log.info("type is blank>>>>>>>>>>>>>>>>>>>>>>>");
                        if (stockMasterVos == null || stockMasterVos.size() <= 0) {
                            double sellingPrice = 0.0;
                            double landingcost = 0.0;
                            if (productVarientsVo != null) {
                                // System.err.println("product available");
                                if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                                    landingcost = productVarientsVo.getPurchasePrice();
                                    // //System.err.println("landing cost tax includeing"+landingcost);
                                } else {

                                    landingcost = productVarientsVo.getPurchasePrice()
                                            + (productVarientsVo.getPurchasePrice()
                                            * productVarientsVo.getProductVo().getPurchaseTaxVo().getTaxRate()
                                            / 100);
                                    // //System.err.println("landing cost tax exclusive"+landingcost);
                                }
                            }
                            if (productVarientsVo != null) {
                                if (productVarientsVo.getDiscountType().equals("percentage")) {
                                    sellingPrice = productVarientsVo.getMrp()
                                            - (productVarientsVo.getMrp() * productVarientsVo.getDiscount() / 100);
                                    // //System.err.println("selling price discount in persantage"+sellingPrice);
                                } else {
                                    sellingPrice = productVarientsVo.getMrp() - productVarientsVo.getDiscount();
                                    // //System.err.println("selling price discount in amount"+sellingPrice);
                                }
                            }
                            StockMasterVo stockMasterVo = new StockMasterVo();
                            stockMasterVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            stockMasterVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            stockMasterVo.setCreatedOn(new Date());
                            stockMasterVo.setMrp(productVarientsVo.getMrp());
                            stockMasterVo.setBatchNo("B" + productVarientsVo.getProductVarientId()
                                    + new DecimalFormat("#.###").format(landingcost));
                            stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString());
                            stockMasterVo.setLandingCost(landingcost);
                            stockMasterVo.setPurchasePrice(productVarientsVo.getPurchasePrice());
                            stockMasterVo.setSellingPrice(sellingPrice);
                            stockMasterVo.setQuantity(0);
                            stockMasterVo.setProductVarientsVo(productVarientsVo);
                            stockMasterVo.setModified_on(new Date());
                            StockMasterVo stockMasterVo1 = stockMasterService.save(stockMasterVo);
                            List<StockMasterVo> stockMasterVos1 = new ArrayList<>();
                            stockMasterVos1.add(stockMasterVo1);
                            productVarientsVo.setStockMasterVos(stockMasterVos1);
                        }
                    }
                    productVarientsVo.getProductVo().setProductVarientsVos(null);
                    productVarientsVo.getProductVo().setProductAttributeVos(null);
//                	            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//                	            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                    }
                    if (productVarientsVo.getProductVo().getBrandVo() != null) {
                        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    }
                    productVarientsVo.setAvailableQty(s);
                    productVarientsVos.add(productVarientsVo);
                }
            });
        }
        return productVarientsVos;

    }

    @PostMapping("/getsoldqty")
    @ResponseBody
    public List<Double> getSoldqty(@RequestParam(value = "id") String id,
                                   @RequestParam(value = "dateType") String dateType, @RequestParam(value = "fromdate") String fromdate,
                                   HttpSession session) throws ParseException {
        List<String> items = Arrays.asList(id.split("\\s*,\\s*"));
        // System.err.println("item size" + items.size());
        List<Double> qtys = new ArrayList<>();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        Calendar calendar = Calendar.getInstance();
        Date startDate = null;
        Date endDate = null;
        if (dateType.equals("currentYear")) {
            calendar.setTime(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            calendar.setTime(dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("lastMonth")) {
            calendar.set(Calendar.DAY_OF_MONTH, -1);
            calendar.add(Calendar.DATE, 1);
            int min = calendar.getActualMinimum(Calendar.DAY_OF_MONTH);
            calendar.set(Calendar.DAY_OF_MONTH, min);
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            int max = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
            calendar.set(Calendar.DAY_OF_MONTH, max);
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("thisMonth")) {
            calendar.set(Calendar.DAY_OF_MONTH, 1);
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            int max = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
            calendar.set(Calendar.DAY_OF_MONTH, max);
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("thisWeek")) {
            calendar.add(Calendar.DATE, -7);
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            calendar.add(Calendar.DATE, 7);
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("lastWeek")) {
            calendar.add(Calendar.DATE, -14);
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            calendar.add(Calendar.DATE, 7);
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("today")) {
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("customrange")) {
            if (!fromdate.equals("")) {
                try {
                    String[] Daterange = fromdate.split("-");
                    startDate = dateFormat.parse(Daterange[0]);
                    endDate = dateFormat.parse(Daterange[1]);
                } catch (Exception e) {
                    e.printStackTrace();
                    calendar.setTime(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
                    startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
                    calendar.setTime(dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));
                    endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
                }
            } else {
                calendar.setTime(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
                startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
                calendar.setTime(dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));
                endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            }
        } else {
            calendar.setTime(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            calendar.setTime(dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        }

        for (int i = 0; i < items.size(); i++) {
//            //System.err.println("itemid"+items.get(i));
//            //System.err.println("branchId"+branchId);
//            //System.err.println("startdate"+startDate);
//            //System.err.println("enddate"+endDate);
            double qty = salesService.findSolfQtyByproductvarientId(Long.parseLong(items.get(i)), branchId, startDate,
                    endDate);

            qtys.add(qty);
        }

        return qtys;
    }

    @PostMapping("/purchase/contactall/{contactId}/json")
    @ResponseBody
    public List<ProductVarientsVo> allContactMapProduct(@RequestParam Map<String, String> allRequestParams,
                                                        @PathVariable("contactId") long contactId, HttpSession session) throws CloneNotSupportedException {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        CompanySettingVo setting = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.MANAGEPOQUANTITYINPRODUCT);
        log.info("manage po quntity");
        List<ProductVarientsVo> productVarientsVos = new ArrayList<>();
        List<String> productVarientIds = productService.getContactwiseProductVarientId(contactId);
        for (int i = 0; i < productVarientIds.size(); i++) {
            ProductVarientsVo pv = productVariantRepository.findByProductVarientIdAndCompanyId(
                    Long.parseLong(productVarientIds.get(i)),
                    Long.parseLong(session.getAttribute("companyId").toString()));
            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            if (pv != null) {
                productVarientsVo = (ProductVarientsVo) pv.clone();

                productVarientsVo.getProductVo().setProductVarientsVos(null);
                productVarientsVo.getProductVo().setProductAttributeVos(null);

                PurchaseItemVo purchaseItemVo = purchaseItemRepository.findByBranchIdProductVarientIdAndContactId(
                        branchId, Long.parseLong(productVarientIds.get(i)), contactId);
                String code = purchaseItemRepository.getsuppilercodefrompurchaseitem(branchId,
                        Long.parseLong(productVarientIds.get(i)), Constant.PURCHASE_BILL);
                // System.err.println("code---"+code);
                String s = stockMasterRepository.findproductVariantQty(
                        Long.parseLong(session.getAttribute("companyId").toString()),
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                // System.err.println("s----"+s);
                if (s == null) {
                    s = "0";
                }
                productVarientsVo.setSupplierCode(code);
//            productVarientsVo.setDiscount(0.0);
//            productVarientsVo.setDiscountType("percentage");
                productVarientsVo.setDiscount2(0.0);
                productVarientsVo.setDiscountType2("percentage");

                if (purchaseItemVo != null) {
                    // System.err.println("purchaseItemVo null---");
                    productVarientsVo.setDiscount(purchaseItemVo.getDiscount());
                    productVarientsVo.setDiscountType(purchaseItemVo.getDiscountType());
                    productVarientsVo.setDiscount2(purchaseItemVo.getDiscount2());
                    productVarientsVo.setDiscountType2(purchaseItemVo.getDiscountType2());

                    if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                        productVarientsVo.setPurchasePrice(
                                purchaseItemVo.getPrice() + (purchaseItemVo.getTaxAmount() / purchaseItemVo.getQty()));
                    } else {
                        productVarientsVo.setPurchasePrice(purchaseItemVo.getPrice());
                    }
                    productVarientsVo.setMrp(purchaseItemVo.getMrp());
                } else {
                    Map<String, String> piv = purchaseItemRepository.findByProductVarientId(
                            Long.parseLong(productVarientIds.get(i)),
                            Long.parseLong(session.getAttribute("branchId").toString()));

                    if (piv.get("mrp") != null) {
                        productVarientsVo.setMrp(Double.parseDouble(piv.get("mrp")));
                        if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                            productVarientsVo.setPurchasePrice(Double.parseDouble(piv.get("price"))
                                    + (Double.parseDouble(piv.get("tax_amount")) / Double.parseDouble(piv.get("qty"))));
                        } else {
                            productVarientsVo.setPurchasePrice(Double.parseDouble(piv.get("price")));
                        }
                    }
                    productVarientsVo.setDiscount(productVarientsVo.getDiscount());
                    productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
                }

                // System.err.println("---avail----");
                productVarientsVo.setAvailableQty(
                        s + " " + productVarientsVo.getProductVo().getUnitOfMeasurementVo().getMeasurementCode());

//                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                    productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                }
                if (productVarientsVo.getProductVo().getBrandVo() != null) {
                    productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                }
                String master = poQunatityMasterService.getpoqty(productVarientsVo.getProductVo().getProductId(),
                        Long.parseLong(session.getAttribute("branchId").toString()));

                try {
                    if (allRequestParams.get("purchaseType") != null && setting != null && master != null
                            && allRequestParams.get("purchaseType").equalsIgnoreCase("order")) {
                        productVarientsVo.setQty(Double.parseDouble(master) - Double.parseDouble(s.toString()));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                productVarientsVos.add(productVarientsVo);
            }

        }

        return productVarientsVos;
    }

    @PostMapping("/getcategoryandbrandwiseproduct")
    @ResponseBody
    public List<ProductVarientsVo> getcategoryandbrandwiseproduct(@RequestParam(value = "contactId") long contactId,
                                                                  @RequestParam Map<String, String> allRequestParams,
                                                                  @RequestParam(value = "categoryId", defaultValue = "") String categoryId,
                                                                  @RequestParam(value = "brandId", defaultValue = "") String brandId, HttpSession session)
            throws CloneNotSupportedException {
        List<Long> categoryIds = new ArrayList<Long>();
        int brandSize = 0, categorySize = 0;
        if (StringUtils.isNotBlank(categoryId)) {
            categoryIds = Arrays.asList(categoryId.split("\\s*,\\s*")).stream().map(Long::parseLong)
                    .collect(Collectors.toList());
        }
        List<Long> brandIds = new ArrayList<Long>();
        if (StringUtils.isNotBlank(brandId)) {
            brandIds = Arrays.asList(brandId.split("\\s*,\\s*")).stream().map(Long::parseLong)
                    .collect(Collectors.toList());
        }
        log.info("Size:::::::::::::;" + brandIds.size() + "::::" + categoryIds.size());
        if (brandIds.size() == 0) {
            brandIds.add(0L);
        } else {
            brandSize = brandIds.size();
        }

        if (categoryIds.size() == 0) {
            categoryIds.add(0L);
        } else {
            categorySize = categoryIds.size();
        }
        List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        List<Long> varientIds = productService.getcategoryandbrandwiseproduct(categoryIds, brandIds, companyId,
                brandSize, categorySize);
        // List<ProductVarientsVo>
        for (int i = 0; i < varientIds.size(); i++) {
            ProductVarientsVo pv = productVariantRepository
                    .findByProductVarientId(Long.parseLong("" + varientIds.get(i)));
            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            productVarientsVo = (ProductVarientsVo) pv.clone();

            productVarientsVo.getProductVo().setProductVarientsVos(null);
            productVarientsVo.getProductVo().setProductAttributeVos(null);

            PurchaseItemVo purchaseItemVo = purchaseItemRepository.findByBranchIdProductVarientIdAndContactId(branchId,
                    Long.parseLong("" + varientIds.get(i)), contactId);
            String code = purchaseItemRepository.getsuppilercodefrompurchaseitem(branchId,
                    Long.parseLong("" + varientIds.get(i)), Constant.PURCHASE_BILL);
            // System.err.println("code---"+code);
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
            // System.err.println("s----"+s);
            if (s == null) {
                s = "0";
            }
            productVarientsVo.setSupplierCode(code);
//              productVarientsVo.setDiscount(0.0);
//              productVarientsVo.setDiscountType("percentage");
            productVarientsVo.setDiscount2(0.0);
            productVarientsVo.setDiscountType2("percentage");

            if (purchaseItemVo != null) {
                // System.err.println("purchaseItemVo null---");
                productVarientsVo.setDiscount(purchaseItemVo.getDiscount());
                productVarientsVo.setDiscountType(purchaseItemVo.getDiscountType());
                productVarientsVo.setDiscount2(purchaseItemVo.getDiscount2());
                productVarientsVo.setDiscountType2(purchaseItemVo.getDiscountType2());

                if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                    productVarientsVo.setPurchasePrice(
                            purchaseItemVo.getPrice() + (purchaseItemVo.getTaxAmount() / purchaseItemVo.getQty()));
                } else {
                    productVarientsVo.setPurchasePrice(purchaseItemVo.getPrice());
                }
                productVarientsVo.setMrp(purchaseItemVo.getMrp());
            } else {
                Map<String, String> piv = purchaseItemRepository.findByProductVarientId(
                        Long.parseLong("" + varientIds.get(i)),
                        Long.parseLong(session.getAttribute("branchId").toString()));

                if (piv.get("mrp") != null) {
                    productVarientsVo.setMrp(Double.parseDouble(piv.get("mrp")));
                    if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                        productVarientsVo.setPurchasePrice(Double.parseDouble(piv.get("price"))
                                + (Double.parseDouble(piv.get("tax_amount")) / Double.parseDouble(piv.get("qty"))));
                    } else {
                        productVarientsVo.setPurchasePrice(Double.parseDouble(piv.get("price")));
                    }
                }
                productVarientsVo.setDiscount(productVarientsVo.getDiscount());
                productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
            }

            // System.err.println("---avail----");
            productVarientsVo.setAvailableQty(
                    s + " " + productVarientsVo.getProductVo().getUnitOfMeasurementVo().getMeasurementCode());

//              productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//              productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
            }
            if (productVarientsVo.getProductVo().getBrandVo() != null) {
                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            }
            try {
                StockMasterVo stockMasterVo = stockMasterService
                        .findByProductVarientIdAndBranchIdAndYearIntervalOrderByStockIdDesc(
                                productVarientsVo.getProductVarientId(),
                                Long.parseLong(session.getAttribute("branchId").toString()),
                                session.getAttribute("financialYear").toString());
                if (stockMasterVo != null) {
                    productVarientsVo.setStockMaster(stockMasterVo);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            productVarientsVos.add(productVarientsVo);
        }
        return productVarientsVos;
    }

    @PostMapping("/getvarientwisesoldqtycurrentandprevious")
    @ResponseBody
    public List<Map<String, String>> getvarientwisesoldqtycurruntandprevious(
            @RequestParam(value = "varientId") long varientId, @RequestParam(value = "dateType") String dateType,
            @RequestParam(value = "fromdate") String fromdate, HttpSession session) throws ParseException {
        List<Double> qtys = new ArrayList<>();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        Calendar calendar = Calendar.getInstance();
        Date startDate = null;
        Date endDate = null;
        if (dateType.equals("currentYear")) {
            calendar.setTime(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            calendar.setTime(dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("lastMonth")) {
            calendar.set(Calendar.DAY_OF_MONTH, -1);
            calendar.add(Calendar.DATE, 1);
            int min = calendar.getActualMinimum(Calendar.DAY_OF_MONTH);
            calendar.set(Calendar.DAY_OF_MONTH, min);
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            int max = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
            calendar.set(Calendar.DAY_OF_MONTH, max);
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("thisMonth")) {
            calendar.set(Calendar.DAY_OF_MONTH, 1);
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            int max = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
            calendar.set(Calendar.DAY_OF_MONTH, max);
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("thisWeek")) {
            calendar.add(Calendar.DATE, -7);
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            calendar.add(Calendar.DATE, 7);
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("lastWeek")) {
            calendar.add(Calendar.DATE, -14);
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            calendar.add(Calendar.DATE, 7);
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("today")) {
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        } else if (dateType.equals("customrange")) {
            if (!fromdate.equals("")) {
                String[] Daterange = fromdate.split("-");
                startDate = dateFormat.parse(Daterange[0]);
                endDate = dateFormat.parse(Daterange[1]);
            } else {
                calendar.setTime(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
                startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
                calendar.setTime(dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));
                endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            }
        } else {
            calendar.setTime(dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()));
            startDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
            calendar.setTime(dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()));
            endDate = dateFormat.parse(dateFormat.format(calendar.getTime()).toString());
        }
        return salesService.getgetvarientwisesoldqtycurruntandprevious(varientId, branchId, startDate, endDate);
    }

    @PostMapping("/getvarientwiselastpurchasedata")
    @ResponseBody
    public Map<String, String> getvarientwiselastpurchasedata(@RequestParam(value = "varientId") long varientId,
                                                              HttpSession session) throws ParseException {
        List<Double> qtys = new ArrayList<>();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        Calendar calendar = Calendar.getInstance();
        Date startDate = null;
        Date endDate = null;
        List<String> purchaseType = new ArrayList<String>();
        purchaseType.add(Constant.PURCHASE_BILL);
        return salesService.getvarientwiselastpurchasedata(varientId, branchId,
                dateFormat.parse(session.getAttribute("firstDateFinancialYear").toString()),
                dateFormat.parse(session.getAttribute("lastDateFinancialYear").toString()), purchaseType);
    }

    @PostMapping("/checkistransactionavailable/{productId}")
    @ResponseBody
    public boolean checkistransactionavailable(@PathVariable(value = "productId") long productId, HttpSession session)
            throws ParseException {
        int result = productService.countByProductIdAndCompanyIdAndIsDeleted(productId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0);
        if (result > 0) {
            double qty = stockMasterRepository.getProductWiseQty(productId,
                    session.getAttribute("financialYear").toString());
            log.info("her callll::::::::::::::::::::::" + qty);
            if (qty == 0) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    @PostMapping("/checkbulkitemcode")
    @ResponseBody
    public List<Map<String, String>> checkItemcode(@RequestParam("barcode") String barcode, HttpSession session) {
        List<ProductVarientsVo> b = new ArrayList<>();
        List<Map<String, String>> response = new ArrayList<Map<String, String>>();
        if (barcode.length() == 0) {
            return response;
        }
        String address = barcode.substring(0, barcode.length() - 1);
        List<String> itemcode = Arrays.asList(address.split(",")).stream().collect(Collectors.toList());

        /*
         * String itemcode =
         * allRequestParam.get(allRequestParam.keySet().stream().filter(s ->
         * s.endsWith("itemCode")) .collect(Collectors.toSet()).iterator().next());
         */

        for (String item : itemcode) {
            b = productService.findByitemCodeIgnoreCaseAndCompanyId(item,
                    Long.parseLong(session.getAttribute("companyId").toString()));
            if (b.size() == 0) {
                Map<String, String> map = new HashMap<>();
                map.put("barcode", item);
                map.put("bolean", "true");
                response.add(map);
//                return "{ \"valid\": true }";
            } else {
                Map<String, String> map = new HashMap<>();
                map.put("barcode", item);
                map.put("bolean", "false");
                response.add(map);
                // return "{ \"valid\": false }";
            }

        }
        /*
         * if (productvarintid == 0) { //System.err.
         * println("-----*******checkitemcode NEWWW**********------------------" +
         * itemcode); } else { //System.err.
         * println("-----*******checkitemcode UPADETEEE**********------------------" +
         * itemcode); b =
         * productService.findByitemCodeIgnoreCaseAndCompanyIdAndProductVarientIdNot(
         * itemcode, Long.parseLong(session.getAttribute("companyId").toString()),
         * productvarintid); }
         */
        return response;
    }

    @RequestMapping(value = "/directuploadimagewithfolder")
    @ResponseBody
    public String ImportProducttodbiamge(HttpSession session, HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            List<Map<String, String>> list = new ArrayList<Map<String, String>>();
            // List<ProductVarientsVo> list = new ArrayList<ProductVarientsVo>();
            long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
            String clusterId = session.getAttribute("clusterId").toString();
            String mainPath = "D:\\Test";
            File directoryPathinner = new File(mainPath);
            // List of all files and directories
            // String contents[] = directoryPath.list();
            // for (int i = 0; i < contents.length; i++) {
            // log.info("Folder:" + contents[i]);
            // File directoryPathinner = new File(mainPath+"\\"+ contents[i]);
            // List of all files and directories
            String contentsInner[] = directoryPathinner.list();
            for (int j = 0; j < contentsInner.length; j++) {
                log.info("FILE::" + contentsInner[j]);
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                contentsInner[j] = contentsInner[j].substring(0, (contentsInner[j].length() - 4));
                List<String> producttypelist = new ArrayList<>();
                producttypelist.add("Finished");
                producttypelist.add("SemiFinished");
                producttypelist.add("Packaging");
                ProductVarientsVo productVarientsVo = productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(
                        contentsInner[j], Long.parseLong(session.getAttribute("companyId").toString()), 0,
                        merchantTypeId, clusterId, producttypelist);
                // log.warning("---->>>"+(productVarientsVo!=null));
                if (productVarientsVo != null) {
                    // downloadImage(imageUrl, "C:\\IMAGE/"+fileName);
                    File file = new File(mainPath + "\\" + contentsInner[j] + ".jpg");
                    System.err.println(file + "##########Product variants not null");
                    // FileUtils.copyURLToFile(imageUrl, file);
                    long companyId = Long.parseLong(String.valueOf(session.getAttribute("companyId").toString()));
                    String fileExtension, fileName = "";
                    Calendar calendar = Calendar.getInstance();
                    fileExtension = getFileExtension(file);
                    ProductImageVo productImageVo = new ProductImageVo();
                    long productId = productVarientsVo.getProductVo().getProductId();
                    fileName = productId + "-" + calendar.getTimeInMillis() + "." + fileExtension;
                    String imageSrc = BUCKET + "/" + IMAGE_LOCATION + "/" + companyId + "/" + productId + "/"
                            + fileName;
                    String uploadStatus = "500";
                    String azureImageSrc = "";
                    String imagePath = "";
                    if (FILE_UPLOAD_SERVER.equals(Constant.FILE_UPLOAD_SERVER_AZURE)) {
                        Map<String, String> azureResponse = azureBlobService.sendImageFileToAZURE(file, fileName,
                                fileExtension, companyId, productId);
                        if (!azureResponse.isEmpty()) {
                            if (StringUtils.isNotBlank(azureResponse.get("status"))
                                    && azureResponse.get("status").equals("200")) {
                                uploadStatus = "200";
                                azureImageSrc = azureResponse.get("imageSrc");
                                imagePath = azureImageSrc;
                                productImageVo.setSignedSrc(imagePath);
                                productImageVo.setSrc(BUCKET + "/" + IMAGE_LOCATION + "/" + companyId + "/"
                                        + productVarientsVo.getProductVo().getProductId() + "/" + fileName);
                                try {
                                    productService.updateImageInProduct(productVarientsVo.getProductVo().getProductId(),
                                            imagePath);
                                    System.err.println("Image updated############");
                                } catch (Exception e) {
                                    // TODO: handle exception
                                }
                            }
                        }
                    } else {

                        AWSCredentials credentials = new BasicAWSCredentials(ACCESS_KEY, SECRET_KEY);
                        java.security.Security.setProperty("networkaddress.cache.ttl", S3_CACHE);
                        s3 = new AmazonS3Client(credentials);
                        s3.setEndpoint(END_POINT_URL);
                        fileName = new Date().getTime() + ".jpg";
                        InputStream targetStream = new FileInputStream(file);

                        ObjectMetadata objectMetadata = new ObjectMetadata();
                        objectMetadata.setContentType(MediaType.IMAGE_JPEG_VALUE);
                        objectMetadata.setContentLength(file.length());
                        PutObjectRequest putObjectRequest = new PutObjectRequest(
                                BUCKET, IMAGE_LOCATION + "/" + companyId + "/"
                                + productVarientsVo.getProductVo().getProductId() + "/" + fileName,
                                targetStream, objectMetadata);
                        // skip if do not want to access the image directly from S3

                        putObjectRequest.setCannedAcl(CannedAccessControlList.PublicRead);
                        // skip if do not want to access the image directly from S3
                        s3.putObject(putObjectRequest);
                        productImageVo.setSrc(BUCKET + "/" + IMAGE_LOCATION + "/" + companyId + "/"
                                + productVarientsVo.getProductVo().getProductId() + "/" + fileName);
                        try {
                            productService.updateImageInProduct(productVarientsVo.getProductVo().getProductId(),
                                    Constant.REALPATH + BUCKET + "/" + IMAGE_LOCATION + "/" + companyId + "/"
                                            + productVarientsVo.getProductVo().getProductId() + "/" + fileName);
                        } catch (Exception e) {
                            // TODO: handle exception
                        }

                    }
                    productImageVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                    productImageVo.setModifiedOn(CurrentDateTime.getCurrentDate());

                    productImageVo.setPosition(Integer.parseInt(productImageRepository
                            .findMaxPositionByProductVoProductId(productVarientsVo.getProductVo().getProductId())) + 1);

                    productImageVo.setProductVo(productVarientsVo.getProductVo());
                    // System.err.println("Product Id is" +
                    // productImageVo.getProductVo().getProductId());
                    productService.insertProductImage(productImageVo);
                    log.info("==============Com_Id" + companyId + "=========="
                            + productVarientsVo.getProductVo().getProductId());
                    // //log.info("download image successfully........................");

                }

            }

            // }
//

        } else {
            return "redirect:/accessdenied";
        }
        return "done";
    }

    // multi barcode changes//

    @PostMapping("/save/multibarcode")
    @ResponseBody
    public ResponseEntity<ApiResponse> insertMultiBarcode(HttpSession session,
                                                          @RequestParam(name = "productVarientId", defaultValue = "0", required = false) long productVarientId,
                                                          @RequestParam(name = "itemCode", defaultValue = "0", required = false) String itemCode) {
        //// log.info("START=============insertMultiBarcode============START");
        ApiResponse apiResponse = null;
        try {
            if (productVarientId != 0) {
                if (StringUtils.isNotBlank(itemCode)) {
                    ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
                    productMultiBarcodeVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                    productMultiBarcodeVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                    productMultiBarcodeVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
                    productMultiBarcodeVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
                    productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
                    productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
                    productMultiBarcodeVo.setProductVarientId(productVarientId);
                    productMultiBarcodeVo.setItemCode(itemCode);
                    ProductMultiBarcodeVo productMultiBarcodeVo2 = productMultiBarcodeRepository
                            .saveAndFlush(productMultiBarcodeVo);
                    apiResponse = new ApiResponse(true, "ItemCode Added Successfully", productMultiBarcodeVo2);
                } else {
                    apiResponse = new ApiResponse(false, "ItemCode Required", null);
                }
            } else {
                apiResponse = new ApiResponse(false, "Product Varient relation not found", null);
            }
        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, e.getMessage(), null);
        }

        //// log.info("END=============insertMultiBarcode============END");
        return ResponseEntity.ok(apiResponse);
    }

    @PostMapping("/multibarcode")
    @ResponseBody
    public ResponseEntity<ApiResponse> getMultiBarcodeDetails(HttpSession session,
                                                              @RequestParam(name = "productVarientId", defaultValue = "0", required = false) long productVarientId) {
        //// log.info("START=============getMultiBarcodeDetails============START");
        ApiResponse apiResponse = null;
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        try {
            if (productVarientId != 0) {
                long companyId = Long.parseLong(session.getAttribute("companyId").toString());
                List<ProductMultiBarcodeVo> productMultiBarcodeVos = productMultiBarcodeRepository
                        .findByProductVarientIdAndCompanyIdAndIsDeleted(productVarientId, companyId, merchantTypeId,
                                clusterId);
                if (productMultiBarcodeVos.isEmpty()) {
                    apiResponse = new ApiResponse(false, "ItemCode List Not Found", null);
                } else {
                    apiResponse = new ApiResponse(true, "Item Code List Found", productMultiBarcodeVos);
                }
            } else {
                apiResponse = new ApiResponse(false, "Product Varient relation not found", null);
            }
        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, e.getMessage(), null);
        }

        //// log.info("END=============getMultiBarcodeDetails============END");
        return ResponseEntity.ok(apiResponse);
    }

    @PostMapping("/multibarcode/delete")
    @ResponseBody
    public ResponseEntity<ApiResponse> deleteMultiBarcode(HttpSession session,
                                                          @RequestParam(name = "productMultiBarcodeId", defaultValue = "0", required = false) long productMultiBarcodeId) {
        //// log.info("START=============deleteMultiBarcode============START");
        ApiResponse apiResponse = null;
        try {
            if (productMultiBarcodeId != 0) {
                int result = productMultiBarcodeRepository.deleteProductMultiBarcode(productMultiBarcodeId);
                if (result > 0) {
                    apiResponse = new ApiResponse(true, "Item Code Deleted", result);
                } else {
                    apiResponse = new ApiResponse(false, "Item Code Not Deleted", null);
                }
            } else {
                apiResponse = new ApiResponse(false, "Barcode relation not found", null);
            }
        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, e.getMessage(), null);
        }
        //// log.info("END=============deleteMultiBarcode============END");
        return ResponseEntity.ok(apiResponse);
    }

    @PostMapping("/{id}/saveMappingproduct")
    @ResponseBody
    public ResponseEntity<ApiResponse> saveMappingproduct(HttpSession session, @PathVariable("id") long id,
                                                          @RequestParam(name = "variantId") long variantId, @RequestParam(name = "value") double value,
                                                          @RequestParam(name = "type") String type,
                                                          @RequestParam(name = "productmappingId", defaultValue = "0", required = false) long productmappingId) {
        //// log.info("START=============deleteMultiBarcode============START");
        ApiResponse apiResponse = null;
        try {
            ProductMappingVo mappingVo = new ProductMappingVo();
            mappingVo.setProductMappingId(productmappingId);
            if (productmappingId == 0) {
                mappingVo.setCreatedBy(Long.parseLong(session.getAttribute("userId").toString()));
            } else {
                // mappingVo=productMappingRepository.findById(id);
            }
            mappingVo.setAlterBy(Long.parseLong(session.getAttribute("userId").toString()));
            ProductVo productVo = new ProductVo();
            productVo.setProductId(id);
            ProductVarientsVo productVarientsVo = new ProductVarientsVo();
            productVarientsVo.setProductVarientId(variantId);
            mappingVo.setProductVo(productVo);
            mappingVo.setProductVarientsVo(productVarientsVo);
            mappingVo.setType(type);
            mappingVo.setTypeValue(value);
            productMappingRepository.save(mappingVo);
            apiResponse = new ApiResponse(true, "Save successfully", null);

            // update negative stock for shopify
            long countOfproductMappingVo = productMappingRepository.countByProductIdAndCompanyId(id,
                    Long.parseLong(session.getAttribute("companyId").toString()));
            try {
                if (countOfproductMappingVo > 1) {

                } else {
                    ShopifySetupVo shopifySetupVo = shopifyService
                            .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()), "shopify");
                    if (shopifySetupVo != null) {
                        ShopifyResponse responce = shopifyService.checkCredentials(shopifySetupVo);
                        if (responce.isStatus()) {
                            ProductVo productVo1 = productService.findByProductIdAndCompanyIdAndIsDeleted(id,
                                    Long.parseLong(session.getAttribute("companyId").toString()), 0);
                            shopifyService.saveProductInShopify(productVo1, shopifySetupVo,
                                    session.getAttribute("financialYear").toString(), id);
                            log.info("negative selling updated in shopify");
                        } else {

                        }
                    }
                }

            } catch (Exception e) {
                // TODO: handle exception
            }

        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, e.getMessage(), null);
        }
        //// log.info("END=============deleteMultiBarcode============END");
        return ResponseEntity.ok(apiResponse);
    }

    @PostMapping("/{id}/delete/mappingproduct")
    @ResponseBody
    public ResponseEntity<ApiResponse> deleteMappingproduct(HttpSession session, @PathVariable("id") long id) {
        long productId = productMappingRepository.findProductIdByProductMappingIdAndCompanyId(id,
                Long.parseLong(session.getAttribute("companyId").toString()));
        ApiResponse apiResponse = null;
        try {
            productMappingRepository.deleteByid(id);
            apiResponse = new ApiResponse(true, "Deleted successfully", null);

            long countOfproductMappingVo = productMappingRepository.countByProductIdAndCompanyId(productId,
                    Long.parseLong(session.getAttribute("companyId").toString()));
            log.info("countOfproductMappingVo" + countOfproductMappingVo);
            try {
                if (countOfproductMappingVo > 0) {

                } else {
                    ShopifySetupVo shopifySetupVo = shopifyService
                            .getShopifyDetail(Long.parseLong(session.getAttribute("companyId").toString()), "shopify");
                    if (shopifySetupVo != null) {
                        ShopifyResponse responce = shopifyService.checkCredentials(shopifySetupVo);
                        if (responce.isStatus()) {
                            ProductVo productVo1 = productService.findByProductIdAndCompanyIdAndIsDeleted(productId,
                                    Long.parseLong(session.getAttribute("companyId").toString()), 0);
                            shopifyService.saveProductInShopify(productVo1, shopifySetupVo,
                                    session.getAttribute("financialYear").toString(), id);
                            log.info("negative selling updated in shopify");
                        } else {

                        }
                    }
                }
            } catch (Exception e) {
                // TODO: handle exception
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, e.getMessage(), null);
        }

        return ResponseEntity.ok(apiResponse);
    }

    @PostMapping("/{id}/get/mappingproduct")
    @ResponseBody
    public ResponseEntity<ApiResponse> getMappingproduct(HttpSession session, @PathVariable("id") long id) {

        ApiResponse apiResponse = null;
        try {
            Map<String, String> mappingVo = productMappingRepository.findByMappingId(id);
            apiResponse = new ApiResponse(true, "record fetch", mappingVo);
        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, e.getMessage(), null);
        }

        return ResponseEntity.ok(apiResponse);
    }

    @RequestMapping("mapping/{id}/datatable")
    @ResponseBody
    public DataTableProductMappingResponceDTO mappingListProduct(HttpSession session,
                                                                 @PathVariable("id") long productId, @RequestParam Map<String, String> allRequestParams)
            throws NumberFormatException, JsonProcessingException {
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        Integer totallength = 0;

        List<DataTableProductMappingDTO> list = new ArrayList<DataTableProductMappingDTO>();

        totallength = productMappingRepository.countByProductDatatable(productId);
        int start = 0;
        if (allRequestParams.get("start") == null) {
            start = 0;
        } else {
            start = Integer.parseInt(allRequestParams.get("start"));
        }

        String pageLength = "";
        if (StringUtils.isNotBlank(allRequestParams.get("length"))) {
            pageLength = allRequestParams.get("length");
        } else {
            pageLength = "10";
        }

        int length = 0, page = 0, offset = 0, draw = 1;
        try {
            if (allRequestParams.get("draw") != null && !allRequestParams.get("draw").equals("")) {
                draw = 1;
            } else {
                draw = Integer.parseInt(allRequestParams.get("draw").toString());
            }
        } catch (Exception e) {
            // TODO: handle exception
        }

        if (!pageLength.equals("-1")) {
            if (allRequestParams.get("length") == null || allRequestParams.get("length").equals("")) {
                length = 10;
            } else {
                length = Integer.parseInt(allRequestParams.get("length"));
            }

            page = start / length; // Calculate page number
            offset = page * length;
            log.info("length::::>>>>>" + length);
        } else {
            length = totallength;
            offset = 0;
        }
        list = productMappingRepository.findByProductDatatable(productId, length, offset);

//		  	JSONObject jsonMainObject=new JSONObject();
//				JSONObject jsonMataObject = new JSONObject();
        double totalRecords = totallength;
//				jsonMainObject.put("draw",Integer.parseInt(allRequestParams.get("draw")));
//				jsonMainObject.put("recordsFiltered",totalRecords);
//				jsonMainObject.put("recordsTotal",totalRecords);
//				jsonMainObject.put("data", list);
//
//				jsonMataObject.put("page", page);
//				jsonMataObject.put("pages", Math.ceil((totalRecords) / length));
//				jsonMataObject.put("perpage", length);
//				jsonMataObject.put("total", totalRecords);
//				jsonMainObject.put("meta", jsonMataObject);
        DataTableProductMappingResponceDTO dto = new DataTableProductMappingResponceDTO();
        dto.setData(list);
        dto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
        dto.setError(null);
        dto.setRecordsFiltered((int) totalRecords);
        dto.setRecordsTotal((int) totalRecords);
        dto.setDataTableMetaDTO(
                new DataTableMetaDTO(page, (int) Math.ceil((totalRecords) / length), (int) length, (int) totalRecords));

        return dto;

    }

    /*
     * @RequestMapping(value = "/check/excel/itemcode")
     *
     * @ResponseBody public Map<String, Object>
     * checkItmcodeData(@RequestParam("updateExcelFile") MultipartFile file,
     * HttpSession session, HttpServletRequest request, HttpServletResponse
     * response) throws IOException { File fb = ImageResize.convert(file);
     * log.info(fb.getName()); log.info(fb.getAbsolutePath()); String filepath =
     * fb.getAbsolutePath(); session.setAttribute("filepath", filepath);
     * HashMap<String, Object> map = new HashMap<String, Object>(); rowNumber = "";
     * if (checksheetItemcode(request, response, session)) {
     *
     * map.put("msg", "success"); return map; } else {
     * //System.err.println("There are some error in following Cell Number --> " +
     * rowNumber); map.put("msg",
     * "There are some error in following Cell Number --> " + rowNumber); return
     * map; } }
     */

    public boolean checksheetItemcode(HttpServletRequest request, HttpServletResponse response, HttpSession session)
            throws IOException {
        String name = "";
        boolean result = true;
        String itemcodelistNA = "";
        List<String> itemcodelist = new ArrayList<>();
        List<String> categoryNameList = new ArrayList<>();
        List<String> departmentList = new ArrayList<>();
        List<BrandVo> brandList = new ArrayList<>();
        String filepath = (String) session.getAttribute("filepath");
        File fb = new File(filepath);
        InputStream in = new FileInputStream(fb);
        // Create Workbook instance holding reference to .xlsx file
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        // Get first/desired sheet from the workbook
        XSSFSheet sheet = workbook.getSheetAt(0);
        // Iterate through each rows one by one

        itemcodelist = productService.findAllItemcode(Long.parseLong(session.getAttribute("companyId").toString()));
        // System.err.print("size----"+itemcodelist.size());
        Iterator<Row> rowIterator = sheet.iterator();

        Row row1 = rowIterator.next();

        if (row1.getCell(0) != null && row1.getCell(0).getStringCellValue().trim() != "") {

            if (!row1.getCell(0).getStringCellValue().trim().equals("Item Code")) {
                result = false;
                rowNumber += "column Not find Wrong Sheet";
            }
        } else {
            result = false;
            rowNumber += "column Not find Wrong Sheet";
        }

        if (result == true) {
            int i = 2;
            while (rowIterator.hasNext()) {

                Row row = rowIterator.next();
                // For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    cell.setCellType(Cell.CELL_TYPE_STRING);
                }

                // ---------------ITEM CODE CHECK-------------

                try {
                    log.info("--=-=->>>>>>>" + row.getCell(1));
                    if (row.getCell(0) != null && row.getCell(0).getStringCellValue().trim() != "") {
                        boolean exist = itemcodelist.contains(row.getCell(0).getStringCellValue().trim()) ? true
                                : false;
                        if (exist) {

                        } else {
                            result = false;
                            itemcodelistNA += " " + row.getCell(0).getStringCellValue().trim();
                            rowNumber += "(" + i + ",A)-Item code does not exists";
                            // return result;
                        }
                    } else {
                        result = false;
                        rowNumber += "(" + i + ",A)-Item Code Is Required";
                    }
                } catch (Exception e) {
                    rowNumber += "(" + i + ",A)-Item Code Is Required";
                    e.printStackTrace();
                }

                try {
                    if (row.getCell(1) != null && row.getCell(1).getStringCellValue().trim() != "") {
                        if (RegexTest.validateDouble(row.getCell(1).getStringCellValue().trim(),
                                Integer.parseInt(session.getAttribute("decimalPoint").toString()))) {
                        } else {
                            result = false;
                            rowNumber += "(" + i + ",B)-";
                        }

                    } else {
                        result = false;
                        rowNumber += "(" + i + ",B)-";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                log.info("Row No= " + (row.getRowNum() + 1));
                i++;
            }

        }
        workbook.close();
        in.close();
        // System.err.println("itemcode list----------->" + itemcodelistNA);
        log.info("Final Result----------->" + result);
        return result;
    }
//
//	    @RequestMapping(value = "/upload/excel/itemcode")
//	    @ResponseBody
//	    public String itemcodeDataUploadTobatch(HttpSession session, HttpServletRequest request) throws IOException {
//
//	        String filepath = (String) session.getAttribute("filepath");
//	        File fb = new File(filepath);
//	        log.info("update bulck upload");
//	        InputStream in = new FileInputStream(fb);
//
//	        // Create Workbook instance holding reference to .xlsx file
//	        XSSFWorkbook workbook = new XSSFWorkbook(in);
//	        // Get first/desired sheet from the workbook
//	        XSSFSheet sheet = workbook.getSheetAt(0);
//
//	        // Iterate through each rows one by one
//	        Iterator<Row> rowIterator = sheet.iterator();
//	        rowIterator.next();
//	        while (rowIterator.hasNext()) {
//	            Row row = rowIterator.next();
//	            // For each row, iterate through all the columns
//	            Iterator<Cell> cellIterator = row.cellIterator();
//
//	            while (cellIterator.hasNext()) {
//	                Cell cell = cellIterator.next();
//	                // Check the cell type and format accordingly
//	                cell.setCellType(Cell.CELL_TYPE_STRING);
//	                switch (cell.getCellType()) {
//	                    case Cell.CELL_TYPE_BOOLEAN:
//
//	                        log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
//	                        break;
//	                    case Cell.CELL_TYPE_NUMERIC:
//
//	                        break;
//	                    case Cell.CELL_TYPE_STRING:
//
//	                        // list.add(cell.getStringCellValue().trim());
//	                        break;
//	                }
//	            }
//	            List<ProductVarientsVo> productVarient = new ArrayList<>();
//	            productVarient = productService.findByitemCodeIgnoreCaseAndCompanyId(
//	                    row.getCell(0).getStringCellValue().trim(),
//	                    Long.parseLong(session.getAttribute("companyId").toString()));
//
//	            if (productVarient.size() != 0) {
//	                if (row.getCell(1) != null && row.getCell(1).getStringCellValue().trim() != null) {
//	                    List<StockMasterVo> stockMasterVo = stockMasterRepository.findByProductVarientIdAndComapnyId(productVarient.get(0).getProductVarientId(),Long.parseLong(session.getAttribute("branchId").toString()),
//	                            session.getAttribute("financialYear").toString());
//	                    ////log.info("size stockmaster----->> first "+stockMasterVo.size());
//
//	                    if(stockMasterVo.size()>0){
//	                        for (StockMasterVo stockMasterVo1 :stockMasterVo){
//	                            //System.err.println("itemcode "+stockMasterVo1.getProductVarientsVo().getItemCode()+"mrp---"+stockMasterVo1.getMrp());
//	                            //System.err.println("selling---"+Double.parseDouble(row.getCell(1).getStringCellValue().trim()));
//
//	                            stockMasterVo1.setMrp(productVarient.get(0).getMrp());
//	                            stockMasterVo1.setSellingPrice(productVarient.get(0).getSellingPrice());
//	                            stockMasterVo1.setPurchasePrice(productVarient.get(0).getPurchasePrice());
//	                            stockMasterVo1.setLandingCost(productVarient.get(0).getLandingCost());
//	                            stockMasterService.save(stockMasterVo1);
//
//
////	                            if(stockMasterVo1.getMrp()>=Double.parseDouble(row.getCell(1).getStringCellValue().trim())){
////	                                stockMasterRepository.updateSellingPrice(stockMasterVo1.getStockId(),Double.parseDouble(row.getCell(1).getStringCellValue().trim()),
////	                                        Long.parseLong(session.getAttribute("branchId").toString()),stockMasterVo1.getProductVarientsVo().getProductVarientId());
////	                            }else{
////	                                //System.err.println("mrp is less then selling price");
////	                            }
//	                        }
//
//
//	                     }
//
//
//	                    List<Long> stockidlist = new ArrayList<>();
//
//	                    if(stockMasterVo.size()>0) {
//	                    	long stockid =0;
//	                    	double qty =0;
//	                    	for(int i=0;i<stockMasterVo.size();i++) {
//
//	                    		if(i==0) {
//	                    			stockid=stockMasterVo.get(i).getStockId();
//	                    			////log.info("stockid--->>>>>> "+stockMasterVo.get(i).getStockId());
//	                    		}else {
//	                    			stockidlist.add(stockMasterVo.get(i).getStockId());
//	                    		}
//	                    		qty += stockMasterVo.get(i).getQuantity();
//	                    	}
//	                    	if(stockid!=0) {
//	                    		int result=	stockMasterRepository.updateQtyBystockId(stockid,qty);
//	                    	}
//	                    }
//	        			////log.info("stockidlist--->>>>>> "+stockidlist);
//	        			if(stockidlist.size()>0) {
//	        			stockMasterRepository.deletestockId(stockidlist);
//	        			}
//	        			/*
//						 * if(stockMasterVo.size()>0) { for(int i=0;i<stockMasterVo.size();i++) {
//						 * if(i==0) {
//						 *
//						 * }else { stockMasterRepository.delete(stockMasterVo.get(i)); } } }
//						 */
//
//
//	                }
//
//	            }
//	            log.info("row no af----------->" + (row.getRowNum() + 1));
//
//
//
//	        }
//	        log.info("*********success****************-");
//	        return "success";
//
//	    }

    @PostMapping("/checkmultibarcode")
    @ResponseBody
    public String checkMultiBarcode(@RequestParam Map<String, String> allRequestParam,
                                    @RequestParam(defaultValue = "0", value = "productMultiBarcodeId") long productMultiBarcodeId,
                                    @RequestParam(defaultValue = "0", value = "productVarientId", required = false) long productVarientId,
                                    @RequestParam(defaultValue = "0", value = "multiBarcodeVarientId", required = false) long multiBarcodeVarientId,
                                    @RequestParam(defaultValue = "0", value = "duplicate", required = false) int duplicate,
                                    HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<Long> b = new ArrayList<>();
        String itemcode = allRequestParam.get(allRequestParam.keySet().stream().filter(s -> s.endsWith("itemCode"))
                .collect(Collectors.toSet()).iterator().next());
        if (duplicate == 1) {// here duplicate flag means allow duplicate validation
            if (multiBarcodeVarientId != 0) {
                System.out.println("1");
                //// log.warning("-----*******checkMultiBarcode NEWWW
                //// multiBarcodeVarientId**********------------------" + itemcode);
                b = productService.findByMultiBarcodeAndCompanyIdAndIsDeleted(itemcode,
                        Long.parseLong(session.getAttribute("companyId").toString()), 0, 0, multiBarcodeVarientId,
                        merchantTypeId, clusterId);

                if (b.size() == 0) {
                    return "{ \"valid\": true }";
                } else {
                    return "{ \"valid\": false }";
                }
            } else {
                return "{ \"valid\": true }";
            }

        } else {

//          CompanySettingVo duplicateBarcode = companySettingService.findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()), Constant.MULTIDUPLICATEBARCODE);
//          if(duplicateBarcode.getValue()==1) {//means allow to enter duplicate barcode
//
//          } else {// not allow to duplicate barcode
//
//          }

            if (productMultiBarcodeId == 0) {
                System.out.println("2");
                //// log.warning("-----*******checkMultiBarcode
                //// NEWWW**********------------------" + itemcode);
                b = productService.findByMultiBarcodeAndCompanyIdAndIsDeleted(itemcode,
                        Long.parseLong(session.getAttribute("companyId").toString()), 0, 0, productVarientId,
                        merchantTypeId, clusterId);
            } else {
                System.out.println("3");
                //// log.warning("-----*******checkMultiBarcode
                //// UPADETEEE**********------------------" + itemcode);
                b = productService.findByMultiBarcodeAndCompanyIdAndIsDeletedAndMultiBarcodeIdNot(itemcode,
                        Long.parseLong(session.getAttribute("companyId").toString()), 0, 0, productMultiBarcodeId,
                        productVarientId);
            }
            if (b == null) {
                return "{ \"valid\": true }";
            } else {
                if (b.size() == 0) {
                    return "{ \"valid\": true }";
                } else {
                    return "{ \"valid\": false }";
                }
            }

        }

    }

    @PostMapping("/checkbulkmultibarcode")
    @ResponseBody
    public List<Map<String, String>> checkBulkItemcode(@RequestParam("barcode") String barcode,
                                                       @RequestParam(defaultValue = "0", value = "productVarientId", required = false) long productVarientId,
                                                       HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();

        List<Map<String, String>> response = new ArrayList<Map<String, String>>();
        List<Long> b = new ArrayList<>();
        if (StringUtils.isNotBlank(barcode)) {
            String address = barcode.substring(0, barcode.length() - 1);
            List<String> itemcode = Arrays.asList(address.split(",")).stream().collect(Collectors.toList());
            /*
             * String itemcode =
             * allRequestParam.get(allRequestParam.keySet().stream().filter(s ->
             * s.endsWith("itemCode")) .collect(Collectors.toSet()).iterator().next());
             */

            for (String item : itemcode) {
                b = productService.findByMultiBarcodeAndCompanyIdAndIsDeleted(item,
                        Long.parseLong(session.getAttribute("companyId").toString()), 0, 0, productVarientId,
                        merchantTypeId, clusterId);
//              b = productService.findByitemCodeIgnoreCaseAndCompanyId(item,
//                      Long.parseLong(session.getAttribute("companyId").toString()));
                if (b.size() == 0) {
                    Map<String, String> map = new HashMap<>();
                    map.put("barcode", item);
                    map.put("bolean", "true");
                    response.add(map);
//                  return "{ \"valid\": true }";
                } else {
                    Map<String, String> map = new HashMap<>();
                    map.put("barcode", item);
                    map.put("bolean", "false");
                    response.add(map);
                    // return "{ \"valid\": false }";
                }

            }
        } else {
            Map<String, String> map = new HashMap<>();
            map.put("barcode", "");
            map.put("bolean", "false");
            response.add(map);
        }
        return response;
    }

    @PostMapping("/{id}/getmappingproduct")
    @ResponseBody
    public ResponseEntity<ApiResponse> getmappingproduct(HttpSession session, @PathVariable("id") long id) {

        ApiResponse apiResponse = null;
        try {
            apiResponse = new ApiResponse(true, " successfully",
                    productMappingRepository.getMappedProductWithstock(id,
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString()));
        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, e.getMessage(), null);
        }

        return ResponseEntity.ok(apiResponse);
    }

    @PostMapping("/getbatch/{productvarientid}")
    @ResponseBody
    public ApiResponse getbatch(HttpSession session, @PathVariable("productvarientid") long productvarientid) {

        List<StockMasterVo> vos = stockMasterRepository
                .findByProductVarientsVoProductVarientIdAndBranchIdAndYearInterval(productvarientid,
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        session.getAttribute("financialYear").toString());
        Boolean isexpiry = productVariantRepository.getisexpirymanage(productvarientid);
        HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("isexpiry", isexpiry);
        map.put("stockmaster", vos);
        return new ApiResponse(true, "success", map);
    }

    @PostMapping("/getbatchqtys")
    @ResponseBody
    public Map<String, String> getbatchqty(HttpSession session, @RequestParam("stockId") String stockId) {
        List<Long> list = Stream.of(stockId.split(",")).map(Long::parseLong).collect(Collectors.toList());

        return stockMasterRepository.getStockIdWiseStockAndUom(list,
                Long.parseLong(session.getAttribute("branchId").toString()),
                session.getAttribute("financialYear").toString());
    }

    @PostMapping("/{id}/varient/getmappingproduct")
    @ResponseBody
    public ResponseEntity<ApiResponse> varientgetmappingproduct(HttpSession session, @PathVariable("id") long id) {

        ApiResponse apiResponse = null;
        try {
            apiResponse = new ApiResponse(true, " successfully",
                    productMappingRepository.getMappedProductWithstockbyVarientId(id,
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString()));
        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, e.getMessage(), null);
        }

        return ResponseEntity.ok(apiResponse);
    }

    @RequestMapping(value = "/updatenutrition/check/excel")
    @ResponseBody
    public Map<String, Object> CheckUpdateBulkupdatenutrition(
            @RequestParam("updateExcelFilenutrition") MultipartFile file, HttpSession session,
            HttpServletRequest request, HttpServletResponse response) throws IOException {
        File fb = ImageResize.convert(file);
        log.info(fb.getName());
        log.info(fb.getAbsolutePath());
        String filepath = fb.getAbsolutePath();
        session.setAttribute("filepath", filepath);
        HashMap<String, Object> map = new HashMap<String, Object>();
        rowNumber = "";

        if (true) {

            map.put("msg", "success");
            return map;
        } else {
            // System.err.println("There are some error in following Cell Number --> " +
            // rowNumber);
            map.put("msg", "There are some error in following Cell Number --> " + rowNumber);
            return map;
        }
    }

    @RequestMapping(value = "/nutrition/upload/excel")
    @ResponseBody
    public String Importnutrition(HttpSession session, HttpServletRequest request) throws IOException {
        if (MenuPermission.havePermission(session, Constant.PRODUCT, Constant.INSERT) == 1) {
            long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
            String clusterId = session.getAttribute("clusterId").toString();

            String filepath = (String) session.getAttribute("filepath");
            File fb = new File(filepath);
            InputStream in = new FileInputStream(fb);

            List<String> itemcodelist = new ArrayList<>();

            // Create Workbook instance holding reference to .xlsx file
            XSSFWorkbook workbook = new XSSFWorkbook(in);
            // Get first/desired sheet from the workbook
            XSSFSheet sheet = workbook.getSheetAt(0);

            // Iterate through each rows one by one
            Iterator<Row> rowIterator = sheet.iterator();
            Row row1 = rowIterator.next();
            rowIterator.next();

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                // For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    // Check the cell type and format accordingly
                    cell.setCellType(Cell.CELL_TYPE_STRING);
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_BOOLEAN:

                            log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
                            break;
                        case Cell.CELL_TYPE_NUMERIC:

                            break;
                        case Cell.CELL_TYPE_STRING:

                            // list.add(cell.getStringCellValue().trim());
                            break;

                    }

                }

                /*
                 * log.info("Row No= " + (row.getRowNum() + 1));
                 *
                 * ProductVo productVo = new ProductVo();
                 *
                 * List<ProductVarientsVo> b = new ArrayList<>();
                 *
                 * b= productService.findByitemCodeIgnoreCaseAndCompanyId(row.getCell(0).
                 * getStringCellValue().trim(),
                 * Long.parseLong(session.getAttribute("companyId").toString()));
                 */

//	                itemcodelist = productService.findAllItemcode(Long.parseLong(session.getAttribute("companyId").toString()));
                String itemCode = row.getCell(0).getStringCellValue().trim();
                List<String> producttypelist = new ArrayList<>();
                producttypelist = productTypeRepository.findListOfData();
                ProductVarientsVo productVarientsVo = productService.findByitemCodeIgnoreCaseAndCompanyIdAndIsDeleted(
                        itemCode, Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId,
                        clusterId, producttypelist);

                if (productVarientsVo != null) {

                    // log.info("-------------------------Product ItemCode
                    // Found--------------------- : " + itemCode);

                    //// log.info("Ingredients"+row.getCell(0).getStringCellValue().trim());
                    //// log.info(""+row1.getCell(2).getStringCellValue().trim());
                    //// log.info(""+row.getCell(2).getStringCellValue().trim());
                    //// log.info(""+row1.getCell(3).getStringCellValue().trim());
                    //// log.info(""+row.getCell(3).getStringCellValue().trim());
                    //// log.info(""+row1.getCell(4).getStringCellValue().trim());
                    //// log.info(""+row.getCell(4).getStringCellValue().trim());
                    //// log.info(""+row1.getCell(5).getStringCellValue().trim());
                    //// log.info(""+row.getCell(5).getStringCellValue().trim());
                    //// log.info(""+row1.getCell(6).getStringCellValue().trim());
                    //// log.info(""+row.getCell(6).getStringCellValue().trim());

                    productVarientsVo.getProductVo().setIngredients(row.getCell(1).getStringCellValue().trim());
                    ProductNutritionVo nutritionVo1 = new ProductNutritionVo();
                    ProductNutritionVo nutritionVo2 = new ProductNutritionVo();
                    ProductNutritionVo nutritionVo3 = new ProductNutritionVo();
                    ProductNutritionVo nutritionVo4 = new ProductNutritionVo();
                    ProductNutritionVo nutritionVo5 = new ProductNutritionVo();
                    nutritionVo1.setName(row1.getCell(2).getStringCellValue().trim());
                    nutritionVo1.setValue(row.getCell(2).getStringCellValue().trim());
                    nutritionVo1.setProductVo(productVarientsVo.getProductVo());

                    nutritionVo2.setName(row1.getCell(3).getStringCellValue().trim());
                    nutritionVo2.setValue(row.getCell(3).getStringCellValue().trim());
                    nutritionVo2.setProductVo(productVarientsVo.getProductVo());

                    nutritionVo3.setName(row1.getCell(4).getStringCellValue().trim());
                    nutritionVo3.setValue(row.getCell(4).getStringCellValue().trim());
                    nutritionVo3.setProductVo(productVarientsVo.getProductVo());

                    nutritionVo4.setName(row1.getCell(5).getStringCellValue().trim());
                    nutritionVo4.setValue(row.getCell(5).getStringCellValue().trim());
                    nutritionVo4.setProductVo(productVarientsVo.getProductVo());

                    nutritionVo5.setName(row1.getCell(6).getStringCellValue().trim());
                    nutritionVo5.setValue(row.getCell(6).getStringCellValue().trim());
                    nutritionVo5.setProductVo(productVarientsVo.getProductVo());

                    List<ProductNutritionVo> list = new ArrayList<>();
                    list.add(nutritionVo1);
                    list.add(nutritionVo2);
                    list.add(nutritionVo3);
                    list.add(nutritionVo4);
                    list.add(nutritionVo5);

                    productVarientsVo.getProductVo().setProductNutritionVos(list);

                    productVariantRepository.save(productVarientsVo);

                } else {
//					log.info(
//							"-------------------------Product ItemCode Not Found--------------------- : " + itemCode);
                }
            }
            in.close();

            log.info("*************************-");
            return "success";

        } else {
            return "redirect:/accessdenied";
        }

    }

    @RequestMapping(value = "/temp/notification")
    @ResponseBody
    public String addNotificationForPendingPaymentSalesAndPurchase() throws ParseException {
        //// log.warning("START=====addNotificationForPendingPaymentSalesAndPurchase======START");
        List<String> salesType = new ArrayList<>();
        salesType.add(Constant.SALES_INVOICE);
        salesType.add(Constant.SALES_POS);

        List<String> purchaseType = new ArrayList<>();
        purchaseType.add(Constant.PURCHASE_BILL);

        List<String> branchIds = companySettingService
                .findAllBranchIdsWithTypeAndValue(Constant.NOTIFICATIONPAYMENTREMINDER, 1);
        //// log.warning("branchIds size------>"+branchIds.size());
        for (int i = 0; i < branchIds.size(); i++) {
            if (StringUtils.isNotBlank(branchIds.get(i)) && !StringUtils.equalsIgnoreCase("0", branchIds.get(i))) {
                long branchId = Long.parseLong(branchIds.get(i));
                //// log.warning("branchId------>"+branchId);

                try {
                    //// log.warning("START================findUnpaidSalesForPaymentReminder==================START");
                    List<SalesUnpaidDTO> salesUnpaidList = salesRepository.findUnpaidSalesForPaymentReminder(branchId,
                            salesType);
                    //// log.warning("salesUnpaidList Size is :" + salesUnpaidList.size());
                    if (salesUnpaidList != null && salesUnpaidList.size() > 0) {
                        for (SalesUnpaidDTO salesDTO : salesUnpaidList) {
                            String message = "Reminder! " + salesDTO.getContactName() + " Having Invoice "
                                    + salesDTO.getSalesNo() + " amount "
                                    + (salesDTO.getTotal() - salesDTO.getPaidAmount()) + " is pending.";
                            NotificationVo notificationVo = new NotificationVo();
                            notificationVo.setBranchId("" + branchId);
                            notificationVo.setNotificationDescription(message);
                            String url = "#";
                            if (StringUtils.equalsIgnoreCase(salesDTO.getSalesType(), Constant.SALES_POS)) {
                                url = "/pos/" + salesDTO.getSalesId();
                            } else if (StringUtils.equalsIgnoreCase(salesDTO.getSalesType(), Constant.SALES_INVOICE)) {
                                url = "/sales/" + salesDTO.getSalesType() + "/" + salesDTO.getSalesId();
                            }
                            notificationVo.setNotificationUrl(url);
                            notificationVo.setType(Constant.NOTIFICATION_SALES);
                            notificationVo.setRead(false);
                            try {
                                notificationRepository.save(notificationVo);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    }
                    //// log.warning("END================findUnpaidSalesForPaymentReminder==================END");
                } catch (Exception e) {
                    e.printStackTrace();
                    //// log.warning("END================findUnpaidSalesForPaymentReminder==================END");
                }

                try {
                    //// log.warning("START================findUnpaidPurchaseForPaymentReminder==================START");
                    List<PurchaseUnpaidDTO> purchaseUnpaidList = purchaseService
                            .findUnpaidPurchaseForPaymentReminder(branchId, purchaseType);
                    //// log.warning("purchaseUnpaidList Size is :" + purchaseUnpaidList.size());
                    if (purchaseUnpaidList != null && purchaseUnpaidList.size() > 0) {
                        for (PurchaseUnpaidDTO salesDTO : purchaseUnpaidList) {
                            String message = "Reminder! Your BILL " + salesDTO.getPurchaseNo() + " amount "
                                    + (salesDTO.getTotal() - salesDTO.getPaidAmount()) + " is pending. "
                                    + "Please complete the Payment.";
                            NotificationVo notificationVo = new NotificationVo();
                            notificationVo.setBranchId("" + branchId);
                            notificationVo.setNotificationDescription(message);
                            notificationVo.setNotificationUrl(
                                    "/purchase/" + salesDTO.getPurchaseType() + "/" + salesDTO.getPurchaseId());
                            notificationVo.setType(Constant.NOTIFICATION_PURCHASE);
                            notificationVo.setRead(false);
                            try {
                                notificationRepository.save(notificationVo);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    }
                    //// log.warning("END================findUnpaidPurchaseForPaymentReminder==================END");
                } catch (Exception e) {
                    e.printStackTrace();
                    //// log.warning("END================findUnpaidPurchaseForPaymentReminder==================END");
                }
            }
        }
        return "success";
    }

    @PostMapping("/purchase/{purchaseId}/barcode")
    @ResponseBody
    public PurchaseBarcodeDTO getPurchaseDTOforBarcode(@PathVariable(value = "purchaseId") long purchaseId,
                                                       HttpSession session) {
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        //// log.info("inside>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
        try {
            PurchaseVo purchaseVo = purchaseService.findByPurchaseIdAndBranchId(purchaseId, branchId);
            //// log.info("purchaseVo>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + purchaseVo);
            if (purchaseVo != null) {
                PurchaseBarcodeDTO purchaseBarcodeDTO = new PurchaseBarcodeDTO();
                purchaseBarcodeDTO.setPurchaseId(purchaseVo.getPurchaseId());
                purchaseBarcodeDTO.setPrefix(purchaseVo.getPrefix());
                purchaseBarcodeDTO.setPurchaseNo(purchaseVo.getPurchaseNo());
                purchaseBarcodeDTO.setBillNo(purchaseVo.getBillNo());
                purchaseBarcodeDTO.setPurchaseDate(purchaseVo.getPurchaseDate());
                if (CollectionUtils.isNotEmpty(purchaseVo.getPurchaseItemVos())) {
                    List<PurchaseItemBarcodeDTO> purchaseBarcodeItemDTO = new ArrayList<>();
                    for (PurchaseItemVo purchaseItemVo : purchaseVo.getPurchaseItemVos()) {
                        PurchaseItemBarcodeDTO item = new PurchaseItemBarcodeDTO();
                        item.setPurchaseItemId(purchaseItemVo.getPurchaseItemId());
                        item.setQty(purchaseItemVo.getQty());
                        item.setItemcode(purchaseItemVo.getItemCode());
                        item.setProductVarientId(purchaseItemVo.getProductVarientsVo().getProductVarientId());
                        item.setVarientName(purchaseItemVo.getProductVarientsVo().getVarientName());
                        item.setProductName(purchaseItemVo.getProduct().getName());
                        item.setProductId(purchaseItemVo.getProduct().getProductId());
                        item.setMrp(purchaseItemVo.getMrp());
                        item.setLandingCost(purchaseItemVo.getLandingCost());
                        item.setSetCode(purchaseItemVo.getProductMultiBarcodeVo().getSetCode());
                        List<StockMasterVo> stockMasterVos = stockMasterService
                                .findByProductVarientsVoProductVarientIdAndBranchIdAndYearIntervalOrderBycreatedonDesc(
                                        purchaseItemVo.getProductVarientsVo().getProductVarientId(),
                                        Long.parseLong(session.getAttribute("branchId").toString()),
                                        session.getAttribute("financialYear").toString());
                        item.setStockMasterVos(stockMasterVos);
                        purchaseBarcodeItemDTO.add(item);
                    }
                    purchaseBarcodeDTO.setPurchaseItemVos(purchaseBarcodeItemDTO);
                }
                //// log.info(
//						"purchasedtooooo not null>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + purchaseBarcodeDTO.getPurchaseId());
                return purchaseBarcodeDTO;
            } else {
                return new PurchaseBarcodeDTO();
            }
        } catch (Exception e) {
            e.printStackTrace();
            return new PurchaseBarcodeDTO();
        }
    }

    @PostMapping("/createbatch")
    @ResponseBody
    public StockMasterVo createbatch(HttpSession session, @RequestParam("purchase") double purchase,
                                     @RequestParam("landing") double landing, @RequestParam("sellingprice") double sellingprice,
                                     @RequestParam("productVarientId") String productVarientId, @RequestParam("mrp") double mrp) {

        List<StockMasterVo> stockMasterVos = stockMasterService.findByduplicateBatch(Long.parseLong(productVarientId),
                Long.parseLong(session.getAttribute("branchId").toString()),
                session.getAttribute("financialYear").toString(), landing, mrp);

        StockMasterVo stockMasterVo = new StockMasterVo();
        if (stockMasterVos.size() == 0) {
            ProductVarientsVo varientsVo = new ProductVarientsVo();

            varientsVo.setProductVarientId(Long.parseLong(productVarientId));
            stockMasterVo.setBatchNo("B" + productVarientId + new DecimalFormat("#.###").format(landing));
            stockMasterVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
            stockMasterVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
            stockMasterVo.setCreatedOn(new Date());
            stockMasterVo.setExpirationDays(0);
            // stockMasterVo.setIsDisable(0);
            stockMasterVo.setLandingCost(landing);
            stockMasterVo.setModified_on(new Date());
            stockMasterVo.setMrp(mrp);
            stockMasterVo.setProductVarientsVo(varientsVo);
            stockMasterVo.setPurchasePrice(purchase);
            stockMasterVo.setQuantity(0);
            stockMasterVo.setSellingPrice(sellingprice);
            stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString());
            stockMasterVo.setRetailerMarginType(
                    productService.findByProductVarientId(Long.parseLong(productVarientId)).getRetailerMarginType());
            stockMasterRepository.save(stockMasterVo);
        } else {
            stockMasterVo = stockMasterVos.get(0);
        }
        return stockMasterVo;
    }

    @RequestMapping("/image/createsignedsrc")
    @ResponseBody
    public String generateSignedSrcOfImages(
            @RequestParam(name = "imageId", defaultValue = "0", required = false) long imageId,
            @RequestParam(name = "productId", defaultValue = "0", required = false) long productId,
            HttpSession session) {
        if (productId == 0 && imageId == 0) {

        } else {
            long companyId = Long.parseLong(session.getAttribute("companyId").toString());
            List<ProductImageDTO> imageVos = productImageRepository
                    .findCustomProductImageDetailsByProductOrImageIdAndCompanyId(productId, imageId, companyId);
            if (!imageVos.isEmpty()) {
                for (int i = 0; i < imageVos.size(); i++) {
                    String filePath = imageVos.get(i).getSrc();
                    filePath = filePath.replaceFirst("(?:" + CONTAINER_NAME + "/)+", "");
                    String imageSrc = azureBlobService.getSignedImageFileFromAZURE(filePath, companyId, productId);
                    if (StringUtils.isNotBlank(imageSrc) && !StringUtils.equals("500", imageSrc)) {
                        int result = productImageRepository.updateSignedSrc(imageVos.get(i).getImageId(), imageSrc);
                        //// log.warning("updateSignedSrc--------->"+result);
                        try {
                            productService.updateImageInProduct(productId, imageSrc);
                        } catch (Exception e) {
                            // TODO: handle exception
                        }
                    }
                }
            } else {

            }
        }

        return null;
    }

    @GetMapping("/custom/variant/select/json")
    @ResponseBody
    public String customproductVariantMultiSelectJSON(@RequestParam Map<String, String> allRequestParams,
                                                      HttpSession session) {
        JSONArray jsonArray = new JSONArray();
        jsonObject = new JSONObject();

        long categoryId = 0;
        long brandId = 0;
        if (StringUtils.isNotBlank(allRequestParams.get("categoryId"))) {
            categoryId = Long.parseLong(allRequestParams.get("categoryId"));
        }
        if (StringUtils.isNotBlank(allRequestParams.get("brandId"))) {
            brandId = Long.parseLong(allRequestParams.get("brandId"));
        }

        // log.info("-=-=--=>>>categoryId" + categoryId+"brandId"+brandId);

        // To search deleted product variant also
        int isVariantDeleted = 0;
        try {
            if (StringUtils.isNotBlank(allRequestParams.get("isVariantDeleted"))) {
                isVariantDeleted = Integer.parseInt(allRequestParams.get("isVariantDeleted"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        List<Map<String, String>> productVariantVos = new ArrayList();
        if (isVariantDeleted == 0) {
            productVariantVos = productService.findProductVariantsWithCategoryAndBrand(allRequestParams.get("q"),
                    Long.parseLong(session.getAttribute("companyId").toString()), categoryId, brandId);
        } else {
            productVariantVos = productService.findAllProductVariantsWithCategoryAndBrand(allRequestParams.get("q"),
                    Long.parseLong(session.getAttribute("companyId").toString()), categoryId, brandId);
        }
//         List<Map<String,String>> productVariantVos = productService.findProductVariantsWithCategoryAndBrand(
//                 allRequestParams.get("q"), Long.parseLong(session.getAttribute("companyId").toString()),categoryId,brandId);
        log.info("-=-=--=>>>" + productVariantVos.size());
        productVariantVos.forEach(p -> {
            JSONObject json1 = new JSONObject();
            try {
                json1.put("id", p.get("product_varient_id"));
                json1.put("text", p.get("name") + " " + (p.get("varient_name") == null ? "" : p.get("varient_name")));
            } catch (Exception e) {

            }
            jsonArray.add(json1);
        });
        try {
            jsonObject.put("total_count", productVariantVos.size());
            jsonObject.put("incomplete_results", true);
            jsonObject.put("items", jsonArray);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonObject.toString();
    }

    @PostMapping("/updateprice")
    @ResponseBody
    public String updatePrice(@RequestParam("productVarientId") String productVarientId,
                              @RequestParam(value = "mrp") double mrp, @RequestParam("sellingprice") double price,
                              @RequestParam(value = "landing") double landing, @RequestParam(value = "purchase") double purchase,
                              @RequestParam("sellingdiscount") double discount, @RequestParam("sellingmargin") double margin,
                              @RequestParam("wholesalerprice") double wholesalerprice,
                              @RequestParam("wholesalerdiscount") double wholesalerdiscount,
                              @RequestParam("wholesalermargin") double wholesalermargin,
                              @RequestParam("retailerprice") double retailerprice,
                              @RequestParam("retailerdiscount") double retailerdiscount,
                              @RequestParam("retailermargin") double retailermargin,
                              @RequestParam("membershipmargin") double membershipmargin, HttpSession session) {

        JSONObject jsonObject = new JSONObject();

        try {
            List<ProductVarientPriceDTO> productVarientPriceList = new ArrayList<>();
            try {
                productVarientPriceList = productService.findProductVarientPriceDetails(0,
                        Long.parseLong(productVarientId));
            } catch (Exception e) {
                e.printStackTrace();
            }

            productService.updatesellingAllprices(Long.parseLong(productVarientId), mrp, price, landing, purchase,
                    discount, margin);
            productService.updatewholesalerAllprices(Long.parseLong(productVarientId), wholesalerprice,
                    wholesalerdiscount, wholesalermargin);
            productService.updateretailerAllprices(Long.parseLong(productVarientId), retailerprice, retailerdiscount,
                    retailermargin);
            productService.updatemembershipAllprices(Long.parseLong(productVarientId), membershipmargin);

            jsonObject.put("status", true);
            jsonObject.put("message", "successful updated");
            try {
                ProductVo productVo = productService.findProductByProductVarientId(Long.parseLong(productVarientId));
                productPriceActivityLog(productVarientPriceList, productVo, session);
            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (Exception e) {
            e.printStackTrace();
            jsonObject.put("status", false);
            jsonObject.put("message", "Somthing went wrong");
        }

        return jsonObject.toString();

    }

// 	@RequestMapping("/allimage/generatesignedsrc")
// 	@ResponseBody
// 	public String generateAllSignedSrcOfImages() {
//
//		List<ProductImageAllDTO> imageVos = productImageRepository.findCustomProductImageDetailsForAllCompany();
//		////log.warning("imageVos size---->"+imageVos.size());
//		if (!imageVos.isEmpty()) {
//			for (int i = 0; i < imageVos.size(); i++) {
//				String filePath = imageVos.get(i).getSrc();
//				long productId = imageVos.get(i).getProductId();
//				long companyId = imageVos.get(i).getCompanyId();
//				filePath = filePath.replaceFirst("(?:" + CONTAINER_NAME + "/)+", "");
//				String imageSrc = azureBlobService.getSignedImageFileFromAZURE(filePath, companyId, productId);
//				if(StringUtils.isNotBlank(imageSrc) && !StringUtils.equals("500", imageSrc)) {
//					int result = productImageRepository.updateSignedSrc(imageVos.get(i).getImageId(), imageSrc);
//					////log.warning("updateSignedSrc--------->"+result);
//					try {
//                    	productService.updateImageInProduct(productId,imageSrc);
//    				} catch (Exception e) {
//    					// TODO: handle exception
//    				}
//				}
//			}
//		} else {
//
//		}
// 		return null;
// 	}

    /**
     * this api for just for testing purpose only this api is generate auto barcode
     *
     * @param
     */
    /*
     * @GetMapping("/generateitemcode") public void generateAutoItemCode(HttpSession
     * session) { CompanySettingVo barcodegenrateserieswise =
     * companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODEGENRATESERIESWISE); if (barcodegenrateserieswise != null &&
     * barcodegenrateserieswise.getValue() == 1) { try { CompanySettingVo
     * barcodeSeriesSetting = companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODESERIES); CompanySettingVo barcodeprefixSetting =
     * companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODEPREFIX); CompanySettingVo barcodelengthSetting =
     * companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODELENGTH);
     *
     * long series = Long.parseLong(barcodeSeriesSetting.getAddValue()); String
     * barcodeprefix = barcodeprefixSetting.getAddValue(); int barcodelength =
     * barcodelengthSetting.getValue(); //log.warning("series------>"+series);
     * //log.warning("barcodeprefix------>"+barcodeprefix);
     * //log.warning("barcodelength------>"+barcodelength);
     *
     * int padlen=4; if(barcodelength!=0){ padlen=barcodelength; }
     * //log.warning("padlen------>"+padlen);
     *
     * for (int i = 0; i < 10; i++) { series = series + 1; String itemCode =
     * barcodeprefix + pad(series, padlen);
     * //log.warning("itemCode------>"+itemCode); }
     *
     * } catch (Exception e) { e.printStackTrace(); } } }
     */

    // To generate barcode for shopify products once import of the products has been
    // done.

    /*
     * @GetMapping("/generateitemcode/shopify/{productsize}") public void
     * generateAutoItemCodeForShopify(HttpSession
     * session,@PathVariable("productsize") int productsize) { CompanySettingVo
     * barcodegenrateserieswise = companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODEGENRATESERIESWISE); if (barcodegenrateserieswise != null &&
     * barcodegenrateserieswise.getValue() == 1) { try { CompanySettingVo
     * barcodeSeriesSetting = companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODESERIES); CompanySettingVo barcodeprefixSetting =
     * companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODEPREFIX); CompanySettingVo barcodelengthSetting =
     * companySettingService.findByCompanyIdAndType(
     * Long.parseLong(session.getAttribute("companyId").toString()),
     * Constant.BARCODELENGTH); long companyId =
     * Long.parseLong(session.getAttribute("companyId").toString()); long series =
     * Long.parseLong(barcodeSeriesSetting.getAddValue()); String barcodeprefix =
     * barcodeprefixSetting.getAddValue(); int barcodelength =
     * barcodelengthSetting.getValue(); int isDeleted = 0;
     *
     * //log.warning("series------>"+series);
     * //log.warning("barcodeprefix------>"+barcodeprefix);
     * //log.warning("barcodelength------>"+barcodelength); String itemcodeSeries =
     * "";
     *
     *
     * List<ProductVo> productVos =
     * productService.findByCompanyIdAndIsDeleted(companyId, 0);
     *
     * ProductMultiBarcodeVo productMultiBarcodeVo = new ProductMultiBarcodeVo();
     *
     * int padlen=4; if(barcodelength!=0){ padlen=barcodelength; }
     * //log.warning("padlen------>"+padlen); int productLimit = productVos.size();
     * if(productsize!=0) { if(productsize>productVos.size()) { productLimit =
     * productsize; } } //log.warning("productVos.size()------>"+productVos.size());
     * //log.warning("productLimit ------>"+productLimit); for (int p = 0; p <
     * productLimit; p++) { for (int i = 0; i <
     * productVos.get(p).getProductVarientsVos().size();i++) { series = series + 1;
     * String itemCode = barcodeprefix + pad(series, padlen);
     * //log.warning("itemCode------>"+itemCode);
     * productVos.get(p).getProductVarientsVos().get(i).setItemCode(itemCode);
     * itemcodeSeries =
     * productVos.get(p).getProductVarientsVos().get(i).getItemCode();
     *
     * }
     *
     * try {
     * productVos.get(p).setItemCode(productVos.get(p).getProductVarientsVos().get(0
     * ).getItemCode()); } catch (Exception e) { e.printStackTrace(); }
     *
     * try { for(int i = 0;i<productVos.get(p).getProductVarientsVos().size();i++) {
     * String itemCode1 =
     * productVos.get(p).getProductVarientsVos().get(i).getItemCode();
     * //log.info("ITEM CODE for MultibarcodeVo::::"+itemCode1); long
     * productVarientId =
     * productVos.get(p).getProductVarientsVos().get(i).getProductVarientId();
     * List<ProductMultiBarcodeVo> productMultiBarcodeVos =
     * productMultiBarcodeRepository.
     * findByProductVarientIdAndCompanyIdAndIsDeletedAndIsDefault(productVarientId,
     * companyId, 0, 1);
     * ////log.warning("productMultiBarcodeVos size=====>"+productMultiBarcodeVos.
     * size ()); if(!productMultiBarcodeVos.isEmpty()) {
     * ////log.warning("======productMultiBarcodeVos is available=====");
     * ProductMultiBarcodeVo productMultiBarcodeVo1 = productMultiBarcodeVos.get(0);
     * productMultiBarcodeVo1.setItemCode(itemCode1); ProductMultiBarcodeVo
     * productMultiBarcodeVo2 =
     * productMultiBarcodeRepository.saveAndFlush(productMultiBarcodeVo1); }else {
     * ////log.warning("======productMultiBarcodeVos is not available=====");
     * productMultiBarcodeVo.setBranchId(companyId);
     * productMultiBarcodeVo.setCompanyId(companyId);
     * productMultiBarcodeVo.setAlterBy(companyId);
     * productMultiBarcodeVo.setCreatedBy(companyId);
     * productMultiBarcodeVo.setModifiedOn(CurrentDateTime.getCurrentDate());
     * productMultiBarcodeVo.setCreatedOn(CurrentDateTime.getCurrentDate());
     * productMultiBarcodeVo.setProductVarientId(productVarientId);
     * productMultiBarcodeVo.setItemCode(itemCode1);
     * productMultiBarcodeVo.setIsDefault(1); ProductMultiBarcodeVo
     * productMultiBarcodeVo2 =
     * productMultiBarcodeRepository.saveAndFlush(productMultiBarcodeVo);
     * ////log.warning("======productMultiBarcodeVo New Created====="); } } } catch
     * (Exception e) { e.printStackTrace(); } }
     *
     *
     * try { //log.warning("itemcodeSeries------------>"+itemcodeSeries); if
     * (barcodegenrateserieswise != null && barcodegenrateserieswise.getValue() ==
     * 1) { try { if (StringUtils.contains(itemcodeSeries,
     * barcodeprefixSetting.getAddValue())) { itemcodeSeries =
     * itemcodeSeries.replace(barcodeprefixSetting.getAddValue(),"");
     * //log.warning("itemcodeSeries--------->"+itemcodeSeries);
     * barcodeSeriesSetting.setAddValue(itemcodeSeries);
     * companySettingService.saveCompanySetting(barcodeSeriesSetting); } } catch
     * (Exception e) { e.printStackTrace(); } } } catch (Exception e) {
     * e.printStackTrace(); }
     *
     *
     * try { productRepository.saveAll(productVos); } catch (Exception e) {
     * e.printStackTrace(); }
     *
     *
     * } catch (Exception e) { e.printStackTrace(); } } }
     */
    public String pad(long num, int size) {
        String s = num + "";
        while (s.length() < size)
            s = "0" + s;
        return s;
    }

    @RequestMapping("/batch/json")
    @ResponseBody
    public List<StockMasterVo> findProductBatch(
            @RequestParam(value = "productVarientId", defaultValue = "0", required = false) long productVarientId,
            @RequestParam(value = "flag", defaultValue = "0", required = false) int flag,
            @RequestParam(value = "batchId", defaultValue = "0", required = false) long batchId,
            @RequestParam(value = "salesType", defaultValue = "", required = false) String salesType,
            HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        List<StockMasterVo> stockMasterVos = stockMasterService
                .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalWithBatchCheck(productVarientId,
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        session.getAttribute("financialYear").toString(),
                        Long.parseLong(session.getAttribute("companyId").toString()), salesType, flag, batchId);
        return stockMasterVos;

    }

    // Api for brand and category filter in stock verification
    @RequestMapping("/inventory/stockverification/json")
    @ResponseBody
    public List<Map<String, Object>> getinventorystockverification(
            @RequestParam(value = "departmentId", required = false, defaultValue = "0") long departmentId,
            @RequestParam(name = "categoryId", defaultValue = "0", required = false) long categoryId,
            @RequestParam(name = "brandId", defaultValue = "0", required = false) long brandId, HttpSession session) {
        List<Map<String, Object>> productList = new ArrayList<>();
        String financialYear = session.getAttribute("financialYear").toString();
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        if (brandId == 0 && categoryId == 0 && departmentId == 0) {

        } else {
            List<ProductStockVerificationDTO> varientsList = productService
                    .findByCompanyIdAndIsDeletedAndDepartmentIdAndCategoryIdAndBrandId(
                            Long.parseLong(session.getAttribute("companyId").toString()), departmentId, categoryId,
                            brandId, financialYear, branchId);
            varientsList.forEach(si -> {
                String salesType = "all";
                Map<String, Object> productItem = new HashMap<>();
                productItem.put("product", si);

                List<StockMasterVo> stockMasterVos = stockMasterService
                        .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalWithBatchCheck(
                                si.getProductVarientId(), branchId, financialYear, companyId, salesType, 0, 0);

                productItem.put("stockMasterVos", stockMasterVos);
                productList.add(productItem);
            });
        }
        return productList;
    }

    @Async
    public void productPriceActivityLog(List<ProductVarientPriceDTO> productVarientPriceList, ProductVo productVo,
                                        HttpSession session) throws IllegalArgumentException, IllegalAccessException {
        log.info("START=========productPriceActivityLog============START");
        if (!productVarientPriceList.isEmpty()) {
            String productName = productVo.getName();
            long userId = Long.parseLong(session.getAttribute("userId").toString());
            long branchId = Long.parseLong(session.getAttribute("branchId").toString());
            long companyId = Long.parseLong(session.getAttribute("companyId").toString());

            for (int i = 0; i < productVarientPriceList.size(); i++) {
                ProductVarientPriceDTO oldVarient = productVarientPriceList.get(i);
                long productId = oldVarient.getProductId();
                long productVarientId = oldVarient.getProductVarientId();
                String varientName = oldVarient.getVarientName();
                List<ProductVarientsVo> newVarients = productVo.getProductVarientsVos().stream().filter(
                                p -> (p.getIsDeleted() == 0) && (p.getProductVarientId() == oldVarient.getProductVarientId()))
                        .collect(Collectors.toList());
                log.warning("varients-------->" + newVarients.size());
                if (!newVarients.isEmpty()) {
                    ProductVarientsVo varient = newVarients.get(0);

                    if (varient.getPurchasePrice() != oldVarient.getPurchasePrice()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "purchase_price",
                                    String.valueOf(oldVarient.getPurchasePrice()),
                                    String.valueOf(varient.getPurchasePrice()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                    if (varient.getSellingPrice() != oldVarient.getSellingPrice()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "selling_price", String.valueOf(oldVarient.getSellingPrice()),
                                    String.valueOf(varient.getSellingPrice()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (varient.getMrp() != oldVarient.getMrp()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "mrp", String.valueOf(oldVarient.getMrp()),
                                    String.valueOf(varient.getMrp()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (varient.getLandingCost() != oldVarient.getLandingCost()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "landing_cost", String.valueOf(oldVarient.getLandingCost()),
                                    String.valueOf(varient.getLandingCost()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (varient.getCompareAtPrice() != oldVarient.getCompareAtPrice()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "compare_at_price",
                                    String.valueOf(oldVarient.getCompareAtPrice()),
                                    String.valueOf(varient.getCompareAtPrice()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (varient.getShopifyPrice() != oldVarient.getShopifyPrice()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "shopify_price", String.valueOf(oldVarient.getShopifyPrice()),
                                    String.valueOf(varient.getShopifyPrice()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (varient.getOtherPrice() != oldVarient.getOtherPrice()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "other_price", String.valueOf(oldVarient.getOtherPrice()),
                                    String.valueOf(varient.getOtherPrice()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (varient.getMembershipPrice() != oldVarient.getMembershipPrice()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "membership_price",
                                    String.valueOf(oldVarient.getMembershipPrice()),
                                    String.valueOf(varient.getMembershipPrice()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (varient.getWholesalerPrice() != oldVarient.getWholesalerPrice()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "wholesaler_price",
                                    String.valueOf(oldVarient.getWholesalerPrice()),
                                    String.valueOf(varient.getWholesalerPrice()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (varient.getRetailerPrice() != oldVarient.getRetailerPrice()) {
                        try {
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "EDIT", "retailer_price",
                                    String.valueOf(oldVarient.getRetailerPrice()),
                                    String.valueOf(varient.getRetailerPrice()), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                } else {
                    try {
                        List<ProductChangeVo> productChangeVos = productChangeLogRepository
                                .findByProductVarientIdAndType(productVarientId, "DELETE");
                        if (productChangeVos.isEmpty()) {
                            ProductVarientsVo productVarientsVo = productService
                                    .findByProductVarientId(productVarientId);
                            log.warning(productVarientsVo.toString());
                            saveProductChange(companyId, branchId, userId, productId, productVarientId, productName,
                                    varientName, "DELETE", "", "0", "0", productVarientsVo.toString());
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            }
        }
        log.info("END=========productPriceActivityLog============END");
    }

    public void saveProductChange(long companyId, long branchId, long userId, long productId, long productVarientId,
                                  String productName, String varientName, String type, String fieldName, String oldValue, String updatedValue,
                                  String detailData) {
        ProductChangeVo productChangeVo = new ProductChangeVo();
        productChangeVo.setProductId(productId);
        productChangeVo.setProductVarientId(productVarientId);
        productChangeVo.setVarientName(varientName);
        productChangeVo.setType(type);
        productChangeVo.setFieldName(fieldName);
        productChangeVo.setOldValue(oldValue);
        productChangeVo.setUpdatedValue(updatedValue);
        productChangeVo.setProductName(productName);
        productChangeVo.setDetailData(detailData);
        productChangeVo.setUserId(userId);
        productChangeVo.setCompanyId(companyId);
        productChangeVo.setBranchId(branchId);
        productChangeVo.setCreatedByName(profileService.getName(userId));
        productChangeLogRepository.save(productChangeVo);
    }

    @Async
    private void stockMasterPriceActivityLog(List<StockMasterPriceDTO> stockMasterPriceList, StockMasterVo newBatch,
                                             HttpSession session) {
        log.info("START=========stockMasterPriceActivityLog============START");
        log.warning("newBatch.getBatchNo() : " + newBatch.getBatchNo());
        log.warning("newBatch.getBatchNo() : " + newBatch.getStockId());
        log.warning("stockMasterPriceList.size() : " + stockMasterPriceList.size());
        if (!stockMasterPriceList.isEmpty()) {
            long userId = Long.parseLong(session.getAttribute("userId").toString());
            long branchId = Long.parseLong(session.getAttribute("branchId").toString());
            long companyId = Long.parseLong(session.getAttribute("companyId").toString());

            for (int i = 0; i < stockMasterPriceList.size(); i++) {
                StockMasterPriceDTO oldBatch = stockMasterPriceList.get(i);
                long stockId = oldBatch.getStockId();
                long productVarientId = oldBatch.getProductVarientId();

                log.warning("stockId >> i : " + i);
                log.warning("stockId : " + stockId);
                log.warning("productVarientId : " + productVarientId);

                log.warning("newBatch.getBatchNo() : " + newBatch.getStockId());
                log.warning("newBatch.getBatchNo() : " + newBatch.getBatchNo());
                String batchNo = newBatch.getBatchNo();
                log.warning("batchNo : " + batchNo);

                if (newBatch.getPurchasePrice() != oldBatch.getPurchasePrice()) {
                    try {
                        saveStockMasterChange(companyId, branchId, userId, stockId, productVarientId, batchNo, "EDIT",
                                "purchase_price", String.valueOf(oldBatch.getPurchasePrice()),
                                String.valueOf(newBatch.getPurchasePrice()), "");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
                if (newBatch.getSellingPrice() != oldBatch.getSellingPrice()) {
                    try {
                        saveStockMasterChange(companyId, branchId, userId, stockId, productVarientId, batchNo, "EDIT",
                                "selling_price", String.valueOf(oldBatch.getSellingPrice()),
                                String.valueOf(newBatch.getSellingPrice()), "");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                log.warning("newmep " + newBatch.getMrp() + " oldmrp" + oldBatch.getMrp());
                if (newBatch.getMrp() != oldBatch.getMrp()) {
                    try {
                        saveStockMasterChange(companyId, branchId, userId, stockId, productVarientId, batchNo, "EDIT",
                                "mrp", String.valueOf(oldBatch.getMrp()), String.valueOf(newBatch.getMrp()), "");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (newBatch.getLandingCost() != oldBatch.getLandingCost()) {
                    try {
                        saveStockMasterChange(companyId, branchId, userId, stockId, productVarientId, batchNo, "EDIT",
                                "landing_cost", String.valueOf(oldBatch.getLandingCost()),
                                String.valueOf(newBatch.getLandingCost()), "");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            }
        }
        log.info("END=========stockMasterPriceActivityLog============END");

    }

    public void saveStockMasterChange(long companyId, long branchId, long userId, long stockId, long productVarientId,
                                      String batchNo, String type, String fieldName, String oldValue, String updatedValue, String detailData) {
        log.warning("batchNo stockMasterChangeVo batchNo : " + batchNo);
        log.warning("batchNo stockMasterChangeVo stockId : " + stockId);
        log.warning("batchNo stockMasterChangeVo fieldName : " + fieldName);
        log.warning("batchNo stockMasterChangeVo oldValue : " + oldValue);
        log.warning("batchNo stockMasterChangeVo updatedValue : " + updatedValue);
        StockMasterChangeVo stockMasterChangeVo = new StockMasterChangeVo();
        stockMasterChangeVo.setStockId(stockId);
        stockMasterChangeVo.setProductVarientId(productVarientId);
        stockMasterChangeVo.setBatchNo(batchNo);
        stockMasterChangeVo.setType(type);
        stockMasterChangeVo.setFieldName(fieldName);
        stockMasterChangeVo.setOldValue(oldValue);
        stockMasterChangeVo.setUpdatedValue(updatedValue);
        stockMasterChangeVo.setDetailData(detailData);
        stockMasterChangeVo.setUserId(userId);
        stockMasterChangeVo.setCompanyId(companyId);
        stockMasterChangeVo.setBranchId(branchId);
        stockMasterChangeVo.setCreatedByName(profileService.getName(userId));
        log.warning("updatemrp here  stockMasterChangeVo batchNo : " + stockMasterChangeVo.getBatchNo());
        stockMasterChangeLogRepository.save(stockMasterChangeVo);
    }

    @ResponseBody
    @PostMapping(value = "/pos/checkanotherbranchhavestock")
    public ResponseEntity<ApiResponse> checkanotherbranchhavestock(HttpServletRequest request, HttpSession session,
                                                                   @RequestParam(name = "productVarientId", required = false, defaultValue = "0") long productVarientId) {
        ApiResponse apiResponse = null;
        if (productVarientId != 0) {
            List<Map<String, String>> data = productService.getanotherbranchstocklist(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    session.getAttribute("financialYear").toString(), productVarientId);
            apiResponse = new ApiResponse(true, "successfully dat fetch", data);
        } else {
            apiResponse = new ApiResponse(false, "Product Varient Required", null);
        }
        return ResponseEntity.ok(apiResponse);
    }

    @PostMapping("/allstockdata")
    public void allStockData(HttpSession session, @RequestParam Map<String, String> allRequestParams,
                             HttpServletRequest request, HttpServletResponse response) throws ParseException {

        HashMap jasperParameter = new HashMap();
        List<String> branchList = new ArrayList<String>();
        if (StringUtils.isNotBlank(allRequestParams.get("stock_branch_id"))) {
            branchList = Arrays.asList(allRequestParams.get("stock_branch_id").split(",")).stream()
                    .collect(Collectors.toList());
        } else {
            branchList.add(session.getAttribute("branchId").toString());
        }

        log.info("branchList" + branchList);
        jasperParameter.put("branchlist", branchList);
        jasperParameter.put("company_id", Long.parseLong(session.getAttribute("companyId").toString()));
        jasperParameter.put("branch_id", Long.parseLong(session.getAttribute("branchId").toString()));
        jasperParameter.put("path", JASPER_REPORT_PATH + System.getProperty("file.separator"));

        jasperParameter.put("year_interval", session.getAttribute("financialYear").toString());
        try {
            if (request.getParameter("formType").equals("excel")) {
                log.info("IN excel METHOD");
                jasperExporter.jasperExporterEXCELINSINGLESHEETReplica(jasperParameter,
                        JASPER_REPORT_PATH + System.getProperty("file.separator") + "/stock/all_stock_data.jrxml",
                        "all_stock_data", response, Constant.DB_REPLICA);

            } else {
                log.info("IN PDF METHOD");
                jasperExporter.jasperExporterPDFReplica(jasperParameter,
                        JASPER_REPORT_PATH + System.getProperty("file.separator") + "/stock/all_stock_data.jrxml",
                        "all_stock_data", response, Constant.DB_REPLICA);

            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @PostMapping("/allproductdata")
    public void allProductData(HttpSession session, @RequestParam Map<String, String> allRequestParams,
                               HttpServletRequest request, HttpServletResponse response) throws ParseException {

        // DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        HashMap jasperParameter = new HashMap();
//            java.sql.Date fromDate = new java.sql.Date(
//                    (dateFormat.parse(allRequestParams.get("fromDate").toString())).getTime());
//            java.sql.Date toDate = new java.sql.Date(
//                    (dateFormat.parse(allRequestParams.get("toDate").toString())).getTime());
//            log.info("data--" + fromDate);
//
//            jasperParameter.put("from_date", fromDate);
//            jasperParameter.put("to_date", toDate);
        jasperParameter.put("branch_id", Long.parseLong(session.getAttribute("branchId").toString()));
        jasperParameter.put("company_id", Long.parseLong(session.getAttribute("companyId").toString()));
        jasperParameter.put("path", JASPER_REPORT_PATH + System.getProperty("file.separator"));

        jasperParameter.put("year_interval", session.getAttribute("financialYear").toString());
        try {
            if (request.getParameter("formType").equals("excel")) {
                log.info("IN excel METHOD");
                jasperExporter.jasperExporterEXCELINSINGLESHEET(jasperParameter,
                        JASPER_REPORT_PATH + System.getProperty("file.separator") + "/product/all_product_data.jrxml",
                        "all_product_data", response);

            } else {
                log.info("IN PDF METHOD");
                jasperExporter.jasperExporterPDF(jasperParameter,
                        JASPER_REPORT_PATH + System.getProperty("file.separator") + "/product/all_product_data.jrxml",
                        "all_product_data", response);

            }

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    // ##### UPDATE ALL PRODUCTS AND SET SHOW ONLINE = 1 ###
    @PostMapping("/setshowonline/all")
    @ResponseBody
    public ApiResponse updateAllProductSetActiveOnlineForEcommerce(HttpSession session) {
        // log.info("START-------updateAllProductSetActiveOnlineForEcommerce
        // Method------START");
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        ApiResponse apiResponse = null;
        try {
            int result = productRepository.updateAllProductSetActiveOnlineForEcommerce(companyId, branchId);
            apiResponse = new ApiResponse(true, "Updated Succesfully...!!!", null);
        } catch (Exception e) {
            e.printStackTrace();
            apiResponse = new ApiResponse(false, "Failed to Update...!!!", null);
        }
        // log.info("END-------updateAllProductSetActiveOnlineForEcommerce
        // Method------END");
        return apiResponse;
    }

    @RequestMapping(value = "/downloadAllVariation/excel")
    @ResponseBody
    public String downloadAllVariation(HttpSession session, HttpServletResponse response) {

        String tmpdir = System.getProperty("java.io.tmpdir");
        try {
            String[] columns = {"Product Name", "ItemCode", "Varient Name", "Option Name 1", "Option Name 2",
                    "Option Name 3", "Option Value 1", "Option Value 2", "Option Value 3"};

            List<ProductVarientSheetDTO> productVariantSheetDtos = productService
                    .findProductVariationsDetailsForUpdateAttribute(
                            Long.parseLong(session.getAttribute("companyId").toString()), 1);
            Workbook workbook = new XSSFWorkbook();
            CreationHelper createHelper = workbook.getCreationHelper();
            String filename = "All-ProductVariation-File" + session.getAttribute("companyId").toString();
            Sheet sheet = workbook.createSheet(filename);
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 14);
            headerFont.setColor(IndexedColors.RED.getIndex());

            CellStyle headerCellStyle = workbook.createCellStyle();
            headerCellStyle.setFont(headerFont);

            Row headerRow = sheet.createRow(0);
            boolean plainSheet = true;
            int length = columns.length;
            for (int i = 0; i < length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(columns[i]);
                cell.setCellStyle(headerCellStyle);
            }

            // CellStyle dateCellStyle = workbook.createCellStyle();
            log.info("product varients " + productVariantSheetDtos.size());
            int rowNum = 1;
            int totalLength = productVariantSheetDtos.size();
            int start = 0;
            for (start = 0; start < totalLength; start++) {
                ProductVarientSheetDTO productVariant = productVariantSheetDtos.get(start);
                // if(rowNum>=5) { break; }
                if (StringUtils.isNotBlank(productVariant.getItemCode())) {
                    Row row = sheet.createRow(rowNum++);
                    row.createCell(0).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getProductName()));
                    row.createCell(1).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getItemCode()));
                    row.createCell(2).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getVarientName()));
                    row.createCell(3).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getAttributeName1()));
                    row.createCell(4).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getAttributeName2()));
                    row.createCell(5).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getAttributeName3()));
                    row.createCell(6).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getAttributeValue1()));
                    row.createCell(7).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getAttributeValue2()));
                    row.createCell(8).setCellValue(
                            securityValidation.replaceCsvInjectionCharacters(productVariant.getAttributeValue3()));
                }
            }
            FileOutputStream fileOut = new FileOutputStream(tmpdir + "/" + filename + ".xlsx");
            workbook.write(fileOut);
            String filePathToBeServed = tmpdir + "/" + filename + ".xlsx"; // complete file name with path;
            File fileToDownload = new File(filePathToBeServed);
            InputStream inputStream = new FileInputStream(fileToDownload);
            response.setContentType("application/force-download");
            response.setHeader("Content-Disposition", "attachment; filename=" + filename + ".xlsx");
            IOUtils.copy(inputStream, response.getOutputStream());
            response.flushBuffer();
            inputStream.close();
            fileOut.close();
            workbook.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @RequestMapping(value = "/updateProductvariation/check/excel")
    @ResponseBody
    public Map<String, Object> updateProductvariation(@RequestParam("updateExcelFile") MultipartFile file,
                                                      HttpSession session, HttpServletRequest request, HttpServletResponse response) throws IOException {
        HashMap<String, Object> map = new HashMap<String, Object>();
        FileValidationResponse fileValidationResponse = securityValidation.validateFile(file, Constant.FILE_EXCEL);
        if (!fileValidationResponse.isValid()) {
            map.put("msg", fileValidationResponse.getMessage());
            return map;
        } else {
            File fb = ImageResize.convert(file);
            log.info(fb.getName());
            log.info(fb.getAbsolutePath());
            String filepath = fb.getAbsolutePath();
            session.setAttribute("filepath", filepath);
            rowNumber = "";
            if (checkSheetvariation(request, response, session)) {

                map.put("msg", "success");
                return map;
            } else {
                // System.err.println("There are some error in following Cell Number --> " +
                // rowNumber);
                map.put("msg", "There are some error in following Cell Number --> \n" + rowNumber);
                return map;
            }
        }

    }

    public boolean checkSheetvariation(HttpServletRequest request, HttpServletResponse response, HttpSession session)
            throws IOException {
        CompanySettingVo limit = companySettingService.findByCompanyIdAndType(0, Constant.SHEETLIMIT);
        String name = "";
        boolean result = true;
        List<String> itemcodelist = new ArrayList<>();
        List<String> categoryNameList = new ArrayList<>();
        List<String> departmentList = new ArrayList<>();
        List<BrandVo> brandList = new ArrayList<>();
        String filepath = (String) session.getAttribute("filepath");
        File fb = new File(filepath);
        InputStream in = new FileInputStream(fb);
        // Create Workbook instance holding reference to .xlsx file
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        // Get first/desired sheet from the workbook
        XSSFSheet sheet = workbook.getSheetAt(0);
        // Iterate through each rows one by one
        long rowTotal = sheet.getLastRowNum();
        itemcodelist = productService.findAllItemcode(Long.parseLong(session.getAttribute("companyId").toString()));
        Iterator<Row> rowIterator = sheet.iterator();
        int decimalNumber = 2;
        try {
            decimalNumber = Integer.parseInt(session.getAttribute("decimalPoint").toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        DataFormatter formatter = new DataFormatter();

        Row row1 = rowIterator.next();

        for (int i = 0; i < 9; i++) {
            String columnName = "";
            if (i == 0) {
                columnName = "Product Name";
            } else if (i == 1) {
                columnName = "ItemCode";
            } else if (i == 2) {
                columnName = "Varient Name";
            } else if (i == 3) {
                columnName = "Option Name 1";
            } else if (i == 4) {
                columnName = "Option Name 2";
            } else if (i == 5) {
                columnName = "Option Name 3";
            } else if (i == 6) {
                columnName = "Option Value 1";
            } else if (i == 7) {
                columnName = "Option Value 2";
            } else if (i == 8) {
                columnName = "Option Value 3";
            }
            if (row1.getCell(i) != null && row1.getCell(i).getStringCellValue().trim() != "") {
                if (!row1.getCell(i).getStringCellValue().trim().equals(columnName)) {
                    result = false;
                    rowNumber += columnName + " column Not find Wrong Sheet";
                }
            } else {
                result = false;
                rowNumber += columnName + " column Not find Wrong Sheet";
            }
        }

        if (rowTotal > limit.getValue()) {
            result = false;
            rowNumber = "";
            rowNumber = "Only " + limit.getValue() + " product can be upload at a time";
        }

        if (result == true) {
            int i = 2;
            while (rowIterator.hasNext()) {

                Row row = rowIterator.next();
                // For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    cell.setCellValue(formatter.formatCellValue(cell));
                    cell.setCellType(Cell.CELL_TYPE_STRING);
                }

                try {
//						if (!isCellValueBlank(row.getCell(2))) {
//							if (row.getCell(2).getStringCellValue().trim().length() <= 30) {
//								if (RegexTest.validateVarientName(row.getCell(2).getStringCellValue().trim())) {
//
//								} else {
//									result = false;
//									rowNumber += "(" + i + ",C)-varient name can only consist of alphabetical, number,back slash and underscore";
//								}
//							} else {
//								result = false;
//								rowNumber += "(" + i + ",C)-varient Name must be less or equal to 30 characters";
//							}
//						}
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    // log.info("--=-=->>>>>>>" + row.getCell(1));
                    if (!isCellValueBlank(row.getCell(1))) {
                        boolean exist = itemcodelist.contains(row.getCell(1).getStringCellValue().trim()) ? true
                                : false;
                        if (exist) {

                        } else {
                            result = false;
                            rowNumber += "(" + i + ",B)-Item code does not exists\n";
                            return result;
                        }
                    } else {
                        result = false;
                        rowNumber += "(" + i + ",B)-Item Code Is Required\n";
                    }
                } catch (Exception e) {
                    rowNumber += "(" + i + ",B)-Item Code Is Required\n";
                    e.printStackTrace();
                }

                try {
                    boolean emptyValue = false;
                    if (isCellValueBlank(row.getCell(6)) && isCellValueBlank(row.getCell(7))
                            && isCellValueBlank(row.getCell(8))) {
                        emptyValue = true;
                        result = false;
                        rowNumber += "(" + i + ",G)-Option Value 1 Required\n";
                    }
                    boolean emptyoption = false;
                    if (isCellValueBlank(row.getCell(3)) && isCellValueBlank(row.getCell(4))
                            && isCellValueBlank(row.getCell(5))) {
                        emptyoption = true;
                        result = false;
                        rowNumber += "(" + i + ",D)-Option Name 1 Required\n";
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!isCellValueBlank(row.getCell(6)) && isCellValueBlank(row.getCell(3))) {
                        result = false;
                        rowNumber += "(" + i + ",D)-Option Name 2 Required\n";
                    }
                    if (!isCellValueBlank(row.getCell(3)) && isCellValueBlank(row.getCell(6))) {
                        result = false;
                        rowNumber += "(" + i + ",G)-Option Value 2 Required\n";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!isCellValueBlank(row.getCell(7)) && isCellValueBlank(row.getCell(4))) {
                        result = false;
                        rowNumber += "(" + i + ",E)-Option Name 2 Required\n";
                    }
                    if (!isCellValueBlank(row.getCell(4)) && isCellValueBlank(row.getCell(7))) {
                        result = false;
                        rowNumber += "(" + i + ",H)-Option Value 2 Required\n";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    if (!isCellValueBlank(row.getCell(8)) && isCellValueBlank(row.getCell(5))) {
                        result = false;
                        rowNumber += "(" + i + ",F)-Option Name 3 Required\n";
                    }
                    if (!isCellValueBlank(row.getCell(5)) && isCellValueBlank(row.getCell(8))) {
                        result = false;
                        rowNumber += "(" + i + ",I)-Option Value 3 Required\n";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                i++;
            }

        }

        workbook.close();
        in.close();

        // log.info("Final Result----------->" + result);
        return result;
    }

    @RequestMapping(value = "/update_bulk_product_variation/upload/excel")
    @ResponseBody
    public String updateBulkVariation(HttpSession session, HttpServletRequest request) throws IOException {

        String filepath = (String) session.getAttribute("filepath");
        File fb = new File(filepath);
        // log.info("update bulck upload");
        InputStream in = new FileInputStream(fb);

        // Create Workbook instance holding reference to .xlsx file
        XSSFWorkbook workbook = new XSSFWorkbook(in);
        // Get first/desired sheet from the workbook
        XSSFSheet sheet = workbook.getSheetAt(0);

        // Iterate through each rows one by one
        Iterator<Row> rowIterator = sheet.iterator();
        rowIterator.next();
        List<Long> productIdList = new ArrayList<>();
        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            // For each row, iterate through all the columns
            Iterator<Cell> cellIterator = row.cellIterator();

            while (cellIterator.hasNext()) {
                Cell cell = cellIterator.next();
                // Check the cell type and format accordingly
                cell.setCellType(Cell.CELL_TYPE_STRING);
                switch (cell.getCellType()) {
                    case Cell.CELL_TYPE_BOOLEAN:

                        // log.info("boolean===>>>" + cell.getBooleanCellValue() + "\t");
                        break;
                    case Cell.CELL_TYPE_NUMERIC:

                        break;
                    case Cell.CELL_TYPE_STRING:

                        // list.add(cell.getStringCellValue().trim());
                        break;

                }

            }

            List<ProductVarientsVo> productVarient = new ArrayList<>();
            productVarient = productService.findByitemCodeIgnoreCaseAndCompanyIdWithoutMerchatType(
                    securityValidation
                            .checkAndReplaceCsvInjectionCharacters(row.getCell(1).getStringCellValue().trim()),
                    Long.parseLong(session.getAttribute("companyId").toString()));

            if (productVarient.size() != 0) {

                if (productVarient.get(0).getProductVo().getHaveVariation() == 1) {
                    String varientName = "";
                    try {
                        varientName = securityValidation
                                .checkAndReplaceCsvInjectionCharacters(row.getCell(2).getStringCellValue().trim());
                    } catch (Exception e) {
                        // e.printStackTrace();
                    }
                    String atributeName1 = "";
                    String atributeName2 = "";
                    String atributeName3 = "";
                    try {
                        atributeName1 = securityValidation
                                .checkAndReplaceCsvInjectionCharacters(row.getCell(3).getStringCellValue().trim());
                    } catch (Exception e) {
                        // e.printStackTrace();
                    }
                    try {
                        atributeName2 = securityValidation
                                .checkAndReplaceCsvInjectionCharacters(row.getCell(4).getStringCellValue().trim());
                    } catch (Exception e) {
                        // e.printStackTrace();
                    }
                    try {
                        atributeName3 = securityValidation
                                .checkAndReplaceCsvInjectionCharacters(row.getCell(5).getStringCellValue().trim());
                    } catch (Exception e) {
                        // e.printStackTrace();
                    }

                    String atributeValue1 = "";
                    String atributeValue2 = "";
                    String atributeValue3 = "";
                    try {
                        atributeValue1 = securityValidation
                                .checkAndReplaceCsvInjectionCharacters(row.getCell(6).getStringCellValue().trim());
                    } catch (Exception e) {
                        // e.printStackTrace();
                    }
                    try {
                        atributeValue2 = securityValidation
                                .checkAndReplaceCsvInjectionCharacters(row.getCell(7).getStringCellValue().trim());
                    } catch (Exception e) {
                        // e.printStackTrace();
                    }
                    try {
                        atributeValue3 = securityValidation
                                .checkAndReplaceCsvInjectionCharacters(row.getCell(8).getStringCellValue().trim());
                    } catch (Exception e) {
                        // e.printStackTrace();
                    }

                    varientName = StringUtils.isNotBlank(atributeValue1) ? atributeValue1 : "";
                    varientName += StringUtils.isNotBlank(atributeValue2) ? " / " + atributeValue2 : "";
                    varientName += StringUtils.isNotBlank(atributeValue3) ? " / " + atributeValue3 : "";
                    log.warning("varientName------>" + varientName);

                    productVarient.get(0).setVarientName(varientName);
                    productVarient.get(0).setAttributeName1(atributeName1);
                    productVarient.get(0).setAttributeName2(atributeName2);
                    productVarient.get(0).setAttributeName3(atributeName3);

                    productVarient.get(0).setAttributeValue1(atributeValue1);
                    productVarient.get(0).setAttributeValue2(atributeValue2);
                    productVarient.get(0).setAttributeValue3(atributeValue3);

                    if (!productIdList.contains(productVarient.get(0).getProductVo().getProductId())) {
                        productIdList.add(productVarient.get(0).getProductVo().getProductId());
                    }

                }
            }

            productService.insertProductVariant(productVarient);
//	            try {
//	            	// ////log.info("HERE in trying to update product through update product in bulk");
//
//					wooCommerceService.saveProductInWooCommerce(session, productVarient.get(0).getProductVo());
//				} catch (Exception e) {
//					e.printStackTrace();
//				}
        }
        if (!productIdList.isEmpty()) {
            saveAttributes(productIdList, session);

        }
        log.info("*********success****************-");
        return "success";

    }

    private void saveAttributes(List<Long> productIdList, HttpSession session) {
        List<ProductCUSTOMAttributeDTO> productCUSTOMAttributeDTOs = productRepository
                .findAttributesFromProductVariantByProduct(Long.parseLong(session.getAttribute("companyId").toString()),
                        productIdList, 1);
        log.warning("productCUSTOMAttributeDTOs------>" + productCUSTOMAttributeDTOs.size());
        if (!productCUSTOMAttributeDTOs.isEmpty()) {
            List<Long> attributeProductIds = new ArrayList<>();
            List<ProductAttributeVo> productAttributeVos = new ArrayList<>();
            for (int i = 0; i < productCUSTOMAttributeDTOs.size(); i++) {
                ProductCUSTOMAttributeDTO productCUSTOMAttributeDTO = productCUSTOMAttributeDTOs.get(i);
                if (StringUtils.isNotBlank(productCUSTOMAttributeDTO.getAttribute1())
                        && StringUtils.isNotBlank(productCUSTOMAttributeDTO.getAttributeName1())) {
                    ProductAttributeVo productAttributeVo = new ProductAttributeVo();
                    productAttributeVo.setOptionName(productCUSTOMAttributeDTO.getAttributeName1());
                    productAttributeVo.setOptionValues(productCUSTOMAttributeDTO.getAttribute1());
                    productAttributeVo.setPosition("0");
                    ProductVo attribute_productVo = new ProductVo();
                    attribute_productVo.setProductId(productCUSTOMAttributeDTO.getProductId());
                    productAttributeVo.setProductVo(attribute_productVo);
                    productAttributeVos.add(productAttributeVo);
                    if (!attributeProductIds.contains(productCUSTOMAttributeDTO.getProductId())) {
                        attributeProductIds.add(productCUSTOMAttributeDTO.getProductId());
                    }
                }
                if (StringUtils.isNotBlank(productCUSTOMAttributeDTO.getAttribute2())
                        && StringUtils.isNotBlank(productCUSTOMAttributeDTO.getAttributeName2())) {
                    ProductAttributeVo productAttributeVo = new ProductAttributeVo();
                    productAttributeVo.setOptionName(productCUSTOMAttributeDTO.getAttributeName2());
                    productAttributeVo.setOptionValues(productCUSTOMAttributeDTO.getAttribute2());
                    productAttributeVo.setPosition("1");
                    ProductVo attribute_productVo = new ProductVo();
                    attribute_productVo.setProductId(productCUSTOMAttributeDTO.getProductId());
                    productAttributeVo.setProductVo(attribute_productVo);
                    productAttributeVos.add(productAttributeVo);
                    if (!attributeProductIds.contains(productCUSTOMAttributeDTO.getProductId())) {
                        attributeProductIds.add(productCUSTOMAttributeDTO.getProductId());
                    }
                }
                if (StringUtils.isNotBlank(productCUSTOMAttributeDTO.getAttribute3())
                        && StringUtils.isNotBlank(productCUSTOMAttributeDTO.getAttributeName3())) {
                    ProductAttributeVo productAttributeVo = new ProductAttributeVo();
                    productAttributeVo.setOptionName(productCUSTOMAttributeDTO.getAttributeName3());
                    productAttributeVo.setOptionValues(productCUSTOMAttributeDTO.getAttribute3());
                    productAttributeVo.setPosition("2");
                    ProductVo attribute_productVo = new ProductVo();
                    attribute_productVo.setProductId(productCUSTOMAttributeDTO.getProductId());
                    productAttributeVo.setProductVo(attribute_productVo);
                    productAttributeVos.add(productAttributeVo);
                    if (!attributeProductIds.contains(productCUSTOMAttributeDTO.getProductId())) {
                        attributeProductIds.add(productCUSTOMAttributeDTO.getProductId());
                    }
                }
            }
            if (!attributeProductIds.isEmpty()) {
                productAttributeRepository.deleteAttributesByProductList(attributeProductIds);
            }

            if (!productAttributeVos.isEmpty()) {
                productAttributeRepository.saveAll(productAttributeVos);
            }

        }
    }

    public boolean isCellValueBlank(Cell cell) {
        if (cell != null && StringUtils.isNotBlank(cell.getStringCellValue().trim())) {
            return false;
        } else {
            return true;
        }

    }

    @PostMapping("/locationStock/{productId}/datatable")
    @ResponseBody
    public DataTableStockLocationDto getLocationWiseStock(HttpSession session,
                                                          @PathVariable(name = "productId", required = false) String productId,
                                                          @RequestParam Map<String, String> allRequestParams) {
        DataTableStockLocationDto dataTableStockLocationDto = new DataTableStockLocationDto();

        ApiResponse apiResponse = null;
        long productID = Long.valueOf(productId.trim());

        try {
            List<Map<String, String>> locationStock = null;
            long companyId = Long.parseLong(session.getAttribute("companyId").toString());
            long branchId = Long.parseLong(session.getAttribute("branchId").toString());
            String financialYear = session.getAttribute("financialYear").toString();
            List<Long> branchList = new ArrayList<Long>();
            if (StringUtils.isNotBlank(allRequestParams.get("branchlist"))) {
                branchList = Arrays.asList(allRequestParams.get("branchlist").split(",")).stream().map(Long::parseLong)
                        .collect(Collectors.toList());
            } else {
                branchList.add(branchId);
            }
            List<Long> productVarient = new ArrayList<Long>();
            int productVarientflag = 0;
            if (StringUtils.isNotBlank(allRequestParams.get("productVarient"))) {
                productVarient = Arrays.asList(allRequestParams.get("productVarient").split(",")).stream()
                        .map(Long::parseLong).collect(Collectors.toList());
                if (productVarient.size() > 0) {
                    productVarientflag = 1;
                }
            } else {
                productVarient.add(0L);
            }
            if (productID != 0) {
                int totallength = 0;

                totallength = productService.getLocationWiseDataCount(financialYear, productID, branchList);

                int start = 0;
                if (allRequestParams.get("start") == null) {
                    start = 0;
                } else {
                    start = Integer.parseInt(allRequestParams.get("start"));
                }

                String pageLength = "";
                if (StringUtils.isNotBlank(allRequestParams.get("length"))) {
                    pageLength = allRequestParams.get("length");
                } else {
                    pageLength = "10";
                }

                int length = 0, page = 0, offsetDisplay = 0, draw = 1;
                try {
                    if (allRequestParams.get("draw") != null && !allRequestParams.get("draw").equals("")) {
                        draw = 1;
                    } else {
                        draw = Integer.parseInt(allRequestParams.get("draw").toString());
                    }
                } catch (Exception e) {
                    // TODO: handle exception
                }

                if (!pageLength.equals("-1")) {
                    if (allRequestParams.get("length") == null || allRequestParams.get("length").equals("")) {
                        length = 10;
                    } else {
                        length = Integer.parseInt(allRequestParams.get("length"));
                    }

                    page = start / length; // Calculate page number
                    offsetDisplay = page * length;
                } else {
                    length = totallength;
                    offsetDisplay = 0;
                }

                if (Long.parseLong(session.getAttribute("userId").toString()) == Long
                        .parseLong(session.getAttribute("companyId").toString())) {
                    locationStock = productService.getLocationWiseData(financialYear, productID, length, offsetDisplay,
                            branchList, productVarientflag, productVarient);

                    dataTableStockLocationDto.setData(locationStock);
                    dataTableStockLocationDto.setRecordsTotal(totallength);
                    dataTableStockLocationDto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
                    dataTableStockLocationDto.setDataTableMetaDTO(new DataTableMetaDTO(page,
                            (int) Math.ceil((totallength) / length), (int) length, (int) totallength));
                    dataTableStockLocationDto.setError(null);
                    dataTableStockLocationDto.setRecordsFiltered(totallength);
                    dataTableStockLocationDto.setRecordsTotal(totallength);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
        return dataTableStockLocationDto;
    }

    @RequestMapping("/checkstockverificationstatus")
    @ResponseBody
    public ApiResponse checkstockverificationstatus(@RequestParam Map<String, String> allRequestParams,
                                                    HttpSession session) {
        ApiResponse apiResponse = new ApiResponse();
        List<Long> batchNo = new ArrayList<Long>();
        if (StringUtils.isNotBlank(allRequestParams.get("batchNo"))) {
            batchNo = Arrays.asList(allRequestParams.get("batchNo").split(",")).stream().map(Long::parseLong)
                    .collect(Collectors.toList());
        }
        List<Map<String, String>> list = stockMasterService.checkForStockVerificationvisiblity("pending", batchNo,
                Long.valueOf(session.getAttribute("branchId").toString()));
        apiResponse.setResponse(list);
        if (list.isEmpty()) {
            apiResponse.setStatus(true);
        } else {
            apiResponse.setStatus(false);
        }
        return apiResponse;
    }

    @RequestMapping("/checkstockverificationstatus/edit/{inventoryTrackingID}")
    @ResponseBody
    public ApiResponse checkstockverificationstatus(@RequestParam Map<String, String> allRequestParams,
                                                    @PathVariable("inventoryTrackingID") long inventoryTrackingID, HttpSession session) {
        ApiResponse apiResponse = new ApiResponse();
        List<Long> batchNo = new ArrayList<Long>();
        if (StringUtils.isNotBlank(allRequestParams.get("batchNo"))) {
            batchNo = Arrays.asList(allRequestParams.get("batchNo").split(",")).stream().map(Long::parseLong)
                    .collect(Collectors.toList());
        }
        List<Map<String, String>> list = stockMasterService.checkForStockVerificationvisiblityEdit("pending", batchNo,
                inventoryTrackingID, Long.parseLong(session.getAttribute("branchId").toString()));
        apiResponse.setResponse(list);
        if (list.isEmpty()) {
            apiResponse.setStatus(true);
        } else {
            apiResponse.setStatus(false);
        }
        return apiResponse;
    }

    @PostMapping("/decimal-validator")
    @ResponseBody
    public String isValidQtyDecimal(
            @RequestParam(value = "productVarientId", required = false, defaultValue = "0") long productVarientId,
            @RequestParam(value = "qty", required = false, defaultValue = "0") String qty, HttpSession session) {
        boolean isValid = true;
        try {
            CompanySettingVo isUmoWiseDecimalRestrictionStopped = companySettingService.findByCompanyIdAndType(
                    Long.parseLong(session.getAttribute("companyId").toString()), Constant.STOPUMOWISEDECIMAL);
            isValid = productService.isValidDecimalQty(productVarientId, qty,
                    isUmoWiseDecimalRestrictionStopped.getValue());
            log.info("isValid>>>>>" + isValid);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "{ \"valid\": " + isValid + " }";
    }

    @PostMapping("/updateexpiryBatch/{id}")
    @ResponseBody
    public ApiResponse updateExpiry(@RequestBody Map<String, String> allRequestParams, @PathVariable("id") long batchId,
                                    HttpSession session) throws ParseException {
        ApiResponse apiResponse = new ApiResponse();
        StockMasterVo stockMasterVo = stockMasterService.findByStockId(batchId);

        List<StockMasterPriceDTO> stockMasterPriceList = new ArrayList<>();
        try {
            stockMasterPriceList = stockMasterRepository.getBatchPriceDTOByStockId(batchId);
        } catch (Exception e) {
            e.printStackTrace();
        }

        String expDateString = allRequestParams.get("expdate");
        String mfgDateString = allRequestParams.get("mfgDate");
        System.out.println("====" + expDateString + "=====" + mfgDateString);
        DateFormat inputDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat outputDateFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date expDate = outputDateFormat.parse(expDateString);
        Date mfgDate = outputDateFormat.parse(mfgDateString);
        String formattedExpDate = inputDateFormat.format(expDate);
        String formattedMfgDate = inputDateFormat.format(mfgDate);
        expDate = inputDateFormat.parse(formattedExpDate);
        mfgDate = inputDateFormat.parse(formattedMfgDate);
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(expDate);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        expDate = calendar.getTime();

        calendar.setTime(mfgDate);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        mfgDate = calendar.getTime();

        int stockMasterVos = stockMasterRepository.findByduplicateBatch(
                stockMasterVo.getProductVarientsVo().getProductVarientId(),
                Long.parseLong(session.getAttribute("branchId").toString()),
                session.getAttribute("financialYear").toString(), stockMasterVo.getLandingCost(), expDate, mfgDate,
                stockMasterVo.getMrp());
        System.out.println(stockMasterVos + "-===count===-");
        if (stockMasterVos == 0) {

            stockMasterService.updateExpiryDates(expDate, mfgDate, batchId);

            String newBatchNo = "";
            String batchNo = stockMasterVo.getBatchNo();
            try {
                SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");
                String strDate = "";
                String batchNoNew = "";
                log.warning("updatemrp here  batch no : " + batchNo);

                if (stockMasterVo.getProductVarientsVo().getProductVo().getIsExpiryManage() == 1) {
                    strDate = formatter.format(expDate);
                    batchNoNew = ("B" + stockMasterVo.getProductVarientsVo().getProductVarientId()
                            + new DecimalFormat("#.###").format(stockMasterVo.getLandingCost())
                            + new DecimalFormat("#.###").format(stockMasterVo.getMrp()) + strDate);
                } else {
                    batchNoNew = ("B" + stockMasterVo.getProductVarientsVo().getProductVarientId()
                            + new DecimalFormat("#.###").format(stockMasterVo.getLandingCost())
                            + new DecimalFormat("#.###").format(stockMasterVo.getMrp()));
                }
                log.warning("updatemrp here  batchNo : " + batchNo);
                log.warning("updatemrp here  batchNoNew : " + batchNoNew);

                stockMasterRepository.updateBatchNoByStockId(stockMasterVo.getStockId(), batchNoNew);
            } catch (Exception e) {
                e.printStackTrace();
            }

            apiResponse.setStatus(true);
        } else {
            apiResponse.setStatus(false);
        }

        return apiResponse;
    }

    @GetMapping("/batch/select/json")
    @ResponseBody
    public String batchSelection(@RequestParam Map<String, String> allRequestParams, HttpSession session) {
        JSONArray jsonArray = new JSONArray();
        jsonObject = new JSONObject();

        // log.info("-=-=--=>>>categoryId" + categoryId+"brandId"+brandId);

        // To search deleted product variant also
        int isVariantDeleted = 0;
        try {
            if (StringUtils.isNotBlank(allRequestParams.get("isVariantDeleted"))) {
                isVariantDeleted = Integer.parseInt(allRequestParams.get("isVariantDeleted"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        List<Map<String, Object>> productVariantVos = new ArrayList();

        productVariantVos = productRepository.findBatch(allRequestParams.get("q"),
                Long.parseLong(session.getAttribute("branchId").toString()));

//         List<Map<String,String>> productVariantVos = productService.findProductVariantsWithCategoryAndBrand(
//                 allRequestParams.get("q"), Long.parseLong(session.getAttribute("companyId").toString()),categoryId,brandId);
        log.info("-=-=--=>>>" + productVariantVos.size());
        productVariantVos.forEach(p -> {
            JSONObject json1 = new JSONObject();
            try {
                json1.put("id", p.get("id"));
                json1.put("text", p.get("value"));
            } catch (Exception e) {

            }
            jsonArray.add(json1);
        });
        try {
            jsonObject.put("total_count", productVariantVos.size());
            jsonObject.put("incomplete_results", true);
            jsonObject.put("items", jsonArray);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonObject.toString();
    }

    @RequestMapping("barcode/list/datatable")
    @ResponseBody
    public DataTableBarcodeResponseDTO barcodeDatatable(@RequestParam Map<String, String> allRequestParams,
                                                        HttpSession session) {
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        long userId = Long.parseLong(session.getAttribute("userId").toString());
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        String serachValue = "";
        if (allRequestParams.get("search.value") != null && !allRequestParams.get("search.value").equals("")) {
            serachValue = allRequestParams.get("search.value").toString();
        }

        Long productId = Long.parseLong(allRequestParams.get("productId"));
        System.err.println("Barcode product id :" + productId);
        Integer totalLength = productService.countMultiBarcode(productId, companyId, branchId);
        int start = Integer.parseInt(allRequestParams.get("start"));
        String pageLength = allRequestParams.get("length");
        int length = 0, page = 0, offset = 0, draw = 1;
        if (!pageLength.equals("-1")) {
            length = Integer.parseInt(allRequestParams.get("length"));
            page = start / length;
            offset = page * length;
        } else {
            length = totalLength;
            offset = 0;
        }
        List<DataTableBarcodeDTO> list = new ArrayList<>();
        list = productService.getAllBarcodeWithPagination(length, offset, productId, companyId, branchId);
        double totalRecords = totalLength;
        DataTableBarcodeResponseDTO dto = new DataTableBarcodeResponseDTO();
        dto.setData(list);
        dto.setDraw(Integer.parseInt(allRequestParams.get("draw")));
        dto.setError(null);
        dto.setRecordsFiltered((int) totalRecords);
        dto.setRecordsTotal((int) totalRecords);
        dto.setDataTableMetaDTO(
                new DataTableMetaDTO(page, (int) Math.ceil((totalRecords) / length), (int) length, (int) totalRecords));
        return dto;
    }

    @PostMapping("/allproducts/list/select/json")
    @ResponseBody
    @Transactional(readOnly = true)
    public CustomProductSelectDTO select(@RequestParam Map<String, String> allRequestParams, HttpSession session) {

        String searchValue = "";
        if (StringUtils.isNotBlank(allRequestParams.get("q"))) {
            if (!allRequestParams.get("q").toString().equals("")) {
                searchValue = allRequestParams.get("q").toString();
                searchValue = searchValue.replace(" ", "%");
                //log.warning("searchValue---->"+searchValue);
            }
        }

        List<SimpleProductDTO> products = productService.getAllProducts(Long.parseLong(session.getAttribute("companyId").toString()), searchValue);
        return new CustomProductSelectDTO(products.size(), true, products);
    }

    @PostMapping("/list/productMultiBarcode/json")
    @ResponseBody
    public List<StockTransferProductMultiBarcodeDTO> getProductMultiBarcodesByStockTransferRequestIdAndWarehouseId(@RequestParam Map<String, String> allRequestParams, HttpSession session) {

        long strId = Long.parseLong(allRequestParams.get("stockTransferRequestId").toString());
        long warehouseId = Long.parseLong(allRequestParams.get("warehouseId").toString());
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());
        StockTransferRequestVo stockTransferRequestVo = stockTransferRequestService.findByStockTransferId(strId);
        List<StockTransferProductMultiBarcodeDTO> productMultiBarcodes = productService.getProductMultiBarcodesByStockTransferRequest(stockTransferRequestVo, companyId, warehouseId);
        return productMultiBarcodes;
    }

    @PostMapping("/productMultiBarcode/json")
    @ResponseBody
    public List<StockTransferProductMultiBarcodeDTO> getProductMultiBarcodesByCombinationAndWarehouseId(@RequestParam Map<String, String> allRequestParams, HttpSession session) {
        long productVarientId = Long.parseLong(allRequestParams.get("productVarientId").toString());
        long divisionId = Long.parseLong(allRequestParams.get("divisionId").toString());
        long departmentId = Long.parseLong(allRequestParams.get("departmentId").toString());
        long productSizeId = Long.parseLong(allRequestParams.get("productSizeId").toString());
        long fitId = Long.parseLong(allRequestParams.get("fitId").toString());
        long warehouseId = Long.parseLong(allRequestParams.get("warehouseId").toString());
        int reqQty = Integer.parseInt(allRequestParams.get("reqQty").toString());
        long companyId = Long.parseLong(session.getAttribute("companyId").toString());

        List<StockTransferProductMultiBarcodeDTO> productMultiBarcodeList = productService.getProductMultiBarcodesByCombinationAndWarehouseIdAndReqQty(productVarientId, divisionId, departmentId, productSizeId, fitId, warehouseId, reqQty, companyId);
        return productMultiBarcodeList;
    }
    @RequestMapping("get/inventory/barcode/json")
    @ResponseBody
    public List<ProductVarientsVo> getInventoryBarcode(@RequestParam("barcode") String barcode,
                                                       @RequestParam(value = "type", required = false, defaultValue = "") String type, HttpSession session) {
        // ProductVarientsVo productVarientsVo =
        // productVariantRepository.findByProductVarientId(Long.parseLong(barcode));
    	System.out.println("=============================================================>>>"+barcode);
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
      
        String clusterId = session.getAttribute("clusterId").toString();
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());
        Long productMultiBarcodeId = productMultiBarcodeRepository.getProductMultiBarcodeByBarcodeAndIsDeleted(barcode,0);
        System.out.println("===============================>"+productMultiBarcodeId);
        RackVo rackVo = rackRepository.findAllRackByBranchIdAndCompanyId(branchId,Long.parseLong(session.getAttribute("companyId").toString()));

        // ProductVarientsVo productVarientsVo =
        // productVariantRepository.findByProductVarientId(Long.parseLong(barcode));
        List<String> producttypelist = new ArrayList<>();
        producttypelist = productTypeRepository.findListOfData();
        List<ProductVarientsVo> varientsList = productService.findByItemCodeIgnoreCaseAndCompanyIdAndIsDeleted(barcode,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId,
                producttypelist);

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        List<ProductVarientsVo> productVarientsVos = new ArrayList<ProductVarientsVo>();

        if (!varientsList.isEmpty()) {
            varientsList.forEach(pv -> {
                ProductVarientsVo productVarientsVo = new ProductVarientsVo();
                if (productVarientsVo != null) {
                    ////// log.info("pv.getSellingPrice()"+productVarientsVo.getSellingPrice());
                    try {
                        productVarientsVo = (ProductVarientsVo) pv.clone();
                    } catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                    ////// log.info("productVarientsVo"+productVarientsVo.getSellingPrice());
                }

                if (productVarientsVo == null) {
                    log.info("data empty");
                    // return null;
                } else {
                    log.info("data not empty");
                    String s = stockMasterRepository.findproductVariantQty(
                            Long.parseLong(session.getAttribute("companyId").toString()),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
                    if (s == null) {
                        s = "0";
                    }
                    productVarientsVo.setProductMultiBarcodeId(productMultiBarcodeId);
                    productVarientsVo.setRackId(rackVo.getRackId());
                    productVarientsVo.setWarehouseId(rackVo.getWarehouseId());
                    System.err.println("idddddddddd"+productVarientsVo.getProductVarientId());
                    System.err.println("rack_id="+rackVo.getRackId()+ " warehouseId = "+ rackVo.getWarehouseId());
                    List<StockMasterVo> stockMasterVos = stockMasterService
                            .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalAndproductMultiBarcodeId(
                                    productVarientsVo.getProductVarientId(),
                                    Long.parseLong(session.getAttribute("branchId").toString()),
                                    session.getAttribute("financialYear").toString(),productMultiBarcodeId,rackVo.getRackId(),rackVo.getWarehouseId());
                 // Print the data to the console
                    System.out.println("Printing StockMasterVos:");
//                    for (StockMasterVo stockMasterVo : stockMasterVos) {
////                        System.out.println("===>======-======-=============>"+stockMasterVo);
//                    }
                    if (stockMasterVos != null) {
                        productVarientsVo.setStockMasterVos(stockMasterVos);
                    }

                    //// log.info("type is blank>>>>>>>>>>>>>>>>>>>>>>>"+type);
                    if (StringUtils.isBlank(type)) {
                        //// log.info("type is blank>>>>>>>>>>>>>>>>>>>>>>>");
                        if (stockMasterVos == null || stockMasterVos.size() <= 0) {
                            double sellingPrice = 0.0;
                            double landingcost = 0.0;
                            if (productVarientsVo != null) {
                                // System.err.println("product available");
                                if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                                    landingcost = productVarientsVo.getPurchasePrice();
                                    // //System.err.println("landing cost tax includeing"+landingcost);
                                } else {

                                    landingcost = productVarientsVo.getPurchasePrice()
                                            + (productVarientsVo.getPurchasePrice()
                                            * productVarientsVo.getProductVo().getPurchaseTaxVo().getTaxRate()
                                            / 100);
                                    // //System.err.println("landing cost tax exclusive"+landingcost);
                                }
                            }
                            if (productVarientsVo != null) {
                                if (productVarientsVo.getDiscountType().equals("percentage")) {
                                    sellingPrice = productVarientsVo.getMrp()
                                            - (productVarientsVo.getMrp() * productVarientsVo.getDiscount() / 100);
                                    // //System.err.println("selling price discount in persantage"+sellingPrice);
                                } else {
                                    sellingPrice = productVarientsVo.getMrp() - productVarientsVo.getDiscount();
                                    // //System.err.println("selling price discount in amount"+sellingPrice);
                                }
                            }
                            StockMasterVo stockMasterVo = new StockMasterVo();
                            stockMasterVo.setBranchId(Long.parseLong(session.getAttribute("branchId").toString()));
                            stockMasterVo.setCompanyId(Long.parseLong(session.getAttribute("companyId").toString()));
                            stockMasterVo.setCreatedOn(new Date());
                            stockMasterVo.setMrp(productVarientsVo.getMrp());
                            stockMasterVo.setBatchNo("B" + productVarientsVo.getProductVarientId()
                                    + new DecimalFormat("#.###").format(landingcost));
                            stockMasterVo.setYearInterval(session.getAttribute("financialYear").toString());
                            stockMasterVo.setLandingCost(landingcost);
                            stockMasterVo.setPurchasePrice(productVarientsVo.getPurchasePrice());
                            stockMasterVo.setSellingPrice(sellingPrice);
                            stockMasterVo.setQuantity(0);
                            stockMasterVo.setProductVarientsVo(productVarientsVo);
                            stockMasterVo.setModified_on(new Date());
                            StockMasterVo stockMasterVo1 = stockMasterService.save(stockMasterVo);
                            List<StockMasterVo> stockMasterVos1 = new ArrayList<>();
                            stockMasterVos1.add(stockMasterVo1);
                            productVarientsVo.setStockMasterVos(stockMasterVos1);
                        }
                    }
                    productVarientsVo.getProductVo().setProductVarientsVos(null);
                    productVarientsVo.getProductVo().setProductAttributeVos(null);
//                	            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//                	            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                        productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
                    }
                    if (productVarientsVo.getProductVo().getBrandVo() != null) {
                        productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
                    }
                    productVarientsVo.setAvailableQty(s);
                    productVarientsVos.add(productVarientsVo);
                }
            });
        }
        return productVarientsVos;

    }
    @RequestMapping("/sales/{productvariantId}/{batchNo}/{contactId}/{batchMrp}/{productMultiBarcodeId}/{rackId}/{warehouseId}/json")
    @ResponseBody
    public ProductVarientsVo getVarientInfoByIdAndBatchNumber(@PathVariable long productvariantId,
                                                          @PathVariable("batchNo") String batchNo, @PathVariable("contactId") long contactId,
                                                          @PathVariable("batchMrp") double batchMrp,@PathVariable("productMultiBarcodeId") long productMultiBarcodeId,@PathVariable("rackId") long rackId,@PathVariable("warehouseId") long warehouseId, HttpSession session) {

        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        CompanySettingVo lastSalesPrice = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.LASTSALESMRP);

        ProductVarientsVo pv = productService.findByProductVarientIdAndCompanyIdAndIsDeleted(productvariantId,
                Long.parseLong(session.getAttribute("companyId").toString()), 0, merchantTypeId, clusterId);
        ProductVarientsVo productVarientsVo = new ProductVarientsVo();
        CompanySettingVo ALLOWCUSTOMERWISEPRODUCTMAPPING = companySettingService.findByBranchIdAndType(
                Long.parseLong(session.getAttribute("branchId").toString()), Constant.ALLOWCUSTOMERWISEPRODUCTMAPPING);
        try {
            productVarientsVo = (ProductVarientsVo) pv.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        if (productVarientsVo == null) {
            return null;
        } else {
            String s = stockMasterRepository.findproductVariantQty(
                    Long.parseLong(session.getAttribute("companyId").toString()),
                    Long.parseLong(session.getAttribute("branchId").toString()),
                    productVarientsVo.getProductVarientId(), session.getAttribute("financialYear").toString());
            if (s == null) {
                s = "0";
            }
            productVarientsVo.setDiscount2(0.0);
            productVarientsVo.setDiscountType2("percentage");
            productVarientsVo.setOriginalMrp(productVarientsVo.getMrp());
            if (lastSalesPrice.getValue() == 1) {
                log.warning("LAST sales PRICE---->yes");
                if (contactId != 0) {
                    // get last transaction
                    SalesItemVo salesItemVo = saleItemRepository.findByBranchIdProductVarientIdAndBatchNoAndContactId(
                            branchId, productvariantId, batchNo, contactId);
                    if (salesItemVo != null) {
                        productVarientsVo.setDiscount(salesItemVo.getDiscount());
                        productVarientsVo.setDiscountType(salesItemVo.getDiscountType());
                        productVarientsVo.setDiscount2(salesItemVo.getDiscount2());
                        productVarientsVo.setDiscountType2(salesItemVo.getDiscountType2());
                        if (productVarientsVo.getProductVo().getTaxIncluded() == 1) {
                            try {
                                productVarientsVo.setMrp(
                                        salesItemVo.getPrice() + (salesItemVo.getTaxAmount() / salesItemVo.getQty()));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            productVarientsVo.setMrp(salesItemVo.getPrice());
                        }

                    } else {
//                        productVarientsVo.setDiscount(productVarientsVo.getDiscount());
//                        productVarientsVo.setDiscountType(productVarientsVo.getDiscountType());
                        productVarientsVo.setMrp(batchMrp);
                    }
                } else {
                    productVarientsVo.setMrp(batchMrp);
                }
            } else {
                productVarientsVo.setMrp(batchMrp);
            }

            // only for material creation module
            try {
                PurchaseItemVo piv = purchaseItemRepository.findByBranchIdProductVarientId(
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        productVarientsVo.getProductVarientId());
                if (piv != null) {
                    if (productVarientsVo.getProductVo().getPurchaseTaxIncluded() == 1) {
                        productVarientsVo.setLastPurchasePrice(piv.getPrice() + (piv.getTaxAmount() / piv.getQty()));
                    } else {
                        productVarientsVo.setLastPurchasePrice(piv.getPrice());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            List<StockMasterVo> stockMasterVos = stockMasterService
                    .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearInterval(
                            productVarientsVo.getProductVarientId(),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString());
            if (stockMasterVos != null) {
                productVarientsVo.setStockMasterVos(stockMasterVos);
            }

            productVarientsVo.getProductVo().setProductVarientsVos(null);
            productVarientsVo.getProductVo().setProductAttributeVos(null);
//            productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
//            productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            if (productVarientsVo.getProductVo().getCategoryVo() != null) {
                productVarientsVo.getProductVo().getCategoryVo().setCategoryVo(null);
            }
            if (productVarientsVo.getProductVo().getBrandVo() != null) {
                productVarientsVo.getProductVo().getBrandVo().setBrandVo(null);
            }
            productVarientsVo.setAvailableQty(s);
           // productVarientsVo.setMultiItemCode(productVarientsVo.getMultiItemCode());

            try {
                int finishproductmapping = 0;
                log.warning("finishproductmapping >>>>>>> : " + finishproductmapping);
                finishproductmapping = companySettingService
                        .findByCompanyIdAndType(Long.parseLong(session.getAttribute("companyId").toString()),
                                Constant.FINISHPRODUCTMAPPING)
                        .getValue();
                log.warning("finishproductmapping >>>>>>> : " + finishproductmapping);
                if (finishproductmapping == 1) {
                    productVarientsVo.setMappedProduct(productMappingRepository.getMappedProductWithstock(
                            productVarientsVo.getProductVo().getProductId(),
                            Long.parseLong(session.getAttribute("branchId").toString()),
                            session.getAttribute("financialYear").toString()));
                    log.warning("Set Mapped product >>>>>>> : ");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            if (ALLOWCUSTOMERWISEPRODUCTMAPPING.getValue() == 1) {
                ContactProductVo product = contactProductRepository
                        .findByProductVarientIdAndContactId(productVarientsVo.getProductVarientId(), contactId);
                if (product != null) {
                    productVarientsVo.setMrp(product.getPrice());
                    productVarientsVo.setIsCustomerMapping(1);

                }
            }
            productVarientsVo.setProductMultiBarcodeId(productMultiBarcodeId);
            productVarientsVo.setRackId(rackId) ;
            productVarientsVo.setWarehouseId(warehouseId);
            
            return productVarientsVo;
        }

    }
    @RequestMapping("new/batch/json")
    @ResponseBody
    public List<StockMasterVo> findProductBatch1(
            @RequestParam(value = "productVarientId", defaultValue = "0", required = false) long productVarientId,
            @RequestParam(value = "flag", defaultValue = "0", required = false) int flag,
            @RequestParam(value = "batchId", defaultValue = "0", required = false) long batchId,
            @RequestParam(value = "salesType", defaultValue = "", required = false) String salesType,
            @RequestParam(value = "productMultiBarcodeId", defaultValue = "", required = false) long productMultiBarcodeId,
            HttpSession session) {
        long merchantTypeId = Long.parseLong(session.getAttribute("merchantTypeId").toString());
        String clusterId = session.getAttribute("clusterId").toString();
        long branchId = Long.parseLong(session.getAttribute("branchId").toString());

        List<StockMasterVo> stockMasterVos = stockMasterService
                .findByProductVarientsVoProductVarientIdAndCompanyIdAndYearIntervalAndProductMultiBarcodeIdAndWithBatchCheck(productVarientId,
                        Long.parseLong(session.getAttribute("branchId").toString()),
                        session.getAttribute("financialYear").toString(),
                        Long.parseLong(session.getAttribute("companyId").toString()), salesType, flag, batchId,productMultiBarcodeId);
        return stockMasterVos;

    }
}
