
    @PostMapping("/saveBankReceipt")
    @ResponseBody
    public Map<String, Object> saveBankReceipt(@RequestParam("files") List<MultipartFile> files,HttpSession session,
            @RequestParam("data") List<SalesRegisterVo> data, HttpServletRequest request) {
			HashMap<String, Object> map = new HashMap<String, Object>();
			for (int i = 0; i < files.size(); i++) {
	            MultipartFile file = files.get(i);
	            long salesRegisterId = data.get(i).getSalesRegisterId();
	          try {
	  
	              if (!file.isEmpty()) {
	                  FileValidationResponse response = securityValidation.validateFile(file, Constant.FILE_IMAGE);
	                  if (!response.isValid()) {
	                      map.put("status", "500");
	                      map.put("msg", response.getMessage());
	                      return map;
	                  } else {
	                      if (file.getSize() > MAX_IMAGE_SIZE) {
	                          log.info("file size" + file.getSize());
	                          map.put("status", "500");
	                          map.put("msg", "Image size is more than 800KB");
	                          return map;
	                      }
	                      long companyId = Long.parseLong(String.valueOf(session.getAttribute("companyId").toString()));
	                      String fileName, fileExtension = "";
	                      File fb = ImageResize.convert(file);
	                      Calendar calendar = Calendar.getInstance();
	                      fileExtension = ProductController.getFileExtension(fb);
	  
	                      fileName = salesRegisterId + "-" + calendar.getTimeInMillis() + "." + fileExtension;
	                      String imageSrc = BUCKET + "/" + IMAGE_LOCATION + "/" + companyId + "/" + salesRegisterId + "/"
	                              + fileName;
	                      String uploadStatus = "500";
	                      String azureImageSrc = "";
	                      String imagePath = "";
	                      if (FILE_UPLOAD_SERVER.equals(Constant.FILE_UPLOAD_SERVER_AZURE)) {
	                          Map<String, String> azureResponse = azureBlobService.sendImageFileToAZURE(fb, fileName,
	                                  fileExtension, companyId, salesRegisterId);
	                          if (!azureResponse.isEmpty()) {
	                              if (StringUtils.isNotBlank(azureResponse.get("status"))
	                                      && azureResponse.get("status").equals("200")) {
	                                  uploadStatus = "200";
	                                  azureImageSrc = azureResponse.get("imageSrc");
	                                  imagePath = azureImageSrc;
	                              }
	                          }
	                      } else {
	                          AWSCredentials credentials = new BasicAWSCredentials(ACCESS_KEY, SECRET_KEY);
	                          java.security.Security.setProperty("networkaddress.cache.ttl", S3_CACHE);
	                          s3 = new AmazonS3Client(credentials);
	                          s3.setEndpoint(END_POINT_URL);
	  
	                          Part part = request.getPart("file-up");
	                          InputStream targetStream = new FileInputStream(fb);
	  
	                          ObjectMetadata objectMetadata = new ObjectMetadata();
	                          if (fileExtension.equalsIgnoreCase("png"))
	                              objectMetadata.setContentType(MediaType.IMAGE_PNG_VALUE);
	                          else if (fileExtension.equalsIgnoreCase("jpg"))
	                              objectMetadata.setContentType(MediaType.IMAGE_JPEG_VALUE);
	                          else if (fileExtension.equalsIgnoreCase("jpeg"))
	                              objectMetadata.setContentType(MediaType.IMAGE_JPEG_VALUE);
	 
	                          objectMetadata.setContentLength(fb.length());
	                          PutObjectRequest putObjectRequest = new PutObjectRequest(BUCKET,
	                                  IMAGE_LOCATION + "/" + companyId + "/" + salesRegisterId + "/" + fileName, targetStream,
	                                  objectMetadata);
	                          // skip if do not want to access the image directly from S3
	  
	                          putObjectRequest.setCannedAcl(CannedAccessControlList.PublicRead);
	                          // skip if do not want to access the image directly from S3
	                          s3.putObject(putObjectRequest);
	                          uploadStatus = "200";
	                          imagePath = Constant.REALPATH + imageSrc;
	                      }
	  
	                      if (uploadStatus == "200") {
	                             System.err.println("hello");
	                             SalesRegisterVo registerVo = data.get(i);
		                         registerVo.setIsReceiptUpload(1);
		                         registerVo.setReceiptPath(fileName);
		                         registerVo.setSignedReceiptPath(azureImageSrc);
		                         salesRegisterRepository.save(registerVo);
	                      }
	                     // map.put("data", productImageVo);
	                      map.put("status", "200");
	                  }
	              }
	          } catch (Exception e) {
	              e.printStackTrace();
	              map.put("status", "500");
	            
	          }
	        }
      return map;

    }
    
    @RequestMapping(value = "/download/{id}")
    @ResponseBody
    public ResponseEntity<Resource> retrieveDocument(HttpServletRequest request, HttpServletResponse response, @PathVariable("id") long id, HttpSession session) throws IOException {
        SalesRegisterVo registerVo = salesRegisterRepository.findBysalesRegisterIdAndBranchId(id, Long.parseLong(session.getAttribute("branchId").toString()));
        long companyId = Long.parseLong(String.valueOf(session.getAttribute("companyId").toString()));
        long salesRegisterId = registerVo.getSalesRegisterId();
        //String fileLocation = COMPANY_DRIVE_FILE_LOCATION + "/" + companyId + "/" + "/" + id + "/" + driveVo.getDocPath();
        String fileLocation = IMAGE_LOCATION + "/" + companyId + "/" + salesRegisterId + "/" + registerVo.getReceiptPath();
        if(FILE_UPLOAD_SERVER.equals(Constant.FILE_UPLOAD_SERVER_AZURE)) {
        	return azureBlobService.getDriveAttachmentFileFromAZURE(fileLocation, registerVo.getReceiptPath());
        }else {
        	String file_path = END_POINT_URL + "/" + BUCKET + "/" + fileLocation;//PURCHASE_ATTACHMENT_LOCATION + "/" + companyId + "/" + "/" + id + "/" + purchaseVo.getImgLocation();
	        String file_name = registerVo.getReceiptPath();
	        BufferedInputStream inputStream = new BufferedInputStream(new URL(file_path).openStream());
	
	        Files.copy(inputStream, Paths.get(System.getProperty("java.io.tmpdir") + System.getProperty("file.separator") + file_name), StandardCopyOption.REPLACE_EXISTING);
	        Path filePath = Paths.get(System.getProperty("java.io.tmpdir") + System.getProperty("file.separator") + file_name);
	        Resource resource = new UrlResource(filePath.toUri());
	
	        // Try to determine file's content type
	        String contentType = null;
	        try {
	            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());
	        } catch (IOException ex) {
	
	        }
	        if (contentType == null) {
	            contentType = "application/octet-stream";
	        }
	
	        return ResponseEntity.ok()
	                .contentType(MediaType.parseMediaType("application/octet-stream"))
	                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
	                .body(resource);
        }

    }
var isModalOpen =0;
$(document).ready(function () {
	dailySalesTarget();
	FocusProducts();
	dailySalesNewCustomer();
	var lastShownDate = sessionStorage.getItem('modalShownDate');
		var currentDate = new Date().toDateString();
		if (lastShownDate !== currentDate) {
			isModalOpen =1;
		}


function checkSalesRegister(){
    blockPage()
    $.post("/salesregister/checksalesregister", function (data) {
        if (data.salesRegisterId == 0) {
            //$("#preloader").hide();
                showPage(1);
                
				unblockPage();
				if(FLAGNOTSTARTPOS){
                    blockPageMsg("Please check Financial Year or Contact to admin for the and refresh POS")
                }else if(EDIT_POS_REDIRECT!=1){
                    $('#cash_in_hand_model').modal({backdrop: 'static', keyboard: false})
		            $('#cash_in_hand_model').modal('show');
		            if(CASHMANAGERFLOW==1){
		                $("#cashmanagerflow_selection_manager").removeClass("m--hide")
		            }else{
		                $("#cashmanagerflow_selection_manager").addClass("m--hide")
		            }
		            ISSALESREGISTEROPEN=false
	            }
			
            
        } else {
        var lastsync = JSON.parse(localStorage.getItem('productlastsync'));
            //if (lastsync!= null) {//comment 
                    //$("#preloader").hide();
            //  showPage();
                //unblockPage();
        //  }
            $("#salesregisterid").val(data.salesRegisterId);
            getAllHoldBill(data.salesRegisterId);
            LastBillIdFirstTime();
            ISSALESREGISTEROPEN=true;
            var startDate = moment(moment(data.registerStartDate).format('DD-MM-YYYY'), "DD-MM-YYYY");
            var endDate = moment();
            if ((endDate.diff(startDate, 'days')) >= 1) {
                toast("ERROR","Sales Register Is Open For Last " + endDate.diff(startDate, 'days') + "  Days.");
            }
            unblockPage();
             fatchAlldata(function(results) {
                  unblockPage();
                //setTimeout(function () {
                            //$("#preloader").hide();
                            
                 //   }, 10000);
            
                /*if(FOCUSONPOS==0){
                    $('#contactVo').val("0").trigger('change');
                    $("#contactVo").focus();
                    $("#contactVo").select2("open");
                }else{
                      $("#searchBarcode").focus();
                }*/
                showPage(0);
                if(FLAGNOTSTARTPOS){
                    blockPageMsg("Please check Financial Year or Contact to admin for the and refresh POS")
                }else{
                    $("#product_sidebar_list_div_items").empty();
                    var departmentId = Number($("#categoryId").val());
                    $.ajax({
                        url: "/sales/pos/fastsellingproducts/" + departmentId,
                        method: "GET",
                        success: function (data) {
                            if (data.length === 0) {
                                $("#product_sidebar_list_div_items").append('<div class="col-md-12 col-sm-12 mb-2 pl-0"><a class="product-list-item" href="javascript:void(0);"><div class="card product-card"><div class="card-body p-2"><h5 class="card-title" style="text-align: center;">No Data Available</h5></div></div></a></div>');
                            } else {
                                data.forEach(function (p) {
                                    var imgsrc = '';
                                    //var name = (p.name.length > 14) ? p.name.substring(0, 14) + "..." : p.name;
                
                                    $("#product_sidebar_list_div_items").append('<div class="col-md-3 col-sm-3 mb-2 pl-0">' +
                                    '<a class="product-list-item" href="javascript:void(0)">' +
                                    '<div class="card product-card" title="' + p.name + '">' +
                                    '<div class="card-body p-2">' +
                                    '<h5 class="card-title">' + p.name + '</h5>' +
                                    '<p><strong>Total Quantity Sold : ' + p.total_quantity_sold + '</strong></p>' +
                                    '</div>' +
                                    '</div>' +
                                    '</a>' +
                                    '</div>');
        
                                });
                            }
                        },
                        error: function (error) {
                            console.error("Error retrieving product information:", error);
                        }
                    });
                }
               
            });
        }
    });
    // receipt upload
    $.post("/salesregister/checkReceiptUpload", function (data) {
        if (data.length !== 0) {
            console.log("aa gaye bhai bs" , data);
            var tbody = $('#confirm_receipt_uploaded').find('tbody');
            
            data.forEach(function(item) {
                var fromDate = new Date(item.registerStartDate).toISOString().split('T')[0];
                var toDate = new Date(item.registerEndDate).toISOString().split('T')[0];
                var row = '<tr>' +
                '<td>' + fromDate  + '</td>' +
                '<td>' + toDate + '</td>' +
                '<td><input type="file" name="file"></td>' +
                '<input type="hidden" name="salesRegisterId" value="' + item.salesRegisterId + '">' +
            '</tr>';
                tbody.append(row);
            });
    if(isModalOpen == 1){
            $('#confirm_receipt_uploaded').modal('show');
            sessionStorage.setItem('modalShownDate', new Date().toDateString());
        }
        }
    });
    
    // close receipt
}
function saveBankReceipts() {
    var formData = new FormData();
    $('.bankReceiptTableBody tr').each(function(index, row) {
        var fileInput = $(row).find('input[name="file"]')[0];
        var file = fileInput.files.length > 0 ? fileInput.files[0] : null;
        var salesRegisterId = $(row).find('input[name="salesRegisterId"]').val();
        if (file) {
            formData.append('files', file);
            formData.append('data', salesRegisterId);
        }
    });

    $.ajax({
        url: '/salesregister/saveBankReceipt',
        method: 'POST',
        processData: false,
        contentType: false,
        data: formData,
        success: function(response) {
            toastr.success('Bank Receipt Uploaded');
            $('#confirm_receipt_uploaded').modal('hide');
        },
        error: function(xhr, status, error) {
            console.error('Error saving data:', error);
            $('#confirm_receipt_uploaded').modal('hide');
        }
    });
}



